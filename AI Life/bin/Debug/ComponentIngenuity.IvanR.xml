<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ComponentIngenuity.IvanR</name>
    </assembly>
    <members>
        <member name="T:ComponentIngenuity.Ivan.ClassDefinition">
            <summary>
            The definition for a registered class in the drawing.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ClassDefinition.ClassNumber">
            <summary>
            The class number for the registered class.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ClassDefinition.ProxyFlags">
            <summary>
            A bit coded value indicating the capabilities of the object as a proxy.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ClassDefinition.WasAZombie">
            <summary>
            Indicates if the class was not loaded at the time the drawing file was
            created.  Zombie means proxy.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ClassDefinition.ClassId">
            <summary>
            Specifies if the object is a DrawingObject or DrawingEntity.
            </summary>
            <remarks>
            ClassId is 0x1F3 for DrawingObject and 0x1F2 for DrawingEntity.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ClassDefinition.ItemCount">
            <summary>
            Number of objects created of this type in the drawing.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ClassDefinition.DwgVersion">
            <summary>
            File format version.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ClassDefinition.MaintenanceVersion">
            <summary>
            File format maintenance version.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ClassDefinition.AppName">
            <summary>
            Name of the <see cref="T:ComponentIngenuity.Ivan.RegisteredApp"/> that registered the class.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ClassDefinition.ClassName">
            <summary>
            Name of the class.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ClassDefinition.DXFClassName">
            <summary>
            Name of class as it would appear in a DXFÂ® file.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.ExtendedDataItemList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.ExtendedDataItem"/> objects accessible by index.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.IObjectList`1">
            <summary>
            General purpose collection to hold unnamed objects.
            </summary>
            <typeparam name="T">
            An Ivan object type.
            </typeparam>
        </member>
        <member name="P:ComponentIngenuity.Ivan.IObjectList`1.Item(System.Int32)">
            <summary>
            Returns the object at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the object at the specified index.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.IObjectList`1.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.ExtendedDataItemList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ExtendedDataItemList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ExtendedDataItemList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.ExtendedDataItem"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.ExtendedDataItem"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.MLineStyleList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.MLineStyle"/> objects accessible by index, name 
            or unique id.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.IPooledList`1">
            <summary>
            General purpose collection of pooled drawing objects.
            </summary>
            <typeparam name="T">
            An Ivan object type.
            </typeparam>
        </member>
        <member name="M:ComponentIngenuity.Ivan.IPooledList`1.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an item from the list corresponding to the specified UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the object with the specified UniqueId.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.INamedList`2">
            <summary>
            General purpose collection to hold objects that have a Name property.
            </summary>
            <typeparam name="T">
            An Ivan object type.
            </typeparam>
            <typeparam name="TList">
            An Ivan object typed list.
            </typeparam>
        </member>
        <member name="M:ComponentIngenuity.Ivan.INamedList`2.GetItemsByName(System.String)">
            <summary>
            Returns all objects in the list that have the specified name.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns a list of the items that match the name.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.INamedList`2.Item(System.String)">
            <summary>
            Returns the object with the specified name in the list.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns the object with the specified name.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.MLineStyleList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.MLineStyleList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.MLineStyle"/> from the list corresponding to the specified 
            UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.MLineStyle"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The MLineStyle is not in the List.</exception>
        </member>
        <member name="M:ComponentIngenuity.Ivan.MLineStyleList.GetItemsByName(System.String)">
            <summary>
            Returns all the <see cref="T:ComponentIngenuity.Ivan.MLineStyle"/> objects in the list that have the 
            specified name.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns a <see cref="T:ComponentIngenuity.Ivan.MLineStyleList"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyleList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyleList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.MLineStyle"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.MLineStyle"/> object at the specified index.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyleList.Item(System.String)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.MLineStyle"/> with the specified name in the list.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.MLineStyle"/> object with the specified name.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The MLineStyle is not in the List.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.DuplicateKeysFound">More than one MLineStyle matched the Name.  Use GetItemsByName(name).</exception>
        </member>
        <member name="T:ComponentIngenuity.Ivan.MLineParmSetList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.MLineParmSet"/> objects accessible by index.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.MLineParmSetList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineParmSetList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineParmSetList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.MLineParmSet"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.MLineParmSet"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Line">
            <summary>
            A line entity.
            </summary>
            <remarks>
            The line is drawn from the <see cref="P:ComponentIngenuity.Ivan.Line.StartPoint"/> to the 
            <see cref="P:ComponentIngenuity.Ivan.Line.EndPoint"/>.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.DrawingEntity">
            <summary>
            The base class for all entities in the Ivan object model that can be drawn.
            </summary>
            <remarks>
            All objects that can be drawn and thus have visual attributes associated
            with them are derived from this class.  Things like Lines, Arcs, etc.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.DrawingObject">
            <summary>
            The base class for all objects in the Ivan object model that originate in
            the drawing file.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingObject.ObjectType">
            <summary>
            The type of the object.
            </summary>
            <value>
            An <see cref="P:ComponentIngenuity.Ivan.DrawingObject.ObjectType"/> enum.
            </value>
            <remarks>
            The ObjectType classifies the object as belonging to a particular type
            of object.  A line, an arc or an ellipse, for example.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingObject.IsEntity">
            <summary>
            Specifies if the object is a <see cref="T:ComponentIngenuity.Ivan.DrawingEntity"/>.
            </summary>
            <value>
            A bool.
            </value>
            <remarks>
            If the object is a drawable entity object then this property is true.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingObject.UniqueId">
            <summary>
            The unique identifier for the object.
            </summary>
            <value>
            A ulong.
            </value>
            <remarks>
            All objects and entities in the drawing file have a handle to identify 
            them. This value is unique to each object and acts as a "primary key".
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingObject.HasXData">
            <summary>
            Specifies if any extended data exists for the object.
            </summary>
            <value>
            A bool, <b>true</b> if the has extended data, <b>false</b> if it does
            not.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingObject.ExtendedData">
            <summary>
            The extended data for the object.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.RegAppExtendedDataList"/>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingObject.HasExtensionDictionary">
            <summary>
            Specifies if the object has an extension dictionary attached to it.
            </summary>
            <value>
            A bool value, <b>true</b> if the object has a dictionary, <b>false</b> if it does
            not.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingObject.Drawing">
            <summary>
            A reference to the current <see cref="P:ComponentIngenuity.Ivan.DrawingObject.Drawing"/> object.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.DrawingObject.Drawing"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingObject.ExtensionDictionary">
            <summary>
            The Extension Dictionary attached to the object.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Dictionary"/> object.
            </value>
            <remarks>
            Any object can have a dictionary attached to it. Sometimes third party
            applications that interface with DWGÂ® files utilize dictionaries as a
            form of meta data to use at their discretion.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingEntity.Color">
            <summary>
            Color of the entity.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.DrawingEntity.Color"/> object that specifies the color attributes.
            </value>
            <remarks>
            Colors can originate from an AutoCADÂ® Color Index (ACI), a True Color
            or a Color Book.  The TrueColor property exposes a <see cref="P:ComponentIngenuity.Ivan.DrawingEntity.Color"/>
            object that can be used to get the ACI value or the RGB values.  In
            addition, if the color originates from a Color Book, it will provide
            the name of the Color Book as well as the particular entry selected
            from that book.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingEntity.Layer">
            <summary>
            The layer that the entity is on.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.DrawingEntity.Layer"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingEntity.Linetype">
            <summary>
            The name of the linetype used to draw the entity.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.DrawingEntity.Linetype"/> object.
            </value>
            <remarks>
            This property will be ByLayer, ByBlock, CONTINUOUS, or the name of one of
            the LinetypeList in the <see cref="P:ComponentIngenuity.Ivan.Drawing.Linetypes"/> collection.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingEntity.Lineweight">
            <summary>
            The lineweight of the entity.
            </summary>
            <value>
            A Lineweight enum object.
            </value>
            <remarks>
            The Lineweight property is used to specify the actual weight of the lines
            used to draw the entity.  Often, whether or not the actual weight is shown
            when the entity is rendered is a matter of choice.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingEntity.PlotStyle">
            <summary>
            The plot style for the entity.
            </summary>
            <remarks>
            The plot styles are kept in a dictionary called "ACAD_PLOTSTYLENAME" which
            is a member of the <see cref="P:ComponentIngenuity.Ivan.Drawing.NamedObjects"/> dictionary. 
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingEntity.Hyperlink">
            <summary>
            Hyperlink associated with the entity.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.DrawingEntity.Hyperlink"/> objects.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingEntity.HasHyperlink">
            <summary>
            Specifies if the entity has any hyperlinks associated with it.
            </summary>
            <value>
            A boolean value, <b>true</b> if the object has hyperlinks, <b>false</b> if it does not.
            </value>
            <remarks>
            If this property is true the <see cref="P:ComponentIngenuity.Ivan.DrawingEntity.Hyperlink"/> property will
            hold the hyperlink information.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingEntity.LinetypeScale">
            <summary>
            The lineype scale factor for the entity.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            Linetypes can consist of dashes and dots.  This setting effects
            the relative lengths of the dashes with respect to the drawing
            units.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingEntity.HasImage">
            <summary>
            Specifies if the entity has an image attached to it.
            </summary>
            <value>
            A boolean value, <b>true</b> if the object has image data, <b>false</b> 
            if it does not.
            </value>
            <remarks>
            If this property is true then the <see cref="P:ComponentIngenuity.Ivan.DrawingEntity.Image"/> property will have
            the bytes of image data.  This data is usually for custom proxy entities
            that use a substitute image to represent them.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingEntity.Image">
            <summary>
            The image data for the entity.
            </summary>
            <value>
            A byte array to hold the image data.
            </value>
            <remarks>
            This data represents the image representation for a custom entity proxy and
            is in a format that is not outlined here.  You will need to check other 
            sources of documentation to understand how to use this data.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingEntity.IsVisible">
            <summary>
            Specifies if the entity is visible or hidden.
            </summary>
            <value>
            A boolean value, <b>true</b> if the entity is visible, <b>false</b> if it is hidden.
            </value>
            <remarks>
            Even if the entity is hidden it is still present in the document and
            can be referenced.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Line.Angle">
            <summary>
            The angle of the line.
            </summary>
            <value>
            A double represting the angle of the line.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Line.Delta">
            <summary>
            The delta vector of the line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing the difference between the
            <see cref="P:ComponentIngenuity.Ivan.Line.StartPoint"/> and the <see cref="P:ComponentIngenuity.Ivan.Line.EndPoint"/>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Line.EndPoint">
            <summary>
            The end point of the line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing the coordinate of the end point.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Line.Length">
            <summary>
            The length of the line segment.
            </summary>
            <value>
            A double representing the length of the line segment.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Line.Normal">
            <summary>
            Unit normal vector to the plane the line is on.
            </summary>
            <value>
            A Point3d whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the line's plane.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Line.StartPoint">
            <summary>
            The start point of the line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing the coordinate of the start point.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Line.Thickness">
            <summary>
            The thickness of the line.
            </summary>
            <value>
            A double. 
            </value>
            <remarks>
            The thickness it the extrusion of the line in the z direction.  This
            direction is defined by the <see cref="P:ComponentIngenuity.Ivan.Line.Normal"/> property.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.JoggedDimension">
            <summary>
            A jogged dimension.
            </summary>
            <remarks>
            A radial dimension that allows for specifying a more convenient location 
            for the center of an arc or cirlce.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Dimension">
            <summary>
            Base class for all dimension entities.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dimension.DimStyle">
            <summary>
            The DimStyle object.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Dimension.DimStyle"/> object.
            </value>
            <remarks>
            This is the <see cref="P:ComponentIngenuity.Ivan.Dimension.DimStyle"/> object that defines the appearance
            for the dimension.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dimension.AnonymousBlock">
            <summary>
            The anonymous block that symbolizes the dimension.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Block"/> object.
            </value>
            <remarks>
            When a dimension is placed in the drawing AutoCADÂ® automatically, behind
            the scenes, creates a block to represent it. These "anonymous" blocks
            are named as *D followed by a numeral. For example, *D1, *D2, etc. These
            blocks are identified as such by their <see cref="P:ComponentIngenuity.Ivan.Block.IsAnonymous"/>
            property being set to true.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dimension.Normal">
            <summary>
            Unit normal vector to the surface formed by the dimension.
            </summary>
            <value>
            A Point3d whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the dimension.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dimension.TextMidpoint">
            <summary>
            The middle point of the dimension text.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/>.
            </value>
            <remarks>
            This is the horizontal midpoint of the dimension text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dimension.Elevation">
            <summary>
            The elevation of the dimension.
            </summary>
            <value>
            A double representing the elevation.
            </value>
            <remarks>
            The elevation is the z coordinate for the plane of the object.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dimension.TextOverride">
            <summary>
            Specifies user defined text to override the dimension text.
            </summary>
            <value>
            A string containing the text.
            </value>
            <remarks>
            This text will replace the default text that displays the measurement.
            A "&lt;&gt;" sequence is used as a placeholder for the primary units.  A "[]"
            sequence is used as a placeholder for the alternate units.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dimension.TextRotation">
            <summary>
            The rotation of the dimension text.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dimension.HorizontalDirection">
            <summary>
            The horizontal direction of the dimension.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            This property is the negative of the angle between the x axis of the object
            coordinate system (OCS) and the user-defined coordinate system (UCS).
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dimension.BlockXScaleFactor">
            <summary>
            The block x scale factor.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            This is the x scale factor for the anonymous block.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dimension.BlockYScaleFactor">
            <summary>
            The block y scale factor.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            This is the y scale factor for the anonymous block.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dimension.BlockZScaleFactor">
            <summary>
            The block z scale factor.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            This is the z scale factor for the anonymous block.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dimension.BlockRotation">
            <summary>
            The block rotation.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            This is the rotation about the insertion point of the anonymous block.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dimension.AttachmentPoint">
            <summary>
            Specifies the attachment point of the text.
            </summary>
            <value>
            An <see cref="P:ComponentIngenuity.Ivan.Dimension.AttachmentPoint"/> enum.
            </value>
            <remarks>
            This property determines where the insertion point coincides with the
            bounding area of the text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dimension.LineSpacingStyle">
            <summary>
            Specifies the line spacing style for the mtext.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Dimension.LineSpacingStyle"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dimension.LineSpacingFactor">
            <summary>
            Specifies the line spacing for the text.
            </summary>
            <value>
            A double representing the distance.
            </value>
            <remarks>
            The spacing factor is the distance from the baseline of one line of text
            to the next line.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dimension.Measurement">
            <summary>
            The measurement of the dimension.
            </summary>
            <value>
            A double representing the magnitude of the dimension.  For linear dimensions
            this is a length.  For angular dimesions this is an angle.
            </value>
            <remarks>
            This is the actual size of the object being measured.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dimension.BlockInsertionPoint">
            <summary>
            The block position.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/>.
            </value>
            <remarks>
            This is the insertion point for the anonymous block representing the
            dimension.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dimension.HasOverrides">
            <summary>
            Indicates if the dimension has dimstyle property overrides.
            </summary>
            <value>
            A bool.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dimension.Overrides">
            <summary>
            A list of the dimension's dimstyle overrides.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.DimStyleOverrideList"/>.
            </value>
            <remarks>
            If <see cref="P:ComponentIngenuity.Ivan.Dimension.HasOverrides"/> is true, then this list will contain the overrides.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.JoggedDimension.CenterPoint">
            <summary>
            Specifies center of the circle or arc of the dimension.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.JoggedDimension.CurvePoint">
            <summary>
            Specifies point on the circle or arc of the dimension.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
            <remarks>
            This is the first point of the dimension line and lies on the circle or
            arc.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.JoggedDimension.CenterLocationOverride">
            <summary>
            Specifies an alternate location to specify for the center.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
            <remarks>
            When the center of an arc or circle is located off the layout and cannot
            be displayed in its true location the origin point of the dimension can be 
            specified at a more convenient location called the center location override.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.JoggedDimension.JogLocation">
            <summary>
            Specifies the jog location.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
            <remarks>
            Specifies the midpoint of the jog line.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Linetype">
            <summary>
            A linetype object.
            </summary>
            <remarks>
            Linetypes influence how the lines of entities are drawn.  The linetype object is an
            encapsulation of a line style definition.  It consists of a name,
            description and pattern data that controls how the line is rendered.  The
            pattern data consists of dots, dashes and spaces, and in some cases, geometric
            shapes and text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Linetype.Name">
            <summary>
            The name of the linetype.
            </summary>
            <value>
            A string representing the name.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Linetype.Description">
            <summary>
            Specifies the description of the linetype.
            </summary>
            <value>
            A string containing the description.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Linetype.PatternLength">
            <summary>
            Specifies the pattern length of the linetype.
            </summary>
            <value>
            A double containing the length.
            </value>
            <remarks>
            This value is the sum of all the individual pattern element lengths. A
            value of zero for this property indicates a solid line.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Linetype.Pattern">
            <summary>
            Specifies the pattern for the linetype.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.LinetypePatternElementList"/> object.
            </value>
            <remarks>
            This is a collection of <see cref="T:ComponentIngenuity.Ivan.LinetypePatternElement"/> objects that
            describe how the line is to be drawn.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Linetype.IsByLayer">
            <summary>
            Specifies whether the linetype is the built-in ByLayer linetype.
            </summary>
            <value>
            A bool.
            </value>
            <remarks>
            Every AutoCADÂ® drawing has three default, built-in linetypes named ByLayer,
            ByBlock and Continuous.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Linetype.IsByBlock">
            <summary>
            Specifies whether the linetype is the built-in ByBlock linetype.
            </summary>
            <value>
            A bool.
            </value>
            <remarks>
            Every AutoCADÂ® drawing has three default, built-in linetypes named ByLayer,
            ByBlock and Continuous.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Linetype.IsContinuous">
            <summary>
            Specifies whether the linetype is the built-in Continuous linetype.
            </summary>
            <value>
            A bool.
            </value>
            <remarks>
            Every AutoCADÂ® drawing has three default, built-in linetypes named ByLayer,
            ByBlock and Continuous.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.UCSList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.UCS"/> objects accessible by index, name or 
            unique id.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.UCSList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.UCSList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.UCS"/> from the list corresponding to the specified 
            UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.UCS"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The UCS is not in the List.</exception>
        </member>
        <member name="M:ComponentIngenuity.Ivan.UCSList.GetItemsByName(System.String)">
            <summary>
            Returns all the <see cref="T:ComponentIngenuity.Ivan.UCS"/> objects in the list that have the 
            specified name.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns a <see cref="T:ComponentIngenuity.Ivan.UCSList"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.UCSList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.UCSList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.UCS"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.UCS"/> object at the specified index.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.UCSList.Item(System.String)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.UCS"/> with the specified name in the list.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.UCS"/> object with the specified name.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The UCS is not in the List.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.DuplicateKeysFound">More than one UCS matched the Name.  Use GetItemsByName(name).</exception>
        </member>
        <member name="T:ComponentIngenuity.Ivan.StringList">
            <summary>
            A collection of strings accessible by index.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.StringList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.StringList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.StringList.Item(System.Int32)">
            <summary>
            Returns the string at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the string at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.LayoutList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.Layout"/> objects accessible by index, name or 
            unique id.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.LayoutList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.LayoutList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.Layout"/> from the list corresponding to the specified 
            UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Layout"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The Layout is not in the List.</exception>
        </member>
        <member name="M:ComponentIngenuity.Ivan.LayoutList.GetItemsByName(System.String)">
            <summary>
            Returns all the <see cref="T:ComponentIngenuity.Ivan.Layout"/> objects in the list that have the 
            specified name.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns a <see cref="T:ComponentIngenuity.Ivan.LayoutList"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LayoutList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LayoutList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Layout"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Layout"/> object at the specified index.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LayoutList.Item(System.String)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Layout"/> with the specified name in the list.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Layout"/> object with the specified name.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The Layout is not in the List.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.DuplicateKeysFound">More than one Layout matched the Name.  Use GetItemsByName(name).</exception>
        </member>
        <member name="T:ComponentIngenuity.Ivan.PolyfaceMeshVertexList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.PolyfaceMeshVertex"/> objects accessible by 
            index or unique id.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.PolyfaceMeshVertexList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.PolyfaceMeshVertexList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.PolyfaceMeshVertex"/> from the list corresponding to the 
            specified UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.PolyfaceMeshVertex"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The PolyfaceMeshVertex is not in the List.</exception>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PolyfaceMeshVertexList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PolyfaceMeshVertexList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.PolyfaceMeshVertex"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.PolyfaceMeshVertex"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.DrawingEntityList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.DrawingEntity"/> objects accessible by index.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.DrawingEntityList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.DrawingEntityList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.DrawingEntity"/> from the list corresponding to the specified 
            UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.DrawingEntity"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The DrawingEntity is not in the List.</exception>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingEntityList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DrawingEntityList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.DrawingEntity"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.DrawingEntity"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.DimStyleOverrideList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.DimStyleOverride"/> objects accessible by index 
            or name.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.DimStyleOverrideList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.DimStyleOverrideList.GetItemsByName(System.String)">
            <summary>
            Returns all the <see cref="T:ComponentIngenuity.Ivan.DimStyleOverride"/> objects in the list that have the 
            specified name.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns a <see cref="T:ComponentIngenuity.Ivan.DimStyleOverrideList"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyleOverrideList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyleOverrideList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.DimStyleOverride"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.DimStyleOverride"/> object at the specified index.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyleOverrideList.Item(System.String)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.DimStyleOverride"/> with the specified name in the list.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.DimStyleOverride"/> object with the specified name.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The DimStyleOverride is not in the List.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.DuplicateKeysFound">More than one DimStyleOverride matched the Name.  Use GetItemsByName(name).</exception>
        </member>
        <member name="T:ComponentIngenuity.Ivan.AttributeList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.Attribute"/> objects accessible by index or 
            unique id, with read-only access.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.AttributeList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.AttributeList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.Attribute"/> from the list corresponding to the specified 
            UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Attribute"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The Attribute is not in the List.</exception>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Attribute"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Attribute"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.ProxyObject">
            <summary>
            Represents a proxy object.
            </summary>
            <remarks>
            Third party applications that interface with AutoCADÂ® must register themselves
            with AutoCADÂ®.  This class represents a registered application.  All registered
            applications are maintained by the <see cref="P:ComponentIngenuity.Ivan.Drawing.RegisteredApps"/> property.
            <br/>
            These applications can create objects inside of a drawing.  When the application
            is no longer available on the machine where AutoCADÂ® is installed, proxy objects
            are created to represent the third party custom objects.
            </remarks>
        </member>
        <member name="M:ComponentIngenuity.Ivan.ProxyObject.SetFromPool(System.Byte[],ComponentIngenuity.Ivan.FileVersion)">
            <summary>
            Resets the parsing pointer to the beginning of the DataBits.
            </summary>
            <returns>
            None.
            </returns>
            <remarks>
            The DataBits stream pointer remains in the position following the last
            Get function call made.  Therefore, before each subsequent sequence of
            Get function calls, this method should be called to position the pointer
            to the beginning of the DataBits data stream.  Otherwise, the pointer
            will move past the legitimate data.
            </remarks>
            <exception cref="!:DataBitsIsNull">The <b>DataBits</b> array is null.</exception>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ProxyObject.ClassNumber">
            <summary>
            The id of the custom class of which this ProxyObject is typed.
            </summary>
            <value>
            An int.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ProxyObject.AppName">
            <summary>
            The name of the registered application that hosts this class.
            </summary>
            <value>
            A string.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ProxyObject.ClassName">
            <summary>
            The name of the registered class of which this ProxyObject is typed.
            </summary>
            <value>
            A string.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.PsViewport">
            <summary>
            A paperspace viewport entity.
            </summary>
            <remarks>
            PsViewports are defined areas in paper space that act as virtual screens
            allowing for their own individual view of model space.  
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.HasAssociatedUCS">
            <summary>
            Specifies if the pviewport has an associated UCS.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - has a UCS
            <br/>
            <b>false</b> - does not have a UCS
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.Center">
            <summary>
            Specifies the center of the viewport.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object in paper space coordinates.
            </value>
            <remarks>
            This is the starting point for the view line of sight.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.Width">
            <summary>
            Specifies the width of the viewport.
            </summary>
            <value>
            A double representing the width in paper space drawing units.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.Height">
            <summary>
            Specifies the height of the viewport.
            </summary>
            <value>
            A double representing the height in paper space drawing units.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.ViewTarget">
            <summary>
            Specifies the target point for the viewport.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object representing the point.
            </value>
            <remarks>
            This is the ending point for the view line of sight.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.ViewDirection">
            <summary>
            Specifies the direction of the line of sight.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object representing the vector.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.ViewTwistAngle">
            <summary>
            Specifies the angle the view is twisted around the line of sight.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.ViewHeight">
            <summary>
            Specifies how many model space units span the height of the viewport.
            </summary>
            <value>
            A double representing the distance.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.ViewLensLength">
            <summary>
            Specifies the lens length for the view in the viewport.
            </summary>
            <value>
            A double representing the length.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.ViewFrontClip">
            <summary>
            Specifies the view front clipping plane z value.
            </summary>
            <value>
            A double representing the coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.ViewBackClip">
            <summary>
            Specifies the view back clipping plane z value.
            </summary>
            <value>
            A double representing the coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.SnapAngle">
            <summary>
            Specifies the snap angle of the viewport.
            </summary>
            <value>
            A double representing the angle.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.ViewCenter">
            <summary>
            Specifies the center of the view.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object representing the center in model units.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.SnapBasePoint">
            <summary>
            Specifies the snap base point of the viewport.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.SnapSpacing">
            <summary>
            Specifies the snap spacing of the viewport.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.GridSpacing">
            <summary>
            Specifies the grid spacing of the viewport.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.ArcSmoothness">
            <summary>
            Specifies the smoothness of arc and circles in the viewport.
            </summary>
            <value>
            An int representing the smoothness factor.  The higher, the smoother.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.StyleSheet">
            <summary>
            Specifies the style sheet for the viewport.
            </summary>
            <value>
            A string containing the name.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.RenderMode">
            <summary>
            Specifies the render mode of the viewport.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.PsViewport.RenderMode"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.IsUCSIconAtOrigin">
            <summary>
            Specifies if the UCS icon is displayed at the origin.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the icon is displayed at the origin
            <br/>
            <b>false</b> - the icon is not displayed at the origin
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.IsUCSPerViewport">
            <summary>
            Specifies if the UCS is saved with the viewport.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the UCS is saved with the viewport
            <br/>
            <b>false</b> - the UCS is not saved with the viewport
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.UCSOrigin">
            <summary>
            Specifies if the origin of the UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.UCSXAxisVector">
            <summary>
            Specifies if the x direction of the UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object containing the vector.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.UCSYAxisVector">
            <summary>
            Specifies if the y direction of the UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object containing the vector.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.UCSElevation">
            <summary>
            Specifies if the elevation of the UCS.
            </summary>
            <value>
            A double representing the elevation.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.OrthographicViewType">
            <summary>
            Specifies if the orthographic view type of the UCS.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.PsViewport.OrthographicViewType"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.IsOrthographic">
            <summary>
            Specifies if the UCS is orthographic.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the UCS is orthographic
            <br/>
            <b>false</b> - the UCS is not orthographic
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.BaseUCSType">
            <summary>
            Specifies the type of the base UCS of the UCS.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.PsViewport.BaseUCSType"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.BaseUCS">
            <summary>
            Specifies the base UCS of the UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.UCS"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.UCSType">
            <summary>
            Specifies the type of the UCS.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.PsViewport.UCSType"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.NamedUCS">
            <summary>
            Specifies the named UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.UCS"/> enum.
            </value>
            <remarks>
            The <see cref="P:ComponentIngenuity.Ivan.PsViewport.UCSType"/> property must be <b>Named</b> for this property
            to be meaningful, else it is <b>null</b>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.IsClipped">
            <summary>
            Specifies if the viewport has been clipped.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the viewport has been clipped
            <br/>
            <b>false</b> - the viewport has not been clipped
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.ClipBoundry">
            <summary>
            Specifies the clip boundry for the viewport.
            </summary>
            <value>
            An <see cref="T:ComponentIngenuity.Ivan.DrawingEntity"/> object.
            </value>
            <remarks>
            The <see cref="P:ComponentIngenuity.Ivan.PsViewport.IsClipped"/> property must be <b>true</b> for this property
            to return an object.  The return value can be a <see cref="T:ComponentIngenuity.Ivan.Polyline2d"/>,
            <see cref="T:ComponentIngenuity.Ivan.LightweightPolyline"/>, <see cref="T:ComponentIngenuity.Ivan.Arc"/>, <see cref="T:ComponentIngenuity.Ivan.Circle"/>,
            <see cref="T:ComponentIngenuity.Ivan.Ellipse"/>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.CustomScale">
            <summary>
            Specifies the custom scale factor for the viewport.
            </summary>
            <value>
            A double representing the scale factor.
            </value>
            <remarks>
            This is the <see cref="P:ComponentIngenuity.Ivan.PsViewport.Height"/> divided by the <see cref="P:ComponentIngenuity.Ivan.PsViewport.ViewHeight"/>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.IsViewportOn">
            <summary>
            Specifies if the viewport is displayed.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the viewport is displayed
            <br/>
            <b>false</b> - the viewport is not displayed
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.StatusFlags">
            <summary>
            Specifies the status flags of the viewport.
            </summary>
            <value>
            An int containg the bit flags.
            </value>
            <remarks>
            Consult the AutoCADÂ® DXFÂ® documentation for an explanation of how
            these values are applied.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.FrozenLayers">
            <summary>
            Specifies the layers that are frozen for the viewport.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.LayerList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.IsUCSIconOn">
            <summary>
            Specifies if the UCS icon is displayed.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the icon is displayed
            <br/>
            <b>false</b> - the icon is not displayed
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.ShadePlotMode">
            <summary>
            Specifies the shadeplot mode of the viewport.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.PsViewport.ShadePlotMode"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PsViewport.MajorGridFrequency">
            <summary>
            Specifies the frequency of major grid lines compared to minor grid lines.
            </summary>
            <value>
            An int.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.HatchLineSegment">
            <summary>
            A line hatch path segment.
            </summary>
            <remarks>
            This segment of the path is part of a line.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.HatchPathSegment">
            <summary>
            A hatch path segment object.
            </summary>
            <remarks>
            Closed paths form the boundries in which hatch patterns are
            drawn.  Paths, themselves, are composed of segments.  This is the base
            class for all hatch path segments types.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchPathSegment.SegmentType">
            <summary>
            The type of the HatchPathSegment.
            </summary>
            <value>
            An <see cref="P:ComponentIngenuity.Ivan.HatchPathSegment.SegmentType"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchLineSegment.StartPoint">
            <summary>
            The start point of the line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing the coordinate of the start point.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchLineSegment.EndPoint">
            <summary>
            The end point of the line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing the coordinate of the end point.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.BlockReference">
            <summary>
            An instance of an inserted Block.
            </summary>
            <remarks>
            A <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/> is the definition of a reusable symbol.  When
            an instance of the block is placed in the drawing, a BlockReference entity
            is created.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.BlockReference.Block">
            <summary>
            The block that is being referenced.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/> object.
            </value>
            <remarks>
            Every BlockReference refers to a <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/> object.  There can
            be many BlockReferences for a single <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.BlockReference.Name">
            <summary>
            The name of the <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/> being referenced.
            </summary>
            <value>
            A string.
            </value>
            <remarks>
            This is the same as the name of the <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/> that is being
            referenced.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.BlockReference.HasAttributes">
            <summary>
            Specifies if the referenced block has attributes.
            </summary>
            <value>
            A boolean value, <b>true</b> if the block has attributes, <b>false</b> if it does not.
            </value>
            <remarks>
            If this property is true then the <see cref="P:ComponentIngenuity.Ivan.BlockReference.Attributes"/> property
            will contain the references.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.BlockReference.Attributes">
            <summary>
            Collection of <see cref="T:ComponentIngenuity.Ivan.Attribute"/> entities.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.AttributeList"/> object.
            </value>
            <remarks>
            When a block containing attributes is inserted an Attribute is
            created for each <see cref="T:ComponentIngenuity.Ivan.AttributeDefinition"/> belonging to the block.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.BlockReference.Rotation">
            <summary>
            The rotation of the inserted <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/>.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            The angle is relative to the x axis with counter-clockwise representing
            the positive direction.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.BlockReference.XScaleFactor">
            <summary>
            The scale factor for the <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/> in the x direction.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            A value greater than 1.0 will stretch the <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/> in the x
            direction.  A value less than 1.0 will shrink the <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/> in
            the x direction.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.BlockReference.YScaleFactor">
            <summary>
            The scale factor for the <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/> in the y direction.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            A value greater than 1.0 will stretch the <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/> in the y
            direction.  A value less than 1.0 will shrink the <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/> in
            the y direction.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.BlockReference.ZScaleFactor">
            <summary>
            The scale factor for the <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/> in the z direction.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            A value greater than 1.0 will stretch the <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/> in the z
            direction.  A value less than 1.0 will shrink the <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/> in
            the z direction.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.BlockReference.InsertionPoint">
            <summary>
            The insertion point for the <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/>.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
            <remarks>
            This is the point at which the <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/> is inserted into the drawing and
            it coincides with the origin of the <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.BlockReference.Normal">
            <summary>
            Unit normal vector to the surface of the inserted <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/>.
            </summary>
            <value>
            A Point3d whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the inserted <see cref="P:ComponentIngenuity.Ivan.BlockReference.Block"/>.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Point2d">
            <summary>
            A 2D point object.
            </summary>
            <remarks>
            This is a support class to provide for the housing of a two dimensional
            point.
            </remarks>
        </member>
        <member name="M:ComponentIngenuity.Ivan.Point2d.#ctor(System.Double,System.Double)">
            <param name="X">
            Specifies the x coordinate of the point.
            </param>
            <param name="Y">
            Specifies the y coordinate of the point.
            </param>
        </member>
        <member name="M:ComponentIngenuity.Ivan.Point2d.ToString">
            <summary>
            Returns a textual representation of the coordinate.
            </summary>
            <returns>
            A string like (X = 1.51, Y = 3.43).
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Point2d.X">
            <summary>
            Specifies the x coordinate of the point.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Point2d.Y">
            <summary>
            Specifies the y coordinate of the point.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.SystemVariables">
            <summary>
            An object for holding system variables.
            </summary>
            <remarks>
            This class houses the set of variables that define the AutoCADÂ® operating
            configuration.  Many of the system's default values are kept here.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.HANDSEED">
            <summary>
            Specifies the next available handle.
            </summary>
            <value>
            An ulong.
            </value>
            <remarks>
            The handle value is stored in the DXF file as a string representation of
            the handle value in hexadecimal.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.FINGERPRINTGUID">
            <summary>
            Specifies a unique identifier for the drawing.
            </summary>
            <value>
            An string.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.MEASUREMENT">
            <summary>
            Specifies the drawing units for the drawing.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            <b>0</b> - English
            <br/>
            <b>1</b> - Metric
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.ANGBASE">
            <summary>
            The direction of the base angle.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            The base(zero) angle is relative to the orientation of the current user
            coordinate system.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.ANGDIR">
            <summary>
            Controls positive direction of angles.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - counter-clockwise is positive
            <br/>
            1 - clockwise is positive
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.ATTMODE">
            <summary>
            Controls attribute display mode.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - off
            <br/>
            1 - normal
            <br/>
            2 - on
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.AUNITS">
            <summary>
            Controls angular units.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - decimal degrees
            <br/>
            1 - degrees-minutes-seconds
            <br/>
            2 - gradians
            <br/>
            3 - radians
            <br/>
            4 - surveyor's units
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.AUPREC">
            <summary>
            Controls the precision of angular units.
            </summary>
            <value>
            An int representing the number of decimal places to display.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.CECOLOR">
            <summary>
            Controls the color assigned to new objects.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - ByBlock
            <br/>
            256 - ByLayer
            <br/>
            1 to 255 - an AutoCADÂ® Color Index (ACI) value
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.CELTSCALE">
            <summary>
            Controls lineypte scale for individual objects.
            </summary>
            <value>
            A double representing the scale factor.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.CELTYPE">
            <summary>
            Controls the default linetype assigned to new objects.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Linetype"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.CELWEIGHT">
            <summary>
            Controls the default line weight assigned to new objects.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Lineweight"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.CHAMFERA">
            <summary>
            Controls the first chamfer distance.
            </summary>
            <value>
            A double representing the distance.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.CHAMFERB">
            <summary>
            Controls the second chamfer distance.
            </summary>
            <value>
            A double representing the distance.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.CHAMFERC">
            <summary>
            Controls the chamfer distance for angle option.
            </summary>
            <value>
            A double representing the distance.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.CHAMFERD">
            <summary>
            Controls the chamfer angle for angle option.
            </summary>
            <value>
            A double representing the angle.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.CLAYER">
            <summary>
            Specifies the current layer.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Layer"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.CMLJUST">
            <summary>
            Specifies the method of justification for multi-lines.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - top
            <br/>
            1 - middle
            <br/>
            2 - bottom
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.CMLSCALE">
            <summary>
            Specifies the scale factor for multi-line widths.
            </summary>
            <value>
            A double representing the scale factor.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMADEC">
            <summary>
            Specifies precision for angular dimension text.
            </summary>
            <value>
            An int specifying the number of decimal places.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMALT">
            <summary>
            Specifies if alternate units are enabled.
            </summary>
            <value>
            An int value with 0 for <b>off</b>, 1 for <b>on</b>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMALTD">
            <summary>
            Specifies the number of decimal places for alternate dimensions and tolerances.
            </summary>
            <value>
            An int specifying the number of decimal places.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMALTF">
            <summary>
            Specifies the scale factor for alternate dimensions.
            </summary>
            <value>
            A double.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMALTRND">
            <summary>
            Specifies the rounding of alternate units.
            </summary>
            <value>
            A double representing the value to round to.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMALTTD">
            <summary>
            Specifies tolerance precision for the dimension alternate units.
            </summary>
            <value>
            An int specifying the number of decimal places.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMALTTZ">
            <summary>
            Specifies the suppression of zeroes in the display of tolerance alternate units.
            </summary>
            <value>
            An int mask with the bit values defined below:
            <br/>
            <br/>
            0 - suppress zero feet and suppress zero inches
            <br/>
            1 - include zero feet and include zero inches
            <br/>
            2 - include zero feet and suppress zero inches
            <br/>
            3 - suppress zero feet and include zero inches
            <br/>
            4 - suppress leading zeroes
            <br/>
            8 - suppress trailing zeroes
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMALTU">
            <summary>
            Specifies the units format for all dimensions except angular.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            1 - scientific
            <br/>
            2 - decimal
            <br/>
            3 - engineering
            <br/>
            4 - architectural (stacked)
            <br/>
            5 - fractional (stacked)
            <br/>
            6 - architectural
            <br/>
            7 - fractional
            <br/>
            8 - windows desktop
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMALTZ">
            <summary>
            Specifies the suppression of zeroes in the display of tolerance alternate units.
            </summary>
            <value>
            An int mask with the bit values defined below:
            <br/>
            <br/>
            0 - suppress zero feet and suppress zero inches
            <br/>
            1 - include zero feet and include zero inches
            <br/>
            2 - include zero feet and suppress zero inches
            <br/>
            3 - suppress zero feet and include zero inches
            <br/>
            4 - suppress leading zeroes
            <br/>
            8 - suppress trailing zeroes
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMAPOST">
            <summary>
            Specifies the prefix or suffix for the alternate dimension text.
            </summary>
            <value>
            A string value.
            </value>
            <remarks>
            A "&lt;&gt;" sequence is used to serve as a placeholder for the measurement
            text.  The prefix or suffix text is placed before or after the "&lt;&gt;", respectively.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMASO">
            <summary>
            Specifies the associative dimensioning setting.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - off
            <br/>
            1 - on
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMASZ">
            <summary>
            The size of arrowheads.
            </summary>
            <value>
            A double representing the size in drawing units.
            </value>
            <remarks>
            This is the size of the dimension line arrowheads, leader line arrowheads, and
            hook lines.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMAUNIT">
            <summary>
            Specifies the units format for angular dimensions.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - decimal degrees
            <br/>
            1 - degrees-minutes-seconds
            <br/>
            2 - gradians
            <br/>
            3 - radians
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMAZIN">
            <summary>
            Controls zero suppression for angular dimensions.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - display all zeroes
            <br/>
            1 - suppress leading zeroes
            <br/>
            2 - suppress trailing zeroes
            <br/>
            3 - suppress all zeroes
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMBLK">
            <summary>
            The block to use for dimension arrowheads when a single block is specified.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Block"/> object.
            </value>
            <remarks>
            When <see cref="P:ComponentIngenuity.Ivan.SystemVariables.DIMSAH"/> is off DIMBLK is used for both arrowheads.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMBLK1">
            <summary>
            The block to use for the first dimension arrowhead when two blocks
            are specified.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Block"/> object.
            </value>
            <remarks>
            When <see cref="P:ComponentIngenuity.Ivan.SystemVariables.DIMSAH"/> is on DIMBLK1 is used for the first arrowhead.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMBLK2">
            <summary>
            The block to use for the second dimension arrowhead when two blocks
            are specified.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Block"/> object.
            </value>
            <remarks>
            When <see cref="P:ComponentIngenuity.Ivan.SystemVariables.DIMSAH"/> is on DIMBLK2 is used for the second arrowhead.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMCEN">
            <summary>
            Specifies the size of the center mark of the dimension.
            </summary>
            <value>
            A double value where:
            <br/>
            <br/>
            if = 0 - no center lines or marks are drawn
            if &lt; 0 - center lines are drawn
            if &gt; 0 - center marks are drawn
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMCLRD">
            <summary>
            The color of the lines for the dimension, tolerances and leaders.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - ByBlock
            <br/>
            256 - ByLayer
            <br/>
            1 to 255 - an AutoCADÂ® Color Index (ACI) value
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMCLRE">
            <summary>
            The color of the extension lines.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - ByBlock
            <br/>
            256 - ByLayer
            <br/>
            1 to 255 - an AutoCADÂ® Color Index (ACI) value
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMCLRT">
            <summary>
            The color of the text for the dimension and tolerances.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - ByBlock
            <br/>
            256 - ByLayer
            <br/>
            1 to 255 - an AutoCADÂ® Color Index (ACI) value
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMDEC">
            <summary>
            Specifies the number of decimal places for primary dimensions and tolerances.
            </summary>
            <value>
            An int specifying the number of decimal places.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMDLE">
            <summary>
            Specifies the distance the dimension line extends past the extension lines
            when oblique strokes are drawn instead of arrowheads.
            </summary>
            <value>
            A double representing the distance.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMDLI">
            <summary>
            Specifies the dimension line offset for continuation.
            </summary>
            <value>
            A double representing the distance.
            </value>
            <remarks>
            Each dimension line is offset from the previous one by this distance.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMDSEP">
            <summary>
            User-defined separator for decimals when dimension units are set to decimal.
            </summary>
            <value>
            An int representing the character code.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMEXE">
            <summary>
            Specifies the distance the extension line extends beyond the dimension line.
            </summary>
            <value>
            A double representing the distance.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMEXO">
            <summary>
            The extension line offset.
            </summary>
            <value>
            A double representing the offset in drawing units.
            </value>
            <remarks>
            Specifies the distance to offset the extension lines from the origin points
            for the dimension.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMATFIT">
            <summary>
            Specifies how dimension text and arrows are arranged when there is not
            enough space between the extension lines.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - both text and arrows go outside the extension lines
            <br/>
            1 - move arrows outside first, then text
            <br/>
            2 - move text outside first, then arrows
            <br/>
            3 - move text or arrows first, whichever fits best
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMFRAC">
            <summary>
            Specifies the format for fractional values in dimensions and tolerances.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - horizontal
            <br/>
            1 - diagonal
            <br/>
            2 - not stacked
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMGAP">
            <summary>
            The gap between the text and the dimension line.
            </summary>
            <value>
            A double representing the distance in drawing units.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMJUST">
            <summary>
            Specifies the horizontal justification for dimension text.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - centered on dimension line between extension lines
            <br/>
            1 - next to the first extension line
            <br/>
            2 - next to the second extension line
            <br/>
            3 - above and aligned with the first extension line
            <br/>
            4 - above and aligned with the second extension line
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMLDRBLK">
            <summary>
            The block to use for dimension arrowheads on leaders.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Block"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMLFAC">
            <summary>
            Specifies linear scale factor for dimension measurements.
            </summary>
            <value>
            A double representing the scale factor.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMLIM">
            <summary>
            Specifies whether dimension limits are displayed.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - off
            <br/>
            1 - on
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMLUNIT">
            <summary>
            Specifies the units format for all linear dimensions.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            1 - scientific
            <br/>
            2 - decimal
            <br/>
            3 - engineering
            <br/>
            4 - architectural
            <br/>
            5 - fractional
            <br/>
            6 - windows desktop
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMLWD">
            <summary>
            Specifies the line weight of dimension lines.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            -3 - default lineweight
            <br/>
            -2 - ByBlock
            <br/>
            -1 - ByLayer
            <br/>
            or an integer representing 100th millimeter.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMLWE">
            <summary>
            Specifies the line weight of the extension lines.
            </summary>
            <value>
            A double representing the weight.  ByLayer, ByBlock or 1/100 mm increments.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMPOST">
            <summary>
            Specifies the prefix or suffix for the primary dimension text.
            </summary>
            <value>
            A string value.
            </value>
            <remarks>
            A "&lt;&gt;" sequence is used to serve as a placeholder for the measurement
            text.  The prefix or suffix text is placed before or after the "&lt;&gt;", respectively.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMRND">
            <summary>
            Specifies the rounding of primary units.
            </summary>
            <value>
            A double representing the value to round to.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMSAH">
            <summary>
            Specifies if a single block or two different blocks are used to display
            both arrowheads of a dimension.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - <b>off</b>, use <see cref="P:ComponentIngenuity.Ivan.SystemVariables.DIMBLK"/> for both
            <br/>
            1 - <b>on</b>, use <see cref="P:ComponentIngenuity.Ivan.SystemVariables.DIMBLK1"/> and <see cref="P:ComponentIngenuity.Ivan.SystemVariables.DIMBLK2"/>, one for
            each arrowhead.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMSCALE">
            <summary>
            Specifies the scale factor for primary dimensions.
            </summary>
            <value>
            A double.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMSD1">
            <summary>
            Specifies if the first dimension line is suppressed.
            </summary>
            <value>
            An int value with 0 for <b>off</b>, 1 for <b>on</b>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMSD2">
            <summary>
            Specifies if the second dimension line is suppressed.
            </summary>
            <value>
            An int value with 0 for <b>off</b>, 1 for <b>on</b>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMSE1">
            <summary>
            Specifies if the first extension line is suppressed.
            </summary>
            <value>
            An int value with 0 for <b>off</b>, 1 for <b>on</b>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMSE2">
            <summary>
            Specifies if the second extension line is suppressed.
            </summary>
            <value>
            An int value with 0 for <b>off</b>, 1 for <b>on</b>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMSHO">
            <summary>
            Specifies whether dimensions are dynamically updated while dragging.
            </summary>
            <value>
            An int value with 0 for <b>off</b>, 1 for <b>on</b>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMSOXD">
            <summary>
            Specifies if dimension lines are suppressed outside of extension lines.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - <b>off</b>, lines are not suppressed
            <br/>
            1 - <b>on</b>, lines are suppressed
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMTAD">
            <summary>
            Specifies the vertical postion of the dimension text relative to the
            dimension line.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - centers the text between the extension lines
            <br/>
            1 - places the dimension text above the dimension line except when the
            dimension line is not horizontal and text inside the extension lines
            is forced horizontal, when <see cref="P:ComponentIngenuity.Ivan.SystemVariables.DIMTIH"/> = 1. The
            distance from the dimension line to the baseline of the lowest line of
            text is the <see cref="P:ComponentIngenuity.Ivan.SystemVariables.DIMGAP"/> value
            <br/>
            2 - places the text on the side of the dimension line farthest
            away from the defining points
            <br/>
            3 - places the text to conform to Japanese Industrial Standards 
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMTDEC">
            <summary>
            Specifies tolerance precision for the dimension primary units.
            </summary>
            <value>
            An int specifying the number of decimal places.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMTFAC">
            <summary>
            Specifies the tolerance text height relative to the dimension text.
            </summary>
            <value>
            A double representing the scale factor.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMTIH">
            <summary>
            Specifies the position of the dimension text inside the extension lines.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - <b>false</b>, text is aligned with dimension line
            <br/>
            1 - <b>true</b>, text is drawn horizontally
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMTIX">
            <summary>
            Specifies if dimensions text is diplayed inside the extension lines.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - <b>off</b>, for linear and angular dimensions, text is inside the
            extension lines if there is space, for radius and diameter dimensions
            that don't fit inside the circle or arc, DIMTIX has no effect and always
            forces the text to the outside
            <br/>
            1 - <b>on</b>, text is between the extension lines
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMTM">
            <summary>
            Specifies the lower tolerance limit for the dimension text.
            </summary>
            <value>
            A double representing the limit.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMTMOVE">
            <summary>
            Specifies how text is drawn when dimension text is moved.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - moves the dimension line with the text
            <br/>
            1 - adds a leader when the text is moved
            <br/>
            2 - moves text without a leader
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMTOFL">
            <summary>
            Specifies if dimensions lines always displayed inside of extension lines, even
            if the text is placed on the outside.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - <b>off</b>, do not draw dimension lines between extension lines
            <br/>
            1 - <b>on</b>, draw dimension lines between extension lines
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMTOH">
            <summary>
            Specifies the position of the dimension text outside the extension lines.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - <b>false</b>, text is aligned with dimension line
            <br/>
            1 - <b>true</b>, text is drawn horizontally
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMTOL">
            <summary>
            Specifies if tolerances are diplayed with dimension text.
            </summary>
            <value>
            An int with 0 for <b>off</b> 1 for <b>on</b>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMTOLJ">
            <summary>
            Specifies the vertical justification of the tolerance text relative to
            the dimension text.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - bottom
            <br/>
            1 - middle
            <br/>
            2 - top
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMTP">
            <summary>
            Specifies the upper tolerance limit for the dimension text.
            </summary>
            <value>
            A double representing the limit.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMTSZ">
            <summary>
            Specifies the size of oblique strokes when drawn instead of arrowheads.
            </summary>
            <value>
            A double value:
            <br/>
            <br/>
            0 - draw arrowheads
            <br/>
            &gt;0 - draw oblique strokes with size equal to this value times <see cref="P:ComponentIngenuity.Ivan.SystemVariables.DIMSCALE"/>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMTVP">
            <summary>
            Controls text's vertical position based on numeric value.
            </summary>
            <value>
            A double.  The magnitude of the vertical offset of text is the product of
            the text height and DIMTVP.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMTXT">
            <summary>
            The height of the dimension or tolerance text.
            </summary>
            <value>
            A double representing the height in drawing units.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMTXSTY">
            <summary>
            Specifies the text style used for the dimension text and tolerance text.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.TextStyle"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMTZIN">
            <summary>
            Specifies the suppression of zeroes in the display of tolerance primary units.
            </summary>
            <value>
            An int mask with the bit values defined below:
            <br/>
            <br/>
            0 - suppress zero feet and suppress zero inches
            <br/>
            1 - include zero feet and include zero inches
            <br/>
            2 - include zero feet and suppress zero inches
            <br/>
            3 - suppress zero feet and include zero inches
            <br/>
            4 - suppress leading zeroes
            <br/>
            8 - suppress trailing zeroes
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMUPT">
            <summary>
            Controls user positioning of text during dimension input.
            </summary>
            <value>
            An int value with 0 for <b>off</b>, 1 for <b>on</b>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DIMZIN">
            <summary>
            Specifies the suppression of zeroes in the display of primary unit values.
            </summary>
            <value>
            An int mask with the bit values defined below:
            <br/>
            <br/>
            0 - suppress zero feet and suppress zero inches
            <br/>
            1 - include zero feet and include zero inches
            <br/>
            2 - include zero feet and suppress zero inches
            <br/>
            3 - suppress zero feet and include zero inches
            <br/>
            4 - suppress leading zeroes
            <br/>
            8 - suppress trailing zeroes
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.DISPSILH">
            <summary>
            Controls silhouette display of curved 3D solids.
            </summary>
            <value>
            An int value with 0 for <b>off</b>, 1 for <b>on</b>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.EXTNAMES">
            <summary>
            Controls the length of names for named objects.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - limit names to 31 characters
            <br/>
            1 - allow up to 255 characters
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.FACETRES">
            <summary>
            Controls appearance of smooth curved 3D surfaces when shaded or hidden.
            </summary>
            <value>
            A double value between .01 and 10.  The higher the number the more faceted
            and smooter the surface.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.FILLETRAD">
            <summary>
            Specifies the current fillet radius.
            </summary>
            <value>
            A double representing the radius.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.FILLMODE">
            <summary>
            Specifies whether multilines, traces, solids, all hatches, and wide
            polylines are filled in.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - do not fill 
            <br/>
            1 - do fill
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.HYPERLINKBASE">
            <summary>
            Specifies the base address for relative hyperlinks.
            </summary>
            <value>
            A string with the address.
            </value>
            <remarks>
            If this property is blank, the drawing path is used.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.INSUNITS">
            <summary>
            Specifies the units value for a AutoCADÂ® DesignCenter insert.
            </summary>
            <value>
            An int value.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.ISOLINES">
            <summary>
            Specifies the number of lines on a solid's surface to help visualize
            its shape.
            </summary>
            <value>
            An int value.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.LIMCHECK">
            <summary>
            Specifies if limit checking is on.
            its shape.
            </summary>
            <value>
            An int value with 0 for <b>off</b>, 1 for <b>on</b>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.LTSCALE">
            <summary>
            Controls the global linetype scale factor.
            </summary>
            <value>
            A double representing the scale factor.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.LUNITS">
            <summary>
            Controls linear units style.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            1 - scientific
            <br/>
            2 - decimal
            <br/>
            3 - engineering
            <br/>
            4 - architectural
            <br/>
            5 - fractional
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.LUPREC">
            <summary>
            Specifies the number of decimal places to display for linear units.
            </summary>
            <value>
            An int representing the number of decimal places.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.LWDISPLAY">
            <summary>
            Specifies whether line weights are displayed.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - not displayed
            <br/>
            1 - displayed
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.MAXACTVP">
            <summary>
            Specifies maximum number of viewports to regenerate at one time.
            </summary>
            <value>
            An int representing the count.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.MENU">
            <summary>
            Specifies the name of the current menu file.
            </summary>
            <value>
            A string containing the name.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.MIRRTEXT">
            <summary>
            Controls mirroring of text.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - <b>off</b>
            <br/>
            1 - <b>on</b>
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.ELEVATION">
            <summary>
            Specifies the current model space 3D elevation relative to the current UCS.
            </summary>
            <value>
            A double representing the elevation.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.EXTMAX">
            <summary>
            Specifies the upper-right corner coordinate of the drawing extents for
            model space.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing the coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.EXTMIN">
            <summary>
            Specifies the lower-left corner coordinate of the drawing extents for
            model space.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing the coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.INSBASE">
            <summary>
            Specifies the insertion base point for model space.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing the coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.LIMMAX">
            <summary>
            Specifies the upper-right corner coordinate of the drawing limits for
            model space.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> representing the coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.LIMMIN">
            <summary>
            Specifies the lower-left corner coordinate of the drawing limits for
            model space.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> representing the coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.UCSORG">
            <summary>
            Specifies the origin coordinate for the current UCS relative to the world
            coordinate system for model space.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing the coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.UCSXDIR">
            <summary>
            Specifies the x direction for the current UCS relative to the world
            coordinate system for model space.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing the vector.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.UCSYDIR">
            <summary>
            Specifies the y direction for the current UCS relative to the world
            coordinate system for model space.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing the vector.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.OLESTARTUP">
            <summary>
            Specifies if the source application of an embedded OLE object loads when plotting.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.ORTHOMODE">
            <summary>
            Specifies if ortho mode is on or off.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.PDMODE">
            <summary>
            Specifies the type of symbol to use for diplaying points.
            </summary>
            <value>
            An int value specifying the code for the symbol.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.PDSIZE">
            <summary>
            Specifies the size of the point objects.
            </summary>
            <value>
            A double value:
            <br/>
            <br/>
            0 - point is 5 percent of the drawing area height
            <br/>
            &lt;0 - specifies a percentage of the viewport size
            <br/>
            &gt;0 - specifies an absolute size
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.PELLIPSE">
            <summary>
            Specifies the type of ellipse objects that are created.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - true NURBS ellipse
            <br/>
            1 - polyline representation of ellipse
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.PLINEGEN">
            <summary>
            Specifies how polylines generate linetypes around vertices.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - linetype pattern begins and ends at vertices
            <br/>
            1 - linetype pattern ignores vertices and begin and end at polyline
            beginning and ending.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.PLINEWID">
            <summary>
            Specifies default polyline width.
            </summary>
            <value>
            A double representing the width.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.PROXYGRAPHICS">
            <summary>
            Specifies whether images of proxy objects are stored in the drawing.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - images not stored
            <br/>
            1 - images stored in drawing
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.PELEVATION">
            <summary>
            Specifies the current paper space 3D elevation relative to the current UCS.
            </summary>
            <value>
            A double representing the elevation.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.PEXTMAX">
            <summary>
            Specifies the upper-right corner coordinate of the drawing extents for
            paper space.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing the coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.PEXTMIN">
            <summary>
            Specifies the lower-left corner coordinate of the drawing extents for
            paper space.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing the coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.PINSBASE">
            <summary>
            Specifies the insertion base point for paper space.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing the coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.PLIMMAX">
            <summary>
            Specifies the upper-right corner coordinate of the drawing limits for
            paper space.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> representing the coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.PLIMMIN">
            <summary>
            Specifies the lower-left corner coordinate of the drawing limits for
            paper space.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> representing the coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.PSLTSCALE">
            <summary>
            Specifies paper space linetype scaling.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - no special scaling, scaled by the <see cref="P:ComponentIngenuity.Ivan.SystemVariables.LTSCALE"/> value
            <br/>
            1 - scaling is controlled by viewport scaling
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.PUCSORG">
            <summary>
            Specifies the origin coordinate for the current UCS relative to the world
            coordinate system for paper space.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing the coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.PUCSXDIR">
            <summary>
            Specifies the x direction for the current UCS relative to the world
            coordinate system for paper space.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing the vector.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.PUCSYDIR">
            <summary>
            Specifies the y direction for the current UCS relative to the world
            coordinate system for paper space.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing the vector.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.PSVPSCALE">
            <summary>
            Specifies the default view scale factor for new viewports.
            </summary>
            <value>
            A double where values must be positive and 0 = scale to fit.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.QTEXTMODE">
            <summary>
            Specifies if Quick Text mode is on or off.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.REGENMODE">
            <summary>
            Specifies if REGENAUTO mode is on or off.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.SHADEDGE">
            <summary>
            Specifies how a drawing is shaded.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - faces shaded, no edge highlighting
            <br/>
            1 - faces shaded, edges in background color
            <br/>
            2 - faces not filled, edges in object color
            <br/>
            3 - faces in object color, edges in background color
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.SHADEDIF">
            <summary>
            Sets the ratio of diffuse reflective light to ambient light in percentage
            of diffuse reflective light.
            </summary>
            <value>
            An int representing the ratio.
            </value>
            <remarks>
            This is only effective when <see cref="P:ComponentIngenuity.Ivan.SystemVariables.SHADEDGE"/> is 0 or 1.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.SKETCHINC">
            <summary>
            Sketch record increment.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.SKPOLY">
            <summary>
            0 = Sketch lines; 1 = Sketch polylines
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.SPLFRAME">
            <summary>
            Controls the display of spline vertices, defining mesh, and displaying
            mesh of a surface-fit mesh, and display of invisible edges of 3D faces.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - no display of spline vertices, display only fit surface of smoothed
            3D mesh, and no display of invisible edges of 3D face
            <br/>
            1 - spline vertices are displayed, only defining mesh of a smoothed 3D
            mesh is displayed, invisible edges of 3D face are displayed
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.SPLINESEGS">
            <summary>
            Specifies the number of line segments to use for each spline-fit polygon.
            </summary>
            <value>
            An int value representing the count.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.SPLINETYPE">
            <summary>
            Specifies the type of spline curves that are generated.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            5 - quadratic B-spline
            <br/>
            6 - cubic B-spline
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.SURFTAB1">
            <summary>
            Specifies the number facets in the <b>m</b> direction of meshes.
            </summary>
            <value>
            An int value representing the count.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.SURFTAB2">
            <summary>
            Specifies the number facets in the <b>n</b> direction of meshes.
            </summary>
            <value>
            An int value representing the count.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.SURFTYPE">
            <summary>
            Specifies the type of surface fitting used when polylines are smoothed.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            5 - quadratic B-spline surface
            <br/>
            6 - cubic B-spline surface
            <br/>
            8 - bezier surface
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.SURFU">
            <summary>
            Specifies the surface density in the <b>m</b> direction of meshes.
            </summary>
            <value>
            An int value representing the count.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.SURFV">
            <summary>
            Specifies the surface density in the <b>n</b> direction of meshes.
            </summary>
            <value>
            An int value representing the count.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.TDCREATE">
            <summary>
            Specifies the creation date and time of the file.
            </summary>
            <value>
            A double value representing date and time in Julian format.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.TDINDWG">
            <summary>
            Specifies the total amount of editing time for the file.
            </summary>
            <value>
            A double value representing the amount of time in days and decimal days.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.TDUPDATE">
            <summary>
            Specifies the date and time of the last file update.
            </summary>
            <value>
            A double value representing date and time in Julian format.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.TDUSRTIMER">
            <summary>
            Specifies the user-controlled elapsed time.
            </summary>
            <value>
            A double value representing time in days and decimal days.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.TEXTQLTY">
            <summary>
            Specifies the font quality to use when plotting.
            </summary>
            <value>
            A double value from 1.0 to 100.0.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.TEXTSIZE">
            <summary>
            Specifies the default text height.
            </summary>
            <value>
            A double value representing the height.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.TEXTSTYLE">
            <summary>
            Specifies the default text style.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Shapefile"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.THICKNESS">
            <summary>
            Specifies the default thickness for 3D objects.
            </summary>
            <value>
            A double value representing the thickness.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.TILEMODE">
            <summary>
            1 for previous release compatibility mode; 0 otherwise
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.TRACEWID">
            <summary>
            Specifies the default trace width.
            </summary>
            <value>
            A double value representing the width.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.TREEDEPTH">
            <summary>
            Specifies the maximum depth of the spatial index.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.UNITMODE">
            <summary>
            Specifies how fractional, foot-and-inch, and surveyor's angles are displayed.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - industry standard
            <br/>
            1 - AutoCADÂ® input format
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.USERI1">
            <summary>
            General purpose integer user variable #1.
            </summary>
            <value>
            An int.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.USERI2">
            <summary>
            General purpose integer user variable #2.
            </summary>
            <value>
            An int.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.USERI3">
            <summary>
            General purpose integer user variable #3.
            </summary>
            <value>
            An int.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.USERI4">
            <summary>
            General purpose integer user variable #4.
            </summary>
            <value>
            An int.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.USERI5">
            <summary>
            General purpose integer user variable #5.
            </summary>
            <value>
            An int.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.USERR1">
            <summary>
            General purpose real user variable #1.
            </summary>
            <value>
            A double.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.USERR2">
            <summary>
            General purpose real user variable #2.
            </summary>
            <value>
            A double.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.USERR3">
            <summary>
            General purpose real user variable #3.
            </summary>
            <value>
            A double.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.USERR4">
            <summary>
            General purpose real user variable #4.
            </summary>
            <value>
            A double.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.USERR5">
            <summary>
            General purpose real user variable #5.
            </summary>
            <value>
            A double.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.VISRETAIN">
            <summary>
            Specifies whether layer setting for xrefs is retained.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - current layer color, linetype and visibility settings are retained
            <br/>
            1 - layer settings of xref always renewed upon loading
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.SystemVariables.WORLDVIEW">
            <summary>
            1 = Set UCS to WCS during DVIEW/VPOINT, 0 = Don't change UCS
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.NamespaceDoc">
            <summary>
            This is the main namespace of the Ivan class library and contains all the functionality.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Drawing">
            <summary>
            Represents the drawing file.
            </summary>
            <remarks>
            This is the root node of the Ivan object hierarchy and encapsulates the 
            entire drawing file.
            </remarks>
        </member>
        <member name="M:ComponentIngenuity.Ivan.Drawing.#ctor">
            <summary>
            Constructs a Drawing object.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.Drawing.Read(System.String)">
            <summary>
            Initializes the Drawing object for use by opening and reading a DWGÂ® file.
            </summary>
            <param name="filePath">
            The full path and file name of the drawing file.
            </param>
            <returns>
            None.
            </returns>
            <remarks>
            This method opens the file to read it, then closes it when finished.
            </remarks>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.DrawingAlreadyInitializedException">The Drawing object is already initialized.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.FileNotFoundException">The <b>filePath</b> is not found.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.CannotOpenFileException">System error occurs with file open.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.UnknownFileFormatException">The format version is not known.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.UnsupportedDWGVersionException">The format version is not supported.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.FileCorruptException">Parsing and validation failed on the drawing.</exception>
        </member>
        <member name="M:ComponentIngenuity.Ivan.Drawing.Read(System.IO.FileStream)">
            <summary>
            Initializes the Drawing object for use by reading an already opened DWGÂ® file.
            </summary>
            <param name="drawingStream">
            A file stream created by opening the drawing file.
            </param>
            <returns>
            None.
            </returns>
            <remarks>
            This method does not open or close the file.  That is done by the host application.
            </remarks>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.DrawingAlreadyInitializedException">The Drawing object is already initialized.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.UnknownFileFormatException">The format version is not known.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.UnsupportedDWGVersionException">The format version is not supported.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.FileCorruptException">Parsing and validation failed on the drawing.</exception>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.Classes">
            <summary>
            The Classes section holds the information for application-defined classes
            whose instances appear in drawing.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.IsInitialized">
            <summary>
            Specifies whether the Drawing object has been initialized by calling 
            <see cref="M:ComponentIngenuity.Ivan.Drawing.Read(System.String)"/> or <see cref="M:ComponentIngenuity.Ivan.Drawing.Read(System.IO.FileStream)"/> 
            </summary>
            <remarks>
            The Drawing object is not usable until IsInitialized is true.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.IntegrityCheckLevel">
            <summary>
            Specifies the the <see cref="P:ComponentIngenuity.Ivan.Drawing.IntegrityCheckLevel"/> to use when loading a file.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.BackupMethod">
            <summary>
            Specifies the the <see cref="P:ComponentIngenuity.Ivan.Drawing.BackupMethod"/> to use when saving a file.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.FormatVersion">
            <summary>
            The DWGÂ® file format version.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.FormatMaintVersion">
            <summary>
            The DWGÂ® file format maintenance release version.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.PreviewAddress">
            <summary>
            The offset within the drawing file where the Preview section resides.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.AcadVersion">
            <summary>
            The version of the AutoCADÂ® application that created the file.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.AcadMaintVersion">
            <summary>
            The maintenance release version of the AutoCADÂ® application that created the file.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.CodePage">
            <summary>
            The code page used for the drawing.
            </summary>
            <remarks>
            A code page provides support for character sets used in different languages.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.SummaryInfoAddress">
            <summary>
            The offset within the drawing file where the SummaryInfo section resides.
            </summary>
            <remarks>
            If the section does not exist the value will be zero.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.VbaProjectAddress">
            <summary>
            The offset within the drawing file where the VbaProject section resides.
            </summary>
            <remarks>
            If the section does not exist the value will be zero.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.ApplicationInfoAddress">
            <summary>
            The offset within the drawing file where the ApplicationInfo section resides.
            </summary>
            <remarks>
            If the section does not exist the value will be zero.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.ApplicationInfoHistoryAddress">
            <summary>
            The offset within the drawing file where the ApplicationInfoHistory section resides.
            </summary>
            <remarks>
            If the section does not exist the value will be zero.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.Linetypes">
            <summary>
            The collection of all <see cref="T:ComponentIngenuity.Ivan.Linetype"/> objects in the drawing.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.LinetypeList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.TextStyles">
            <summary>
            The collection of all <see cref="T:ComponentIngenuity.Ivan.TextStyle"/> objects in the drawing.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.TextStyleList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.Shapefiles">
            <summary>
            The collection of all <see cref="T:ComponentIngenuity.Ivan.Shapefile"/> objects in the drawing.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.ShapefileList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.NamedObjects">
            <summary>
            The named object dictionary collection.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Dictionary"/> object.
            </value>
            <remarks>
            The named object dictionary is a special collection of non-graphical objects
            that serves as the root of all dictionaries that are added to the drawing.  Any
            object of type <see cref="T:ComponentIngenuity.Ivan.DrawingObject"/> can reside in the dictionary.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.Layers">
            <summary>
            The collection of all <see cref="T:ComponentIngenuity.Ivan.Layer"/> objects in the drawing.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.LayerList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.RegisteredApps">
            <summary>
            The collection of all <see cref="T:ComponentIngenuity.Ivan.RegisteredApp"/> objects in the drawing.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.RegisteredAppList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.Layouts">
            <summary>
            The collection of all <see cref="T:ComponentIngenuity.Ivan.Layout"/> objects in the drawing.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.LayoutList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.Blocks">
            <summary>
            The collection of all <see cref="T:ComponentIngenuity.Ivan.Block"/> objects in the drawing.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.BlockList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.MLineStyles">
            <summary>
            The collection of all <see cref="T:ComponentIngenuity.Ivan.MLineStyle"/> objects in the drawing.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.MLineStyleList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.DimStyles">
            <summary>
            The collection of all <see cref="T:ComponentIngenuity.Ivan.DimStyle"/> objects in the drawing.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.DimStyleList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.Groups">
            <summary>
            The collection of all <see cref="T:ComponentIngenuity.Ivan.Group"/> objects in the drawing.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.GroupList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.Viewports">
            <summary>
            The collection of all <see cref="T:ComponentIngenuity.Ivan.Viewport"/> objects in the drawing.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.ViewportList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.Views">
            <summary>
            The collection of all <see cref="T:ComponentIngenuity.Ivan.View"/> objects in the drawing.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.ViewList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.UCSs">
            <summary>
            The collection of all <see cref="T:ComponentIngenuity.Ivan.UCS"/> objects in the drawing.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.UCSList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.SystemVariables">
            <summary>
            The encapsulation of the system variables.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Drawing.SystemVariables"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Drawing.LwDefault">
            <summary>
            Specifies the value for the default lineweight.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Lineweight"/> enum specifying the width in millimeters.  The
            default value is 25.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.View">
            <summary>
            A view object.
            </summary>
            <remarks>
            This object represents a named view.  Views are used to define a position
            and orientation of viewing into model space.  Whereas viewports describe
            the actual windows on the screen, the view represents how the objects
            will be seen in the viewport.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.Name">
            <summary>
            The name of the view.
            </summary>
            <value>
            A string containing the name.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.Height">
            <summary>
            Specifies how many model space units span the height of the view.
            </summary>
            <value>
            A double representing the distance.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.Width">
            <summary>
            Specifies how many model space units span the width of the view.
            </summary>
            <value>
            A double representing the distance.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.Center">
            <summary>
            Specifies the center of the view.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object.
            </value>
            <remarks>
            This is the starting point of the line of sight of the view.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.Target">
            <summary>
            Specifies the target of the view.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
            <remarks>
            This is the ending point of the line of sight of the view.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.Direction">
            <summary>
            Specifies the direction of the line of sight.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object representing the vector.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.TwistAngle">
            <summary>
            Specifies the angle the view is twisted around the line of sight.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.LensLength">
            <summary>
            Specifies the lens length for the view.
            </summary>
            <value>
            A double representing the length.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.FrontClip">
            <summary>
            Specifies the view front clipping plane z value.
            </summary>
            <value>
            A double representing the coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.BackClip">
            <summary>
            Specifies the view back clipping plane z value.
            </summary>
            <value>
            A double representing the coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.ViewMode">
            <summary>
            Specifies the view mode for the view.
            </summary>
            <value>
            An int bit mask containing the mode:
            <br/>
            <br/>
            <b>0</b> - turned off
            <br/>
            <b>1</b> - perspecitve view active
            <br/>
            <b>2</b> - front clipping on
            <br/>
            <b>4</b> - back clipping on
            <br/>
            <b>8</b> - ucs follow mode on
            <br/>
            <b>16</b> - front clip variation
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.RenderMode">
            <summary>
            Specifies the render mode of the view.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.View.RenderMode"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.IsPaperspace">
            <summary>
            Specifies if this is a paper space view.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - is a paper space view
            <br/>
            <b>false</b> - is a model space view
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.HasAssociatedUCS">
            <summary>
            Specifies if the view has an associated UCS.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - has a UCS
            <br/>
            <b>false</b> - does not have a UCS
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.UCSOrigin">
            <summary>
            Specifies if the origin of the UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.UCSXAxisVector">
            <summary>
            Specifies if the x direction of the UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object containing the vector.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.UCSYAxisVector">
            <summary>
            Specifies if the y direction of the UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object containing the vector.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.UCSElevation">
            <summary>
            Specifies if the elevation of the UCS.
            </summary>
            <value>
            A double representing the elevation.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.OrthographicViewType">
            <summary>
            Specifies if the orthographic view type of the UCS.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.View.OrthographicViewType"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.IsOrthographic">
            <summary>
            Specifies if the UCS is orthographic.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the UCS is orthographic
            <br/>
            <b>false</b> - the UCS is not orthographic
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.UCSType">
            <summary>
            Specifies the type of the UCS.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.View.UCSType"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.NamedUCS">
            <summary>
            Specifies the named UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.UCS"/> enum.
            </value>
            <remarks>
            The <see cref="P:ComponentIngenuity.Ivan.View.UCSType"/> property must be <b>Named</b> for this property
            to be meaningful, else it is <b>null</b>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.BaseUCSType">
            <summary>
            Specifies the type of the base UCS of the UCS.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.View.BaseUCSType"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.View.BaseUCS">
            <summary>
            Specifies the base UCS of the UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.UCS"/> object.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.RegisteredApp">
            <summary>
            Represents a registered application.
            </summary>
            <remarks>
            Third party applications that interface with AutoCADÂ® must register themselves
            with AutoCADÂ®.  This class represents a registered application.  All registered
            applications are maintained by the <see cref="P:ComponentIngenuity.Ivan.Drawing.RegisteredApps"/> property.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RegisteredApp.Name">
            <summary>
            The name of the Registered Application.
            </summary>
            <value>
            A string containing the name.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Polyline2d">
            <summary>
            A 2D polyline entity.
            </summary>
            <remarks>
            A two dimensional line that can have varying width, it is drawn thru
            a set of vertex points and can consist of arcs and line segments.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Polyline2d.Vertices">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.Vertex2d"/> entities that define the
            geometry of the polyline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Vertex2dList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Polyline2d.Area">
            <summary>
            Specifies the area of the polyline.
            </summary>
            <value>
            A double represent the area.
            </value>
            <remarks>
            This is the area of the inside the closed polyline.  If the polyline
            is not closed then this is the area by connecting the first and last
            vertex.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Polyline2d.StartWidth">
            <summary>
            Specifies the default width of the segment that starts at this point.
            </summary>
            <value>
            A double representing the width.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Polyline2d.EndWidth">
            <summary>
            Specifies the default width of the segment that ends at this point.
            </summary>
            <value>
            A double representing the width.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Polyline2d.HasConstantWidth">
            <summary>
            Specifies if the segments of the polyline are of a constant width.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - segments are constant width
            <br/>
            <b>false</b> - segments have varying widths
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Polyline2d.ConstantWidth">
            <summary>
            Specifies the constant width for the segments of the polyline.
            </summary>
            <value>
            A double representing the width.
            </value>
            <remarks>
            This property is only meaningful if the <see cref="P:ComponentIngenuity.Ivan.Polyline2d.HasConstantWidth"/>
            property is <b>true</b>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Polyline2d.IsClosed">
            <summary>
            Specifies if the polyline is closed.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the polyline is closed
            <br/>
            <b>false</b> - the polyline is open
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Polyline2d.Elevation">
            <summary>
            The elevation of the polyline.
            </summary>
            <value>
            A double representing the elevation.
            </value>
            <remarks>
            The elevation is the z coordinate for the plane of the object.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Polyline2d.LineTypeGeneration">
            <summary>
            Specifies the linetype generation for the polyline.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            true - generate the linetype of the polyline continuously thru the vertices
            <br/>
            false - generate the linetype of the polyline starting and ending with a dash
            at each vertex
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Polyline2d.Thickness">
            <summary>
            The thickness of the polyline.
            </summary>
            <value>
            A double. 
            </value>
            <remarks>
            The thickness it the extrusion of the polyline in the z direction.  This
            direction is defined by the <see cref="P:ComponentIngenuity.Ivan.Polyline2d.Normal"/> property.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Polyline2d.Type">
            <summary>
            Specifies the type of the 2D polyline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.PolylineType"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Polyline2d.Normal">
            <summary>
            Unit normal vector to the surface formed by the polyline.
            </summary>
            <value>
            A Point3d whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the polyline.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.OrdinateDimension">
            <summary>
            An ordinate dimension.
            </summary>
            <remarks>
            A dimension measuring the absolute x or y position of a point from the origin.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.OrdinateDimension.FeatureLocation">
            <summary>
            Specifies the location of the feature being measured.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
            <remarks>
            The leader is drawn from the FeatureLocation to the <see cref="P:ComponentIngenuity.Ivan.OrdinateDimension.LeaderEndPoint"/>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.OrdinateDimension.LeaderEndPoint">
            <summary>
            Specifies the location of the end point of the leader.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
            <remarks>
            The leader is drawn from the <see cref="P:ComponentIngenuity.Ivan.OrdinateDimension.FeatureLocation"/> to the LeaderEndPoint.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.OrdinateDimension.Origin">
            <summary>
            Specifies the origin of the UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
            <remarks>
            This is the origin of the UCS that was current when the dimension was
            created.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Point3d">
            <summary>
            A 3D point object.
            </summary>
            <remarks>
            This is a support class to provide for the housing of a three dimensional
            point.
            </remarks>
        </member>
        <member name="M:ComponentIngenuity.Ivan.Point3d.#ctor(System.Double,System.Double,System.Double)">
            <param name="X">
            Specifies the x coordinate of the point.
            </param>
            <param name="Y">
            Specifies the y coordinate of the point.
            </param>
            <param name="Z">
            Specifies the z coordinate of the point.
            </param>
        </member>
        <member name="M:ComponentIngenuity.Ivan.Point3d.ToString">
            <summary>
            Returns a textual representation of the coordinate.
            </summary>
            <returns>
            A string like (X = 1.51, Y = 3.43, Z = 5.63).
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Point3d.X">
            <summary>
            Specifies the x coordinate of the point.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Point3d.Y">
            <summary>
            Specifies the y coordinate of the point.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Point3d.Z">
            <summary>
            Specifies the z coordinate of the point.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Vertex3dList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.Vertex3d"/> objects accessible by index or 
            unique id.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.Vertex3dList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.Vertex3dList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.Vertex3d"/> from the list corresponding to the specified 
            UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Vertex3d"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The Vertex3d is not in the List.</exception>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Vertex3dList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Vertex3dList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Vertex3d"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Vertex3d"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Point3dList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.Point3d"/> objects accessible by index.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.Point3dList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Point3dList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Point3dList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Point3d"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.PlotSettings">
            <summary>
            A PlotSettings object.
            </summary>
            <remarks>
            The plotsettings object is an encapsulation of plotter configuration
            information that, unlike the <see cref="T:ComponentIngenuity.Ivan.Layout"/> object is not associated
            with any block in particular and can freely be assigned to any geometry.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.PageSetupName">
            <summary>
            The name of the page setup.
            </summary>
            <value>
            A string containing the name.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.ConfigurationName">
            <summary>
            Specifies the name of the currently configured plotting device.
            </summary>
            <value>
            A string containing the name.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.CenterPlot">
            <summary>
            Specifies if the plot should be centered on the media.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            true - center the drawing
            <br/>
            false - do not center the drawing
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.IsModelSpace">
            <summary>
            Specifies if the plotsettings applies to model space.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            true - the plot settings applies to model space only
            <br/>
            false - the plot settings applies to all layouts
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.PlotHidden">
            <summary>
            Specifies if hidden line removal should be applied to the plot.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            true - use hidden line algorithm
            <br/>
            false - do not use hidden line algorithm
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.PlotViewportBorders">
            <summary>
            Specifies if the viewport borders are plotted.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            true - plot the borders
            <br/>
            false - do not plot the borders
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.PlotViewportsFirst">
            <summary>
            Specifies if content in viewports is plotted first.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            true - plot viewports first, contents of the space last
            <br/>
            false - plot the contents of the space first, viewports last
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.PlotWithLineweights">
            <summary>
            Specifies if drawing is plotted with lineweights from the plot style file.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            true - override lineweights from the plot style file
            <br/>
            false - get lineweights from the drawing
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.PlotWithPlotStyles">
            <summary>
            Specifies if drawing is plotted with configuration information from the
            plot style file.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            true - override configuration with settings from the plot style file
            <br/>
            false - use configuration information contained in the drawing
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.ScaleLineweights">
            <summary>
            Specifies if the lineweights are scaled along with the geometry.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            true - scale the lineweights
            <br/>
            false - do not scale the lineweights
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.ShowPlotStyles">
            <summary>
            Specifies if plot styles are used in the plot.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            true - use plot styles
            <br/>
            false - do not use plot styles
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.UseStandardScale">
            <summary>
            Specifies if plot is to use the standard scale.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            true - use the standard scale
            <br/>
            false - use a custom scale
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.LeftMargin">
            <summary>
            Specifies the plot settings left margin.
            </summary>
            <value>
            A double representing the margin in millimeters.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.BottomMargin">
            <summary>
            Specifies the plot settings bottom margin.
            </summary>
            <value>
            A double representing the margin in millimeters.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.RightMargin">
            <summary>
            Specifies the plot settings right margin.
            </summary>
            <value>
            A double representing the margin in millimeters.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.TopMargin">
            <summary>
            Specifies the plot settings top margin.
            </summary>
            <value>
            A double representing the margin in millimeters.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.PaperWidth">
            <summary>
            Specifies the width of the paper.
            </summary>
            <value>
            A double representing the width in millimeters.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.PaperHeight">
            <summary>
            Specifies the height of the paper.
            </summary>
            <value>
            A double representing the height in millimeters.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.PaperSize">
            <summary>
            The paper size for plotting.
            </summary>
            <value>
            A string expressing the paper size.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.PlotOrigin">
            <summary>
            Specifies the origin of the plot.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.PaperUnits">
            <summary>
            Specifies the plotter paper units.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.PlotPaperUnits"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.PlotRotation">
            <summary>
            Specifies the rotation angle of the plotsettings.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.PlotSettings.PlotRotation"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.PlotType">
            <summary>
            Specifies the plot type for the plotsettings.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.PlotSettings.PlotType"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.WindowMin">
            <summary>
            Specifies bottom-left corner of the plot area.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object.
            </value>
            <remarks>
            This property is only valid with the <see cref="P:ComponentIngenuity.Ivan.PlotSettings.PlotType"/> is set to
            <b>Window</b>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.WindowMax">
            <summary>
            Specifies top-right corner of the plot area.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object.
            </value>
            <remarks>
            This property is only valid with the <see cref="P:ComponentIngenuity.Ivan.PlotSettings.PlotType"/> is set to
            <b>Window</b>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.ViewToPlot">
            <summary>
            Specifies the name of the view to plot.
            </summary>
            <value>
            A string containing the name of the view.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.RealWorldUnits">
            <summary>
            Specifies the plot settings numerator of the custom print scale.
            </summary>
            <value>
            A double representing numerator.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.DrawingUnits">
            <summary>
            Specifies the plot settings denominator of the custom print scale.
            </summary>
            <value>
            A double representing denominator.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.StyleSheet">
            <summary>
            Specifies the style sheet used by the plot.
            </summary>
            <value>
            A string containing the name of the style sheet.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotSettings.StandardScale">
            <summary>
            Specifies the standard scale for the plot.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.PlotScale"/> enum.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Trace">
            <summary>
            A trace entity.
            </summary>
            <remarks>
            This is a series of beveled line segments.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Trace.Thickness">
            <summary>
            The thickness of the trace.
            </summary>
            <value>
            A double. 
            </value>
            <remarks>
            The thickness it the extrusion of the trace in the z direction.  This
            direction is defined by the <see cref="P:ComponentIngenuity.Ivan.Trace.Normal"/> property.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Trace.Elevation">
            <summary>
            The elevation of the trace.
            </summary>
            <value>
            A double representing the elevation.
            </value>
            <remarks>
            The elevation is the z coordinate for the plane of the object.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Trace.Normal">
            <summary>
            Unit normal vector to the surface formed by the trace.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the trace.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Trace.Vertex1">
            <summary>
            First vertex of the Trace entity.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/>.
            </value>
            <remarks>
            Use the elevation value for the Z component.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Trace.Vertex2">
            <summary>
            Second vertex of the Trace entity.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/>.
            </value>
            <remarks>
            Use the elevation value for the Z component.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Trace.Vertex3">
            <summary>
            Third vertex of the Trace entity.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/>.
            </value>
            <remarks>
            Use the elevation value for the Z component.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Trace.Vertex4">
            <summary>
            Third vertex of the Trace entity.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/>.
            </value>
            <remarks>
            Use the elevation value for the Z component.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Shape">
            <summary>
            A shape entity.
            </summary>
            <remarks>
            The shape entity is an object whose geometry is defined in a shape
            file (.shx).
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Shape.InsertionPoint">
            <summary>
            Specifies the insertion point of the shape.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Shape.Normal">
            <summary>
            Unit normal vector to the shape.
            </summary>
            <value>
            A Point3d whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the shape's plane.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Shape.ObliqueAngle">
            <summary>
            The oblique angle of the shape.
            </summary>
            <value>
            A double value representing the angle in radians.
            </value>
            <remarks>
            This angle is the degree to which the shape slants to the right or to the
            left from vertical.  Positive values are to the right, negative values
            are to the left.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Shape.Rotation">
            <summary>
            The rotation of the shape.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            The angle is relative to the x axis with counter-clockwise representing
            the positive direction.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Shape.ScaleFactor">
            <summary>
            Scale factor for the shape.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            This value is applied to the size of the shape.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Shape.WidthFactor">
            <summary>
            Width factor for the shape.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            This value is applied to the width of the shape to adjust its
            horizontal size.  Positive values increase its size, negative values
            decrease its size.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Shape.HasShapefile">
            <summary>
            Specifies if the Shapefile property is set.
            </summary>
            <value>
            A bool.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Shape.ShapeNumber">
            <summary>
            Specifies the index of the shape within the shape file.
            </summary>
            <value>
            An int representing the index.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Shape.Shapefile">
            <summary>
            Specifies the <see cref="P:ComponentIngenuity.Ivan.Shape.Shapefile"/> object representing the file for
            this shape.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Shape.Shapefile"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Shape.Thickness">
            <summary>
            The thickness of the shape.
            </summary>
            <value>
            A double. 
            </value>
            <remarks>
            The thickness it the extrusion of the shape in the z direction.  This
            direction is defined by the <see cref="P:ComponentIngenuity.Ivan.Shape.Normal"/> property.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Polyline3d">
            <summary>
            A 3D polyline entity.
            </summary>
            <remarks>
            A three dimensional line consisting of a series of straight, constant
            width line segments.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Polyline3d.Vertices">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.Vertex3d"/> entities that define the
            geometry of the polyline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Vertex3dList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Polyline3d.IsClosed">
            <summary>
            Specifies if the polyline is closed.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the polyline is closed
            <br/>
            <b>false</b> - the polyline is open
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Polyline3d.Type">
            <summary>
            Specifies the type of the 3D polyline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Polyline3dType"/> enum.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.LinetypeList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.Linetype"/> objects accessible by index, name 
            or unique id.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.LinetypeList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.LinetypeList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.Linetype"/> from the list corresponding to the specified 
            UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Linetype"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The Linetype is not in the List.</exception>
        </member>
        <member name="M:ComponentIngenuity.Ivan.LinetypeList.GetItemsByName(System.String)">
            <summary>
            Returns all the <see cref="T:ComponentIngenuity.Ivan.Linetype"/> objects in the list that have the 
            specified name.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns a <see cref="T:ComponentIngenuity.Ivan.LinetypeList"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LinetypeList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LinetypeList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Linetype"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Linetype"/> object at the specified index.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LinetypeList.Item(System.String)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Linetype"/> with the specified name in the list.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Linetype"/> object with the specified name.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The Linetype is not in the List.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.DuplicateKeysFound">More than one Linetype matched the Name.  Use GetItemsByName(name).</exception>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Spline">
            <summary>
            A controlled spline.
            </summary>
            <remarks>
            Splines are curves that are generated based on a mathematical model.  Controlled
            spline geometry is based on a set of control points that determine how the
            spline will be drawn.  Weights are given to the control points that specify
            the amount of influence or control that the point has on the curve.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Spline.SplineType">
            <summary>
            The type of the Spline.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Spline.SplineType"/> enum.
            </value>
            <remarks>
            Splines can be created by specifying fit points or converting other geometry 
            types to a Spline.  In the case where the fit points are explicitly 
            specified when designing the Spline the fit points collection will be 
            populated.  In the case where Splines were created in another fashion, 
            where the fit points were not explicitly specified by the user, the fit 
            points collection will be empty and the control points collection and knots 
            collection will be populated.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Spline.ControlPoints">
            <summary>
            A collection of the control points.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.ControlPoint3dList"/> collection object.
            </value>
            <remarks>
            These are points that are used in the mathematical formula to generate
            the curve.  
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Spline.FitPoints">
            <summary>
            The fit points for the spline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3dList"/> collection object.
            </value>
            <remarks>
            These are the points that define the curve.  The <see cref="P:ComponentIngenuity.Ivan.Spline.FitTolerance"/>
            property specifies how closely the curve should pass thru these points.  A
            tolerance of zero means that the curve must touch all points.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Spline.IsClosed">
            <summary>
            Specifies if the curve is closed.
            </summary>
            <value>
            A boolean value, <b>true</b> if the curve is closed, <b>false</b> if it is not.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Spline.IsPeriodic">
            <summary>
            Specifies if the curve is periodic.
            </summary>
            <value>
            A boolean value, <b>true</b> if the curve is periodic, <b>false</b> if it is not.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Spline.IsRational">
            <summary>
            Specifies if the curve is rational.
            </summary>
            <value>
            A boolean value, <b>true</b> if the curve is rational, <b>false</b> if it is not.
            </value>
            <remarks>
            If this property is <b>true</b> it generally implies that the control points
            will have weights associated with them. 
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Spline.KnotTolerance">
            <summary>
            Specifies the knot tolerance.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            The tolerance value determines to what degree two consecutive knot values
            are treated the same.  If the difference between their values is less
            than then KnotTolerance then they are treated the same.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Spline.ControlTolerance">
            <summary>
            Specifies the control point tolerance.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            The tolerance value determines to what degree two control points
            are treated the same.  If the distant between the points is less
            than then ControlTolerance then they are treated as the same point.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Spline.FitTolerance">
            <summary>
            The fit tolerance of the spline.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            This value specifies how closely the curve should be to the <see cref="P:ComponentIngenuity.Ivan.Spline.FitPoints"/>.
            The lower the value, the closer the curve is to the points.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Spline.Knots">
            <summary>
            Collection of knots for the spline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.DoubleList"/> collection object.
            </value>
            <remarks>
            This collection actually holds, in mathematical terms, the breakpoints
            of the spline.  They are used in the formula to generate the curve.  They
            are associated with the intervals that break up the curve into its
            constituent segments.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Spline.Degree">
            <summary>
            The degree of the spline.
            </summary>
            <value>
            An integer between 1 and 25.
            </value>
            <remarks>
            This is the degree of the polynomial equation used to generate the curve.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Spline.StartTangent">
            <summary>
            The start tangent of the spline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing a vector.
            </value>
            <remarks>
            This is the tangent to the curve at the first fit point.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Spline.EndTangent">
            <summary>
            The end tangent of the spline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing a vector.
            </value>
            <remarks>
            This is the tangent to the curve at the last fit point.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Classes">
            <summary>
            The Classes section in the drawing file.
            </summary>
            <remarks>
            The Classes section holds information about registered application defined
            classes that are in the drawing.  The registered applications in the drawing
            that contribute to these classes are listed in the <see cref="P:ComponentIngenuity.Ivan.Drawing.RegisteredApps"/>
            property.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Classes.MaxClassNum">
            <summary>
            The maximum class number in the drawing.
            </summary>
            <remarks>
            All classes are given a number, beginning with 500.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Classes.Definitions">
            <summary>
            A collection of all the classes defined in the drawing.
            </summary>
            <return>
            A <see cref="T:ComponentIngenuity.Ivan.ClassDefinitionList"/>.
            </return>
        </member>
        <member name="T:ComponentIngenuity.Ivan.DoubleList">
            <summary>
            A collection of doubles accessible by index.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.DoubleList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DoubleList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DoubleList.Item(System.Int32)">
            <summary>
            Returns the double at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the double at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Hyperlink">
            <summary>
            A hyperlink object.
            </summary>
            <remarks>
            All <see cref="T:ComponentIngenuity.Ivan.DrawingEntity"/> type objects can have a hyperlink collection
            attached to them.  The hyperlink specifies a url or named location that
            is associated with the object.  
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hyperlink.Url">
            <summary>
            Specifies the URL for the hyperlink.
            </summary>
            <value>
            A string containing the URL.
            </value>
            <remarks>
            This is a universal resource locator, for example, "www.mysite.com".
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hyperlink.Description">
            <summary>
            Specifies the description of the hyperlink.
            </summary>
            <value>
            A string containing the description.
            </value>
            <remarks>
            This is a description used to help identify the nature of the link.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hyperlink.NamedLocation">
            <summary>
            Specifies a named location for the hyperlink.
            </summary>
            <value>
            A string containing the name.
            </value>
            <remarks>
            As opposed to a URL this could be, for example, a bookmark in a word
            processor document.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Exceptions.NamespaceDoc">
            <summary>
            This is an auxiliary namespace to provide a convenient grouping of all the Ivan exceptions.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Exceptions.IvanException">
            <summary>
            The base class for all Ivan generated exceptions.
            </summary>
            <remarks>
            All Ivan exceptions are of this type.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Exceptions.UnsupportedDWGVersionException">
            <summary>
            Thrown if the version of the drawing file does not match a version
            supported by the library.
            </summary>
            <remarks>
            The file is recognized as a DWGÂ® file but the version is not supported by 
            Ivan.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Exceptions.UnknownFileFormatException">
            <summary>
            This is thrown when an attempt to open a file other than a DWGÂ® R15, R18, 
            R21 or R24 is made.
            </summary>
            <remarks>
            Currently, the Ivan library supports AutoCADÂ® versions 2000 thru 2012.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Exceptions.FileNotFoundException">
            <summary>
            Thrown if the drawing file cannot be found.
            </summary>
            <remarks>
            If the, at the given path and filename, no such file exists, this
            exception will be thrown.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Exceptions.DrawingAlreadyInitializedException">
            <summary>
            Thrown when the <see cref="T:ComponentIngenuity.Ivan.Drawing"/> object has already been initialized.
            </summary>
            <remarks>
            This is thrown by the <see cref="M:ComponentIngenuity.Ivan.Drawing.Read(System.String)"/> or <see cref="M:ComponentIngenuity.Ivan.Drawing.Read(System.IO.FileStream)"/> 
            method when it is called while a drawing is currently open.  Once a drawing is opened it must be
            closed before <b>Open</b> can be called again.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Exceptions.CannotOpenFileException">
            <summary>
            Thrown when the drawing file cannot be opened.
            </summary>
            <remarks>
            This is thrown when the DWGÂ® file cannot be opened for any reason.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Exceptions.FileCorruptException">
            <summary>
            Thrown if the drawing file is corrupt or invalid for any reason.
            </summary>
            <remarks>
            If, at some point, during the parsing of the drawing file, data is found that
            is inconsistent with the requirements of the DWGÂ® format this exception
            will be thrown.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">
            <summary>
            Thrown if the key is not found in the dictionary or list.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Exceptions.InvalidXRecordException">
            <summary>
            Thrown if an unrecognized type value is found in the XRecord object.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Exceptions.EntityDatabaseEOF">
            <summary>
            Thrown when a NextPage is attempted and there are no more pages.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Exceptions.EntityDatabaseBOF">
            <summary>
            Thrown when a PreviousPage is attempted and the current page is 1.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Exceptions.DuplicateKeysFound">
            <summary>
            Thrown when more than one object exists with the same key value.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Exceptions.ObjectDoesNotExist">
            <summary>
            Thrown if handle is not found in the object pool
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Exceptions.ObjectTypeMismatch">
            <summary>
            Thrown if the object found does not match the type requested.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Exceptions.UnknownObject">
            <summary>
            Thrown if the object code is not understood.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.RasterImageDef">
            <summary>
            A raster image definition object.
            </summary>
            <remarks>
            This objects defines the actual image file that is displayed by a 
            <see cref="T:ComponentIngenuity.Ivan.RasterImage"/> entity.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImageDef.FilePath">
            <summary>
            Specifies the file path to the image file.
            </summary>
            <value>
            A string containing the file path.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImageDef.Height">
            <summary>
            Specifies the height of the image.
            </summary>
            <value>
            A double representing the height of image in pixels.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImageDef.Width">
            <summary>
            Specifies the width of the image.
            </summary>
            <value>
            A double representing the width of image in pixels.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImageDef.IsLoaded">
            <summary>
            Specifies if image is loaded.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the image is loaded
            <br/>
            <b>false</b> - the image is unloaded
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImageDef.ResolutionUnits">
            <summary>
            Specifies the resolution units of the image.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.ImageResolutionUnits"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImageDef.PixelHeight">
            <summary>
            Specifies the default height of one pixel.
            </summary>
            <value>
            A double representing the height in drawing units.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImageDef.PixelWidth">
            <summary>
            Specifies the default width of one pixel.
            </summary>
            <value>
            A double representing the width in drawing units.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImageDef.ClassVersion">
            <summary>
            Specifies the class version of the image.
            </summary>
            <value>
            An int value containing the version.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Text">
            <summary>
            A single-line text entity.
            </summary>
            This object represents a single line of text.
        </member>
        <member name="P:ComponentIngenuity.Ivan.Text.InsertionPoint">
            <summary>
            Specifies the location of the text.
            </summary>
            <value>
            A Point3d defining the location.
            </value>
            <remarks>
            The <see cref="P:ComponentIngenuity.Ivan.Text.HorizontalAlignment"/> property setting determines if the
            InsertionPoint, the <see cref="P:ComponentIngenuity.Ivan.Text.TextAlignmentPoint"/> or both are used to
            position the text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Text.Alignment">
            <summary>
            A combined specification of both the horizontal and vertical alignment of
            the text.
            </summary>
            <value>
            An <see cref="P:ComponentIngenuity.Ivan.Text.Alignment"/> enum specifying the alignment.
            </value>
            <remarks>
            The text has two alignment properties, <see cref="P:ComponentIngenuity.Ivan.Text.HorizontalAlignment"/>
            and <see cref="P:ComponentIngenuity.Ivan.Text.VerticalAlignment"/>.  This property is a single value that
            is used to represent both settings.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Text.HorizontalAlignment">
            <summary>
            The horizontal alignment of the text.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Text.HorizontalAlignment"/> enum.
            </value>
            <remarks>
            Text with this property set to HorizontalAlignment.Left use the
            <see cref="P:ComponentIngenuity.Ivan.Text.InsertionPoint"/> property to position the text.
            <br/><br/>
            Text with this property set to HorizontalAlignment.Aligned or
            HorizontalAlignment.Fit use both, the <see cref="P:ComponentIngenuity.Ivan.Text.InsertionPoint"/> property and
            the <see cref="P:ComponentIngenuity.Ivan.Text.TextAlignmentPoint"/> property to position the text.
            <br/><br/>
            Text with this property set to any other value use the
            <see cref="P:ComponentIngenuity.Ivan.Text.TextAlignmentPoint"/> property to position the text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Text.VerticalAlignment">
            <summary>
            The vertical alignment of the text.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Text.VerticalAlignment"/> enum.
            </value>
            <remarks>
            This property is combined with the <see cref="P:ComponentIngenuity.Ivan.Text.HorizontalAlignment"/>
            property to position the text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Text.IsBackward">
            <summary>
            Indicates the direction of the text.
            </summary>
            <value>
            A boolean value, <b>true</b> if the text backward, <b>false</b> if it is forward.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Text.IsUpsideDown">
            <summary>
            Indicates the direction of the text.
            </summary>
            <value>
            A boolean value, <b>true</b> if the text upside down, <b>false</b> if it is not.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Text.Height">
            <summary>
            The height of the text.
            </summary>
            <value>
            A double expressing the height of the text in current drawing units.
            </value>
            <remarks>
            This property is used as a scale factor for both the height and the width
            of the text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Text.Normal">
            <summary>
            Unit normal vector to the surface of the plane of the text.
            </summary>
            <value>
            A Point3d whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Text.ObliqueAngle">
            <summary>
            The oblique angle of the text.
            </summary>
            <value>
            A double value representing the angle in radians.
            </value>
            <remarks>
            This angle is the degree to which the text slants to the right or to the
            left from vertical.  Positive values are to the right, negative values
            are to the left.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Text.Rotation">
            <summary>
            The rotation of the text.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            The angle is relative to the x axis with counter-clockwise representing
            the positive direction.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Text.ScaleFactor">
            <summary>
            Scale factor for the text.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            This value is applied to the width of the text to adjust its
            horizontal size.  Positive values increase its size, negative values
            decrease its size.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Text.TextString">
            <summary>
            Specifies the actual text of the entity.
            </summary>
            <value>
            A string object containing the text.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Text.Style">
            <summary>
            The text style object for the text.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.TextStyle"/> object.
            </value>
            <remarks>
            This will be one of the text style objects in the <see cref="P:ComponentIngenuity.Ivan.Drawing.TextStyles"/>
            collection and specifies the font information used for the text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Text.Thickness">
            <summary>
            The thickness of the text.
            </summary>
            <value>
            A double. 
            </value>
            <remarks>
            The thickness it the extrusion of the text in the z direction.  This
            direction is defined by the <see cref="P:ComponentIngenuity.Ivan.Text.Normal"/> property.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Text.TextAlignmentPoint">
            <summary>
            Specifies where to place the text.
            </summary>
            <value>
            A Point3D defining the location.
            </value>
            <remarks>
            The <see cref="P:ComponentIngenuity.Ivan.Text.HorizontalAlignment"/> property setting determines if the
            <see cref="P:ComponentIngenuity.Ivan.Text.InsertionPoint"/>, the TextAlignmentPoint or both are used to
            position the text.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Leader">
            <summary>
            A leader entity.
            </summary>
            <remarks>
            A leader is a segment with an arrowhead on one end used to attach
            annotation to geometries.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Leader.Points">
            <summary>
            The point collection.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3dList"/> object.
            </value>
            <remarks>
            This collection holds the vertices that connected define the leader.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Leader.AnnotationType">
            <summary>
            Specifies the type of annotation for the leader.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Leader.AnnotationType"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Leader.Type">
            <summary>
            Specifies the type of leader line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.LeaderType"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Leader.EndPointProjection">
            <summary>
            Specifies the end point projection for the leader.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
            <remarks>
            A non-planar leader gives a point that projects the endpoint back to the
            annotation.  It's the offset from the endpoint of the leader to the
            annotation, taking into account the extrusion direction.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Leader.Normal">
            <summary>
            Unit normal vector to the surface formed by the leader.
            </summary>
            <value>
            A Point3D whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the leader.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Leader.Annotation">
            <summary>
            Gets the annotation object for the leader.
            </summary>
            <value>
            An <see cref="T:ComponentIngenuity.Ivan.DrawingEntity"/> object containing the annotation.
            </value>
            <remarks>
            The type of object returned depends on the value of the <see cref="P:ComponentIngenuity.Ivan.Leader.AnnotationType"/>
            property.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Leader.TextHeight">
            <summary>
            Gets the height of text annotation for the leader.
            </summary>
            <value>
            A double containing the height.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Leader.TextWidth">
            <summary>
            Gets the width of text annotation for the leader.
            </summary>
            <value>
            A double containing the width.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Leader.HorizontalDirection">
            <summary>
            Specifies the horizontal direction vector for the leader.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Leader.IsHookLineOnXDir">
            <summary>
            Specifies the horizontal direction of the hook line is along the 
            HorizontalDirection.
            </summary>
            <value>
            A bool object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Leader.DimStyle">
            <summary>
            The DimStyle object.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Leader.DimStyle"/> object.
            </value>
            <remarks>
            This is the <see cref="P:ComponentIngenuity.Ivan.Leader.DimStyle"/> object that defines the appearance
            for the Leader.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Leader.HasOverrides">
            <summary>
            Indicates if the Leader has dimstyle property overrides.
            </summary>
            <value>
            A bool.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Leader.Overrides">
            <summary>
            A list of the Leader's dimstyle overrides.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.DimStyleOverrideList"/>.
            </value>
            <remarks>
            If <see cref="P:ComponentIngenuity.Ivan.Leader.HasOverrides"/> is true, then this list will contain the overrides.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.LayerList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.Layer"/> objects accessible by index, name or 
            unique id.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.LayerList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.LayerList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.Layer"/> from the list corresponding to the specified 
            UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Layer"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The Layer is not in the List.</exception>
        </member>
        <member name="M:ComponentIngenuity.Ivan.LayerList.GetItemsByName(System.String)">
            <summary>
            Returns all the <see cref="T:ComponentIngenuity.Ivan.Layer"/> objects in the list that have the 
            specified name.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns a <see cref="T:ComponentIngenuity.Ivan.LayerList"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LayerList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LayerList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Layer"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Layer"/> object at the specified index.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LayerList.Item(System.String)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Layer"/> with the specified name in the list.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Layer"/> object with the specified name.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The Layer is not in the List.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.DuplicateKeysFound">More than one Layer matched the Name.  Use GetItemsByName(name).</exception>
        </member>
        <member name="T:ComponentIngenuity.Ivan.PolygonMeshVertexList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.PolygonMeshVertex"/> objects accessible by 
            index or unique id.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.PolygonMeshVertexList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.PolygonMeshVertexList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.PolygonMeshVertex"/> from the list corresponding to the 
            specified UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.PolygonMeshVertex"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The PolygonMeshVertex is not in the List.</exception>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PolygonMeshVertexList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PolygonMeshVertexList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.PolygonMeshVertex"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.PolygonMeshVertex"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.ControlPoint3dList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.ControlPoint3d"/> objects accessible by index.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.ControlPoint3dList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ControlPoint3dList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ControlPoint3dList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.ControlPoint3d"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.ControlPoint3d"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.XRecord">
            <summary>
            An xrecord object.
            </summary>
            <remarks>
            XRecord objects are used to store and manage arbitrary data.  They are
            named objects and can be found as items in a <see cref="T:ComponentIngenuity.Ivan.Dictionary"/>
            or another xrecord.  An xrecord consists of a collection of data items
            of various types.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.XRecord.DataItems">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.XRecordDataItem"/> objects.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.XRecordDataItemList"/> object.
            </value>
            <remarks>
            This is a list of type, value pairs.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Tolerance">
            <summary>
            A tolerance entity.
            </summary>
            <remarks>
            This is a geometric tolerance used in CAD drawings.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Tolerance.TextString">
            <summary>
            Specifies the actual text of the tolerance.
            </summary>
            <value>
            A string representing the visual representation of the tolerance.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Tolerance.InsertionPoint">
            <summary>
            Specifies the insertion point of the tolerance.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> defining the location.
            </value>
            <remarks>
            This is the lower-left corner of the tolerance.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Tolerance.DirectionVector">
            <summary>
            Specifies the direction vector of the tolerance.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object representing the vector.  
            </value>
            <remarks>
            The direction vector is used to establish the rotation of the tolerance.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Tolerance.Normal">
            <summary>
            Unit normal vector to the surface formed by the tolerance.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> whose properties represent the magnitudes of the 3D
            normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the tolerance.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Tolerance.DimStyle">
            <summary>
            The DimStyle object.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Tolerance.DimStyle"/> object.
            </value>
            <remarks>
            This is the <see cref="P:ComponentIngenuity.Ivan.Tolerance.DimStyle"/> object that defines the appearance
            for the Tolerance.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Tolerance.HasOverrides">
            <summary>
            Indicates if the Leader has dimstyle property overrides.
            </summary>
            <value>
            A bool.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Tolerance.Overrides">
            <summary>
            A list of the Leader's dimstyle overrides.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.DimStyleOverrideList"/>.
            </value>
            <remarks>
            If <see cref="P:ComponentIngenuity.Ivan.Tolerance.HasOverrides"/> is true, then this list will contain the overrides.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.HatchPolylineSegment">
            <summary>
            A polyline hatch path segment.
            </summary>
            <remarks>
            This segment of the path is part of a lightweight polyline.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchPolylineSegment.IsClosed">
            <summary>
            Specifies if the polyline is closed.
            </summary>
            <value>
            A boolean value, <b>true</b> if the polyline is closed, <b>false</b> if it is not.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchPolylineSegment.Vertices">
            <summary>
            The collection of <see cref="T:ComponentIngenuity.Ivan.LightweightVertex"/> objects defining the
            vertices for the polyline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.LightweightVertexList"/> object.
            </value>
            <remarks>
            The polyline is drawn thru each vertex.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Ellipse">
            <summary>
            An ellipse or an elliptical arc entity.
            </summary>
            <remarks>
            The ellipse object can be open, an arc, or it can be closed, a full ellipse.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Ellipse.Area">
            <summary>
            Area of the ellipse.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            If the angle of the ellipse is less then 180 degress this property is the 
            area of the segment formed by connecting the <see cref="P:ComponentIngenuity.Ivan.Ellipse.StartPoint"/>
            and the <see cref="P:ComponentIngenuity.Ivan.Ellipse.EndPoint"/>.  If the angle of the ellipse is 180 degrees
            or greater this property is the portion of the elliptical area that remains 
            by removing the segment of the ellipse defined by connecting the
            <see cref="P:ComponentIngenuity.Ivan.Ellipse.StartPoint"/> and the <see cref="P:ComponentIngenuity.Ivan.Ellipse.EndPoint"/>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Ellipse.Center">
            <summary>
            The center of the ellipse.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Ellipse.Normal">
            <summary>
            Unit normal vector to the surface formed by the ellipse.
            </summary>
            <value>
            A Point3d whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the ellipse.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Ellipse.RadiusRatio">
            <summary>
            Ratio of the minor radius to the major radius.
            </summary>
            <value>
            A double representing the ratio.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Ellipse.StartAngle">
            <summary>
            The start angle of the ellipse.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            A horizontal ray stemming from the <see cref="P:ComponentIngenuity.Ivan.Ellipse.Center"/> to the right would 
            represent an angle of 0 radians.  Moving counter-clockwise along the ellipse, 
            starting at 0 radians and stopping at the <see cref="P:ComponentIngenuity.Ivan.Ellipse.StartPoint"/> defines
            the start angle.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Ellipse.EndAngle">
            <summary>
            The end angle of the ellipse.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            A horizontal ray stemming from the <see cref="P:ComponentIngenuity.Ivan.Ellipse.Center"/> to the right would 
            represent an angle of 0 radians.  Moving counter-clockwise along the ellipse, 
            starting at 0 radians and stopping at the <see cref="P:ComponentIngenuity.Ivan.Ellipse.EndPoint"/> defines
            the end angle.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Ellipse.MajorAxis">
            <summary>
            The direction of the major axis of the ellipse.
            </summary>
            <value>
            A Point3d representing the vector of the major axis.
            </value>
            <remarks>
            The major axis is the longer axis of the ellipse.  This vector defines the
            magnitude and direction of the <see cref="P:ComponentIngenuity.Ivan.Ellipse.MajorRadius"/>.  The origin of the vector is the
            center of the ellipse.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Ellipse.MinorAxis">
            <summary>
            The minor axis of the ellipse.
            </summary>
            <value>
            A Point3d representing the vector of the minor axis.
            </value>
            <remarks>
            The minor axis is the shorter axis of the ellipse.  This vector defines the
            magnitude and direction of the <see cref="P:ComponentIngenuity.Ivan.Ellipse.MinorRadius"/>.  The origin of the vector is the
            center of the ellipse.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Ellipse.MajorRadius">
            <summary>
            The length of the major radius of the ellipse.
            </summary>
            <value>
            A double representing the length of the radius.
            </value>
            <remarks>
            The major radius is defined by the <see cref="P:ComponentIngenuity.Ivan.Ellipse.MajorAxis"/> property.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Ellipse.MinorRadius">
            <summary>
            The length of the minor radius of the ellipse.
            </summary>
            <value>
            A double representing the length of the radius.
            </value>
            <remarks>
            The minor radius is defined by the <see cref="P:ComponentIngenuity.Ivan.Ellipse.MinorAxis"/> property.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Ellipse.StartPoint">
            <summary>
            The start point of the ellipse.
            </summary>
            <value>
            A Point3d representing the start point of the ellipse.
            </value>
            <remarks>
            The ellipse is drawn counter-clockwise from the StartPoint to
            the <see cref="P:ComponentIngenuity.Ivan.Ellipse.EndPoint"/>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Ellipse.EndPoint">
            <summary>
            The end point of the ellipse.
            </summary>
            <value>
            A Point3d representing the end point of the ellipse.
            </value>
            <remarks>
            The ellipse is drawn counter-clockwise from the <see cref="P:ComponentIngenuity.Ivan.Ellipse.StartPoint"/> to
            the EndPoint.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Vertex2dList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.Vertex2d"/> objects accessible by index or 
            unique id.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.Vertex2dList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.Vertex2dList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.Vertex2d"/> from the list corresponding to the specified 
            UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Vertex2d"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The Vertex2d is not in the List.</exception>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Vertex2dList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Vertex2dList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Vertex2d"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Vertex2d"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Point2dList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.Point2d"/> objects accessible by index.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.Point2dList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Point2dList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Point2dList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Point2d"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.LightweightVertexList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.LightweightVertex"/> objects accessible by index.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.LightweightVertexList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LightweightVertexList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LightweightVertexList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.LightweightVertex"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.LightweightVertex"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.ColorList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.Color"/> objects accessible by index.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.ColorList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ColorList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ColorList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Color"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Color"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.PlotStyle">
            <summary>
            An object that holds the PlotStyle name.
            </summary>
            <remarks>
            In AutoCADÂ® PlotStyle configuration files can be created to influence the
            way the drawing appears when plotted.  These configurations are named so they
            can be referenced.
            </remarks>
        </member>
        <member name="M:ComponentIngenuity.Ivan.PlotStyle.SetByLayer">
            <summary>
            Sets the PlotStyle IsByLayer property to true.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.PlotStyle.SetByBlock">
            <summary>
            Sets the PlotStyle IsByBlock property to true.
            </summary>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotStyle.Name">
            <summary>
            The name of the plotstyle.
            </summary>
            <value>
            A string representing the plotstyle name.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotStyle.IsByLayer">
            <summary>
            Indicates if the plotstyle is to be determine by the entity's layer.
            </summary>
            <value>
            A bool.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PlotStyle.IsByBlock">
            <summary>
            Indicates if the plotstyle is to be determine by the entity's BlockReference.
            </summary>
            <value>
            A bool.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.RegisteredObject">
            <summary>
            A custom registered object.
            </summary>
            <remarks>
            Third party applications that interface with AutoCADÂ® will build objects
            that are specific to their application.  These objects are represented
            in Ivan as RegisteredObject.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RegisteredObject.AppName">
            <summary>
            The name of the registered application that hosts this class.
            </summary>
            <value>
            A string.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RegisteredObject.ClassName">
            <summary>
            The name of the class for the object.
            </summary>
            <remarks>
            This is the name of the object type for the custom object.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Group">
            <summary>
            A group object.
            </summary>
            <remarks>
            A group is named selection set of entities.  They allow objects to be grouped
            like blocks, except the objects retain the ability to be edited individually.
            </remarks>
        </member>
        <member name="M:ComponentIngenuity.Ivan.Group.GetEntities">
            <summary>
            Returns a collection of the grouped <see cref="T:ComponentIngenuity.Ivan.DrawingEntity"/> objects.
            </summary>
            <returns>
            A <see cref="T:ComponentIngenuity.Ivan.DrawingEntityList"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Group.Name">
            <summary>
            The name of the group.
            </summary>
            <value>
            A string containing the name of the group.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Group.Description">
            <summary>
            The description of the group.
            </summary>
            <value>
            A string containing a descriptive term for the group.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Group.IsUnnamed">
            <summary>
            Specifies if the grouped has a name.
            </summary>
            <value>
            A boolean value, <b>true</b> if the group has no name, <b>false</b> if it does.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Group.IsSelectable">
            <summary>
            Specifies if the group is selectable.
            </summary>
            <value>
            A boolean value, <b>true</b> if the group can be selected, <b>false</b> if it cannot.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.MInsertBlockReference">
            <summary>
            A multi-insert block entity.
            </summary>
            <remarks>
            This entity is similar to a <see cref="T:ComponentIngenuity.Ivan.BlockReference"/> except that it
            provides for the multiple placement of the <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/>
            in a rectangular array.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block">
            <summary>
            The block that is being referenced.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/> object.
            </value>
            <remarks>
            Every BlockReference refers to a <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/> object.  There can
            be many BlockReferences for a single <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MInsertBlockReference.Name">
            <summary>
            The name of the <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/> being referenced.
            </summary>
            <value>
            A string.
            </value>
            <remarks>
            This is the same as the name of the <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/> that is being
            referenced.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MInsertBlockReference.HasAttributes">
            <summary>
            Specifies if the referenced block has attributes.
            </summary>
            <value>
            A boolean value, <b>true</b> if the block has attributes, <b>false</b> if it does not.
            </value>
            <remarks>
            If this property is true then the <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Attributes"/> property
            will contain the references.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MInsertBlockReference.Attributes">
            <summary>
            Collection of <see cref="T:ComponentIngenuity.Ivan.Attribute"/> entities.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.AttributeList"/> object.
            </value>
            <remarks>
            When a block containing attributes is inserted an Attribute is
            created for each <see cref="T:ComponentIngenuity.Ivan.AttributeDefinition"/> belonging to the block.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MInsertBlockReference.Rotation">
            <summary>
            The rotation of the inserted <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/>.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            The angle is relative to the x axis with counter-clockwise representing
            the positive direction.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MInsertBlockReference.XScaleFactor">
            <summary>
            The scale factor for the <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/> in the x direction.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            A value greater than 1.0 will stretch the <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/> in the x
            direction.  A value less than 1.0 will shrink the <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/> in
            the x direction.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MInsertBlockReference.YScaleFactor">
            <summary>
            The scale factor for the <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/> in the y direction.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            A value greater than 1.0 will stretch the <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/> in the y
            direction.  A value less than 1.0 will shrink the <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/> in
            the y direction.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MInsertBlockReference.ZScaleFactor">
            <summary>
            The scale factor for the <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/> in the z direction.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            A value greater than 1.0 will stretch the <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/> in the z
            direction.  A value less than 1.0 will shrink the <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/> in
            the z direction.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MInsertBlockReference.InsertionPoint">
            <summary>
            The insertion point for the <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/>.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
            <remarks>
            This is the point at which the <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/> is inserted into the drawing and
            it coincides with the origin of the <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MInsertBlockReference.Normal">
            <summary>
            Unit normal vector to the surface of the inserted <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/>.
            </summary>
            <value>
            A Point3d whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the inserted <see cref="P:ComponentIngenuity.Ivan.MInsertBlockReference.Block"/>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MInsertBlockReference.Rows">
            <summary>
            Specifies the number of rows in the rectangular array.
            </summary>
            <value>
            An int representing the count.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MInsertBlockReference.Columns">
            <summary>
            Specifies the number of columns in the rectangular array.
            </summary>
            <value>
            An int representing the count.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MInsertBlockReference.RowSpacing">
            <summary>
            Specifies the spacing between the rows of the rectangular array.
            </summary>
            <value>
            A double representing the spacing in drawing units.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MInsertBlockReference.ColumnSpacing">
            <summary>
            Specifies the spacing between the columns of the rectangular array.
            </summary>
            <value>
            A double representing the spacing in drawing units.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.ArcDimension">
            <summary>
            A arc dimension.
            </summary>
            <remarks>
            Arc dimensions measure the distance along an arc or polyline arc segment.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ArcDimension.CurvePoint">
            <summary>
            Specifies point on the circle or arc of the dimension.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
            <remarks>
            This is the first point of the dimension line and lies on the circle or
            arc.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ArcDimension.ExtensionLine1EndPoint">
            <summary>
            Specifies the end point for the first extension line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>
            </value>
            <remarks>
            This property describes where the end point of the extension line away
            from the object being measured.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ArcDimension.ExtensionLine2EndPoint">
            <summary>
            Specifies the end point for the second extension line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>
            </value>
            <remarks>
            This property describes where the end point of the extension line away
            from the object being measured.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ArcDimension.CenterPoint">
            <summary>
            Specifies center of the circle or arc of the dimension.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ArcDimension.IsPartial">
            <summary>
            Specifies if the arc-length dimension is a a partial arc.
            </summary>
            <value>
            A bool.
            </value>
            <remarks>
            True if only a portion of the arc is being measured.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ArcDimension.StartAngle">
            <summary>
            Specifies the start angle of the definition arc.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            The angle is in radians.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ArcDimension.EndAngle">
            <summary>
            Specifies the end angle of the definition arc.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            The angle is in radians.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ArcDimension.HasLeader">
            <summary>
            Specifies if the arc-length dimension has an additioanl arc leader line.
            </summary>
            <value>
            A bool.
            </value>
            <remarks>
            The leader is drawn from the dimension line to the definition arc.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ArcDimension.ArcStartPoint">
            <summary>
            Specifies the start point of the definition arc.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ArcDimension.ArcEndPoint">
            <summary>
            Specifies the end point of the definition arc.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.TextStyle">
            <summary>
            A TextStyle object.
            </summary>
            <remarks>
            The TextStyle stores visual style attributes to be applied to text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.TextStyle.Name">
            <summary>
            The name of the TextStyle.
            </summary>
            <value>
            A string containing the name.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.TextStyle.IsVertical">
            <summary>
            Specifies if the text is vertical.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the text is vertical
            <br/>
            <b>false</b> - the text is horizontal
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.TextStyle.IsBackward">
            <summary>
            Specifies if the characters are displayed backward.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the text is displayed backward
            <br/>
            <b>false</b> - the text is not displayed backward
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.TextStyle.IsUpsideDown">
            <summary>
            Specifies if the characters are displayed upside-down.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the text is displayed upsidedown
            <br/>
            <b>false</b> - the text is not displayed upsidedown
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.TextStyle.IsShape">
            <summary>
            Specifies if the shape file contains shapes.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - object is a shape file
            <br/>
            <b>false</b> - object is a text style
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.TextStyle.Height">
            <summary>
            Specifies the default text height for the text style.
            </summary>
            <value>
            A double representing the height of the upper case text.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.TextStyle.Width">
            <summary>
            Specifies the character spacing of the text for a text style.
            </summary>
            <value>
            A double representing the spacing from 0 to 100.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.TextStyle.ObliqueAngle">
            <summary>
            The oblique angle for text in a text style.
            </summary>
            <value>
            A double value representing the angle in radians.
            </value>
            <remarks>
            This angle is the degree to which the text slants to the right or to the
            left from vertical.  Positive values are to the right, negative values
            are to the left.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.TextStyle.LastHeight">
            <summary>
            Specifies the height of the last text inserted using this text style.
            </summary>
            <value>
            A double representing the height of the upper case text.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.TextStyle.FontFile">
            <summary>
            Specifies the name of the font file or the shape file.
            </summary>
            <value>
            A string containing the name of the file.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.TextStyle.BigFontFile">
            <summary>
            Specifies the name of the big font file.
            </summary>
            <value>
            A string containing the name of the file.
            </value>
            <remarks>
            If a character set is desired that exceeds the typical 256 ASCII standard
            then a special form of the shape file is needed that allows for one byte
            and two byte character codes.  These are referred to as big font files.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.ViewList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.View"/> objects accessible by index, name or 
            unique id.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.ViewList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.ViewList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.View"/> from the list corresponding to the specified 
            UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.View"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The View is not in the List.</exception>
        </member>
        <member name="M:ComponentIngenuity.Ivan.ViewList.GetItemsByName(System.String)">
            <summary>
            Returns all the <see cref="T:ComponentIngenuity.Ivan.View"/> objects in the list that have the 
            specified name.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns a <see cref="T:ComponentIngenuity.Ivan.ViewList"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ViewList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ViewList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.View"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.View"/> object at the specified index.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ViewList.Item(System.String)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.View"/> with the specified name in the list.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.View"/> object with the specified name.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The View is not in the List.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.DuplicateKeysFound">More than one View matched the Name.  Use GetItemsByName(name).</exception>
        </member>
        <member name="T:ComponentIngenuity.Ivan.DictionaryVar">
            <summary>
            A dictionary variable object.
            </summary>
            <remarks>
            DictionaryVar objects are used as a low overhead way for AutoCADÂ® to store
            named values in the DWG file.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DictionaryVar.Value">
            <summary>
            The value of the dictionary variable.
            </summary>
            <value>
            A string.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Solid">
            <summary>
            A solid entity.
            </summary>
            <remarks>
            This is a solid filled polygon.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Solid.Vertex1">
            <summary>
            The first vertex of the solid.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object.
            </value>
            <remarks>
            Use the elevation property value for the Z component of all the vertices.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Solid.Vertex2">
            <summary>
            The second vertex of the solid.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object.
            </value>
            <remarks>
            Use the elevation property value for the Z component of all the vertices.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Solid.Vertex3">
            <summary>
            The third vertex of the solid.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object.
            </value>
            <remarks>
            Use the elevation property value for the Z component of all the vertices.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Solid.Vertex4">
            <summary>
            The fourth vertex of the solid.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object.
            </value>
            <remarks>
            Use the elevation property value for the Z component of all the vertices.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Solid.Thickness">
            <summary>
            The thickness of the solid.
            </summary>
            <value>
            A double. 
            </value>
            <remarks>
            The thickness it the extrusion of the solid in the z direction.  This
            direction is defined by the <see cref="P:ComponentIngenuity.Ivan.Solid.Normal"/> property.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Solid.Elevation">
            <summary>
            The elevation of the solid.
            </summary>
            <value>
            A double representing the elevation.
            </value>
            <remarks>
            The elevation is the z coordinate for the plane of the object.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Solid.Normal">
            <summary>
            Unit normal vector to the surface formed by the solid.
            </summary>
            <value>
            A Point3d whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the solid.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.RasterImage">
            <summary>
            A raster image entity.
            </summary>
            <remarks>
            This object represents a bounded area containing the rasterization of an
            image file.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImage.BoundryType">
            <summary>
            Specifies the boundry type of the raster image.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.ImageBoundryType"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImage.Vertices">
            <summary>
            Specifies the vertices of the bounding object for the image.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2dList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImage.ImageDef">
            <summary>
            Specifies the image definition for the raster image.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.RasterImageDef"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImage.Height">
            <summary>
            Specifies the height of the image.
            </summary>
            <value>
            A double representing the height in drawing units.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImage.Width">
            <summary>
            Specifies the width of the image.
            </summary>
            <value>
            A double representing the width in drawing units.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImage.Rotation">
            <summary>
            The rotation of the image.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            The angle is relative to the x axis with counter-clockwise representing
            the positive direction.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImage.ShowImage">
            <summary>
            Specifies if the image should be displayed.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - show the image
            <br/>
            <b>false</b> - hide the image
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImage.Brightness">
            <summary>
            Specifies the brightness of the image.
            </summary>
            <value>
            An int value ranging from 0 to 100.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImage.ShowClipped">
            <summary>
            Specifies if the image should be displayed as clipped.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - clip the image
            <br/>
            <b>false</b> - ignore the clip region and show total image
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImage.Contrast">
            <summary>
            Specifies the contrast of the image.
            </summary>
            <value>
            An int value ranging from 0 to 100.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImage.Fade">
            <summary>
            Specifies the fade of the image.
            </summary>
            <value>
            An int value ranging from 0 to 100.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImage.ShowRotation">
            <summary>
            Specifies if the image should be displayed rotated.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - rotate the image
            <br/>
            <b>false</b> - ignore the rotation angle and image at 0 degrees
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImage.TransparencyOn">
            <summary>
            Specifies if image transparency is on.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - transparency is on
            <br/>
            <b>false</b> - transparency is off
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImage.ClassVersion">
            <summary>
            Specifies the class version of the image.
            </summary>
            <value>
            An int value containing the version.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImage.InsertionPoint">
            <summary>
            Specifies the insertion point of the image.
            </summary>
            <value>
            A Point3d defining the location.
            </value>
            <remarks>
            This is the lower-left corner of the image.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImage.UDirection">
            <summary>
            Specifies u direction vector for the image.
            </summary>
            <value>
            A Point3d containing the vector.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImage.VDirection">
            <summary>
            Specifies v direction vector for the image.
            </summary>
            <value>
            A Point3d containing the vector.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RasterImage.IsClipped">
            <summary>
            Specifies if image is clipped by its bounding area.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the image is clipped
            <br/>
            <b>false</b> - the image is not clipped
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.MLineParmSet">
            <summary>
            A mline parameter set object.
            </summary>
            <remarks>
            The parameter sets are used to determine how to draw the mitres and fills
            about the vertex points of the mline.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineParmSet.SegmentParameters">
            <summary>
            A collection of doubles containing mitre information.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.DoubleList"/>.
            </value>
            <remarks>
            Consult the AutoCADÂ® DXFÂ® documentation for an explanation of how
            these values are applied.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineParmSet.AreaFillParameters">
            <summary>
            A collection of doubles containing mitre fill information.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.DoubleList"/> of doubles.
            </value>
            <remarks>
            Consult the AutoCADÂ® DXFÂ® documentation for an explanation of how
            these values are applied.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Circle">
            <summary>
            A circle entity.
            </summary>
            <remarks>
            This is a geometric circle.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Circle.Center">
            <summary>
            The center of the circle.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Circle.Radius">
            <summary>
            The radius of the circle.
            </summary>
            <value>
            A double.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Circle.Diameter">
            <summary>
            The diameter of the circle.
            </summary>
            <value>
            A double.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Circle.Circumference">
            <summary>
            The circumference of the circle.
            </summary>
            <value>
            A double.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Circle.Area">
            <summary>
            The area of the circle.
            </summary>
            <value>
            A double.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Circle.Thickness">
            <summary>
            The thickness of the circle.
            </summary>
            <value>
            A double. 
            </value>
            <remarks>
            The thickness it the extrusion of the circle in the z direction.  This
            direction is defined by the <see cref="P:ComponentIngenuity.Ivan.Circle.Normal"/> property.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Circle.Normal">
            <summary>
            Unit normal vector to the surface formed by the circle.
            </summary>
            <value>
            A Point3d whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the circle.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Attribute">
            <summary>
            An instance of an Attribute.
            </summary>
            <remarks>
            The <see cref="T:ComponentIngenuity.Ivan.AttributeDefinition"/> class represents the definition of an attribute.
            When an actual instance of an attribute is created and placed in the
            drawing this is referred to as an Attribute.  It is an instantiation
            of an attribute definition.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.InsertionPoint">
            <summary>
            Specifies where to place the attribute.
            </summary>
            <value>
            A Point3D defining the location.
            </value>
            <remarks>
            The <see cref="P:ComponentIngenuity.Ivan.Attribute.HorizontalAlignment"/> property setting determines if the
            InsertionPoint, the <see cref="P:ComponentIngenuity.Ivan.Attribute.TextAlignmentPoint"/> or both are used to
            position the attribute.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.Alignment">
            <summary>
            A combined specification of both the horizontal and vertical alignment of
            the attribute.
            </summary>
            <value>
            An <see cref="P:ComponentIngenuity.Ivan.Attribute.Alignment"/> enum specifying the alignment.
            </value>
            <remarks>
            The attribute has two alignment properties, <see cref="P:ComponentIngenuity.Ivan.Attribute.HorizontalAlignment"/>
            and <see cref="P:ComponentIngenuity.Ivan.Attribute.VerticalAlignment"/>.  This property is a single value that
            is used to represent both settings.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.HorizontalAlignment">
            <summary>
            The horizontal alignment of the attribute text.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Attribute.HorizontalAlignment"/> enum.
            </value>
            <remarks>
            Attributes with this property set to HorizontalAlignment.Left use the
            <see cref="P:ComponentIngenuity.Ivan.Attribute.InsertionPoint"/> property to position the text.
            <br/><br/>
            Attributes with this property set to HorizontalAlignment.Aligned or
            HorizontalAlignment.Fit use both, the <see cref="P:ComponentIngenuity.Ivan.Attribute.InsertionPoint"/> property and
            the <see cref="P:ComponentIngenuity.Ivan.Attribute.TextAlignmentPoint"/> property to position the text.
            <br/><br/>
            Attributes with this property set to any other value use the
            <see cref="P:ComponentIngenuity.Ivan.Attribute.TextAlignmentPoint"/> property to position the text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.VerticalAlignment">
            <summary>
            The vertical alignment of the attribute.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Attribute.VerticalAlignment"/> enum.
            </value>
            <remarks>
            This property is combined with the <see cref="P:ComponentIngenuity.Ivan.Attribute.HorizontalAlignment"/>
            property to position the attribute.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.IsInvisible">
            <summary>
            Indicates if the attribute should remain invisible when inserted.
            </summary>
            <value>
            A boolean value.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.IsConstant">
            <summary>
            Indicates that the attribute has a fixed value.
            </summary>
            <value>
            A boolean value.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.IsVerify">
            <summary>
            Indicates verification is required upon input.
            </summary>
            <value>
            A boolean value.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.IsPreset">
            <summary>
            Indicates the attribute value is preset, and no input prompt is displayed.
            </summary>
            <value>
            A boolean value.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.IsBackward">
            <summary>
            Indicates the direction of the attribute text.
            </summary>
            <value>
            A boolean value, <b>true</b> if the text backward, <b>false</b> if it is forward.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.IsUpsideDown">
            <summary>
            Indicates the direction of the attribute text.
            </summary>
            <value>
            A boolean value, <b>true</b> if the text upside down, <b>false</b> if it is not.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.Height">
            <summary>
            The height of the attribute text.
            </summary>
            <value>
            A double expressing the height of the text in current drawing units.
            </value>
            <remarks>
            This property is used as a scale factor for both the height and the width
            of the text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.Normal">
            <summary>
            Unit normal vector to the surface of the plane of the attribute.
            </summary>
            <value>
            A Point3D whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the attribute.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.ObliqueAngle">
            <summary>
            The oblique angle of the attribute reference.
            </summary>
            <value>
            A double value representing the angle in radians.
            </value>
            <remarks>
            This angle is the degree to which the text slants to the right or to the
            left from vertical.  Positive values are to the right, negative values
            are to the left.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.Rotation">
            <summary>
            The rotation of the attribute.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            The angle is relative to the x axis with counter-clockwise representing
            the positive direction.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.ScaleFactor">
            <summary>
            Scale factor for the attribute.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            This value is applied to the width of the attribute to adjust its
            horizontal size.  Positive values increase its size, negative values
            decrease its size.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.Value">
            <summary>
            The value for the attribute.
            </summary>
            <value>
            A string.
            </value>
            <remarks>
            Attribute references maintain the tag/value pairs introduced by attributes.
            This is the value that was entered for the attribute when the block was
            placed in the drawing.  It is retrieved using the <see cref="P:ComponentIngenuity.Ivan.Attribute.Tag"/>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.Tag">
            <summary>
            The tag for the attribute.
            </summary>
            <value>
            A string.
            </value>
            <remarks>
            When a block, with an associated <see cref="T:ComponentIngenuity.Ivan.AttributeDefinition"/>, is inserted into
            a drawing, the user responds to the prompt with a value.  This value is placed in the
            corresonding <see cref="T:ComponentIngenuity.Ivan.Attribute"/> object.  The value is given this Tag property so
            that it can be retrieved under this name.  Attributes allow for the persistence of
            tag/value pairs.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.Style">
            <summary>
            The text style object for the attribute text.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.TextStyle"/> object.
            </value>
            <remarks>
            This will be one of the text style objects in the <see cref="P:ComponentIngenuity.Ivan.Drawing.TextStyles"/>
            collection and specifies the font information used for the text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.Thickness">
            <summary>
            The thickness of the attribute.
            </summary>
            <value>
            A double. 
            </value>
            <remarks>
            The thickness it the extrusion of the attribute text in the z direction.  This
            direction is defined by the <see cref="P:ComponentIngenuity.Ivan.Attribute.Normal"/> property.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Attribute.TextAlignmentPoint">
            <summary>
            Specifies where to place the attribute.
            </summary>
            <value>
            A Point3D defining the location.
            </value>
            <remarks>
            The <see cref="P:ComponentIngenuity.Ivan.Attribute.HorizontalAlignment"/> property setting determines if the
            <see cref="P:ComponentIngenuity.Ivan.Attribute.InsertionPoint"/>, the TextAlignmentPoint or both are used to
            position the attribute.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.ShapefileList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.Shapefile"/> objects accessible by index, name 
            or unique id, with read-only access.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.ShapefileList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.ShapefileList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.Shapefile"/> from the list corresponding to the specified 
            UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Shapefile"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The Shapefile is not in the List.</exception>
        </member>
        <member name="M:ComponentIngenuity.Ivan.ShapefileList.GetItemsByName(System.String)">
            <summary>
            Returns all the <see cref="T:ComponentIngenuity.Ivan.Shapefile"/> objects in the list that have the 
            specified name.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns a <see cref="T:ComponentIngenuity.Ivan.ShapefileList"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ShapefileList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ShapefileList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Shapefile"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Shapefile"/> object at the specified index.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ShapefileList.Item(System.String)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Shapefile"/> with the specified name in the list.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Shapefile"/> with the specified name.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The Shapefile is not in the List.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.DuplicateKeysFound">More than one Shapefile matched the Name.  Use GetItemsByName(name).</exception>
        </member>
        <member name="T:ComponentIngenuity.Ivan.GroupList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.Group"/> objects accessible by index, name or 
            unique id.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.GroupList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.GroupList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.Group"/> from the list corresponding to the specified 
            UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Group"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The Group is not in the List.</exception>
        </member>
        <member name="M:ComponentIngenuity.Ivan.GroupList.GetItemsByName(System.String)">
            <summary>
            Returns all the <see cref="T:ComponentIngenuity.Ivan.Group"/> objects in the list that have the 
            specified name.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns a <see cref="T:ComponentIngenuity.Ivan.GroupList"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.GroupList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.GroupList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Group"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Group"/> object at the specified index.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.GroupList.Item(System.String)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Group"/> with the specified name in the list.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Group"/> object with the specified name.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The Group is not in the List.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.DuplicateKeysFound">More than one Group matched the Name.  Use GetItemsByName(name).</exception>
        </member>
        <member name="T:ComponentIngenuity.Ivan.ControlPoint2dList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.ControlPoint2d"/> objects accessible by index.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.ControlPoint2dList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ControlPoint2dList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ControlPoint2dList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.ControlPoint2d"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.ControlPoint2d"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.PlaceHolder">
            <summary>
            A place holder object.
            </summary>
            <remarks>
            The PlaceHolder object is used by AutoCADÂ® to "hold" a position in a
            <see cref="T:ComponentIngenuity.Ivan.Dictionary"/> object.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Layout">
            <summary>
            A layout object.
            </summary>
            <remarks>
            The layout object is an encapsulation of plotter configuration information
            that is specifically associated with a <see cref="P:ComponentIngenuity.Ivan.Layout.Block"/> object.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Layout.Name">
            <summary>
            The name of the Layout.
            </summary>
            <value>
            A string containing the name.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Layout.Block">
            <summary>
            The block object associated with the layout.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Layout.Block"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Layout.TabOrder">
            <summary>
            Specifies the tab order of the layout.
            </summary>
            <value>
            An int containing the layout tab's position in the tab order.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Layout.LimitMin">
            <summary>
            Specifies the minimum coordinate for the limits of the layout.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> containing the lower-left coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Layout.LimitMax">
            <summary>
            Specifies the maximum coordinate for the limits of the layout.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> containing the upper-right coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Layout.InsertionBasePoint">
            <summary>
            Specifies the insertion base point for the layout.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> containing the point.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Layout.ExtentMin">
            <summary>
            Specifies the minimum coordinate for the exents of the layout.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> containing the lower-left coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Layout.ExtentMax">
            <summary>
            Specifies the maximum coordinate for the exents of the layout.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> containing the upper-right coordinate.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.MLineStyleElement">
            <summary>
            A mline style element object.
            </summary>
            <value>
            This object holds the properties for an individual line element in an
            mline.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyleElement.Offset">
            <summary>
            Specifies the offset of the line from the center of the mline.
            </summary>
            <value>
            A double representing the offset.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyleElement.Color">
            <summary>
            Color of the line element.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.MLineStyleElement.Color"/> object that specifies the color attributes.
            </value>
            <remarks>
            Colors can originate from an AutoCADÂ® Color Index (ACI), a True Color
            or a Color Book.  The TrueColor property exposes a <see cref="P:ComponentIngenuity.Ivan.MLineStyleElement.Color"/>
            object that can be used to get the ACI value or the RGB values.  In
            addition, if the color originates from a Color Book, it will provide
            the name of the Color Book as well as the particular entry selected
            from that book.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyleElement.Linetype">
            <summary>
            The linetype used to draw the line element.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.MLineStyleElement.Linetype"/> object.
            </value>
            <remarks>
            This property will be ByLayer, ByBlock, CONTINUOUS, or the name of one of
            the linetypes in the <see cref="P:ComponentIngenuity.Ivan.Drawing.Linetypes"/> collection.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.XLine">
            <summary>
            A xline entity.
            </summary>
            <remarks>
            The xline is a line segment which reaches infinitely in both directions.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.XLine.BasePoint">
            <summary>
            Specifies the starting point of the xline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.XLine.DirectionVector">
            <summary>
            Specifies the direction vector of the xline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object representing the vector.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Color">
            <summary>
            A color object.
            </summary>
            <remarks>
            A structure used to hold color information.
            <br/>
            In AutoCADÂ® colors can be chosen to be by Index, True Color or Color Book.
            <br/>
            Regardless of how the color object originated, the ACI, RGB, Red, Green and
            Blue properties will always be available and have valid values.
            </remarks>
        </member>
        <member name="M:ComponentIngenuity.Ivan.Color.SetTrueColor(System.UInt32,System.Int32)">
            <summary>
            Sets the TrueColor, RGB value of the Color object.
            </summary>
            <param name="trueColor">
            A uint specifying true color RGB value of the color.
            </param>
            <param name="colorIndex">
            An int specifying the AutoCADÂ® color index value.
            </param>
            <remarks>
            The AutoCADÂ® color index is manually entered thru this method.
            </remarks>
        </member>
        <member name="M:ComponentIngenuity.Ivan.Color.SetTrueColor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the TrueColor, RGB value of the Color object.
            </summary>
            <param name="red">
            An int specifying the red component of the RGB value.
            </param>
            <param name="green">
            An int specifying the green component of the RGB value.
            </param>
            <param name="blue">
            An int specifying the blue component of the RGB value.
            </param>
            <remarks>
            The AutoCADÂ® color index value will be derived from the color.
            </remarks>
        </member>
        <member name="M:ComponentIngenuity.Ivan.Color.SetNamedColor(System.String,System.String,System.Int32,System.Int32,System.Int32)">
            <summary>
            Sets the Color object to a Named Color.
            </summary>
            <param name="bookName">
            A string specifying the Color Book name.
            </param>
            <param name="colorName">
            A string specifying the Color Book entry name.
            </param>
            <param name="red">
            An int specifying the red component of the RGB value.
            </param>
            <param name="green">
            An int specifying the green component of the RGB value.
            </param>
            <param name="blue">
            An int specifying the blue component of the RGB value.
            </param>
            <remarks>
            The AutoCADÂ® color index value will be derived from the color.
            </remarks>
        </member>
        <member name="M:ComponentIngenuity.Ivan.Color.SetNamedColor(System.String,System.String,System.UInt32)">
            <summary>
            Sets the Color object to a Named Color.
            </summary>
            <param name="bookName">
            A string specifying the Color Book name.
            </param>
            <param name="colorName">
            A string specifying the Color Book entry name.
            </param>
            <param name="trueColor">
            A uint specifying true color RGB value of the color.
            </param>
            <remarks>
            The AutoCADÂ® color index value will be derived from the color.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Color.IsByBlock">
            <summary>
            Specifies if the color object represents a color setting of ByBlock.
            </summary>
            <value>
            A bool.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Color.IsByLayer">
            <summary>
            Specifies if the color object represents a color setting of ByLayer.
            </summary>
            <value>
            A bool.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Color.IsAciColor">
            <summary>
            Specifies if the color object orginated from an AutoCADÂ® Color Index (ACI).
            </summary>
            <value>
            A bool.
            </value>
            <remarks>
            In AutoCADÂ® colors can be chosen to be by Index, True Color or Color Book.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Color.IsTrueColor">
            <summary>
            Specifies if the color object originated from a True Color.
            </summary>
            <value>
            A bool.
            </value>
            <remarks>
            In AutoCADÂ® colors can be chosen to be by Index, True Color or Color Book.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Color.IsNamedColor">
            <summary>
            Specifies if the color object originated from a Color Book.
            </summary>
            <value>
            A bool.
            </value>
            <remarks>
            In AutoCADÂ® colors can be chosen to be by Index, True Color or Color Book.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Color.ColorIndex">
            <summary>
            The AutoCADÂ® Color Index (ACI) value of the color.
            </summary>
            <value>
            An int.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Color.TrueColor">
            <summary>
            The RGB value of the color.
            </summary>
            <value>
            An uint.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Color.Red">
            <summary>
            The Red component of the RGB value of the color.
            </summary>
            <value>
            An int.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Color.Green">
            <summary>
            The Green component of the RGB value of the color.
            </summary>
            <value>
            An int.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Color.Blue">
            <summary>
            The Blue component of the RGB value of the color.
            </summary>
            <value>
            An int.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Color.BookName">
            <summary>
            The Color Book name from which the color object originated.
            </summary>
            <value>
            A string.
            </value>
            <remarks>
            In AutoCADÂ® colors can be chosen to be by Index, True Color or Color Book.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Color.ColorName">
            <summary>
            The Color Book entry name from which the color object originated.
            </summary>
            <value>
            A string.
            </value>
            <remarks>
            In AutoCADÂ® colors can be chosen to be by Index, True Color or Color Book.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.LinetypePatternElementList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.LinetypePatternElement"/> objects accessible by index.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.LinetypePatternElementList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LinetypePatternElementList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LinetypePatternElementList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.LinetypePatternElement"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.LinetypePatternElement"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.ViewportList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.Viewport"/> objects accessible by index, name 
            or unique id.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.ViewportList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.ViewportList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.Viewport"/> from the list corresponding to the specified 
            UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Viewport"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The Viewport is not in the List.</exception>
        </member>
        <member name="M:ComponentIngenuity.Ivan.ViewportList.GetItemsByName(System.String)">
            <summary>
            Returns all the <see cref="T:ComponentIngenuity.Ivan.Viewport"/> objects in the list that have the 
            specified name.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns a <see cref="T:ComponentIngenuity.Ivan.ViewportList"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ViewportList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ViewportList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Viewport"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Viewport"/> object at the specified index.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ViewportList.Item(System.String)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Viewport"/> with the specified name in the list.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Viewport"/> with the specified name.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The Viewport is not in the List.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.DuplicateKeysFound">More than one Viewport matched the Name.  Use GetItemsByName(name).</exception>
        </member>
        <member name="T:ComponentIngenuity.Ivan.RegAppExtendedDataList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.RegAppExtendedData"/> objects accessible by 
            index or name.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.RegAppExtendedDataList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.RegAppExtendedDataList.GetItemsByName(System.String)">
            <summary>
            Returns all the <see cref="T:ComponentIngenuity.Ivan.RegAppExtendedData"/> objects in the list that have the 
            specified name.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns a <see cref="T:ComponentIngenuity.Ivan.RegAppExtendedDataList"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RegAppExtendedDataList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RegAppExtendedDataList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.RegAppExtendedData"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.RegAppExtendedData"/> object at the specified index.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RegAppExtendedDataList.Item(System.String)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.RegAppExtendedData"/> with the specified name in the list.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.RegAppExtendedData"/> object with the specified name.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The RegAppExtendedData is not in the List.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.DuplicateKeysFound">More than one RegAppExtendedData matched the Name.  Use GetItemsByName(name).</exception>
        </member>
        <member name="T:ComponentIngenuity.Ivan.DimStyle">
            <summary>
            An encapsulation of settings that determine the appearance of a dimension.
            </summary>
            <remarks>
            Generally, this object type exists to allow the user to define a set of
            preferences in how the dimensions are rendered.  The user may want different
            styles for different areas of the drawing. 
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.Name">
            <summary>
            The name of the dimstyle.
            </summary>
            <value>
            A string.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMPOST">
            <summary>
            Specifies the prefix or suffix for the primary dimension text.
            </summary>
            <value>
            A string value.
            </value>
            <remarks>
            A "&lt;&gt;" sequence is used to serve as a placeholder for the measurement
            text.  The prefix or suffix text is placed before or after the "&lt;&gt;", respectively.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMAPOST">
            <summary>
            Specifies the prefix or suffix for the alternate dimension text.
            </summary>
            <value>
            A string value.
            </value>
            <remarks>
            A "&lt;&gt;" sequence is used to serve as a placeholder for the measurement
            text.  The prefix or suffix text is placed before or after the "&lt;&gt;", respectively.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMSCALE">
            <summary>
            Specifies the scale factor for primary dimensions.
            </summary>
            <value>
            A double.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMASZ">
            <summary>
            The size of arrowheads.
            </summary>
            <value>
            A double representing the size in drawing units.
            </value>
            <remarks>
            This is the size of the dimension line arrowheads, leader line arrowheads, and
            hook lines.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMEXO">
            <summary>
            The extension line offset.
            </summary>
            <value>
            A double representing the offset in drawing units.
            </value>
            <remarks>
            Specifies the distance to offset the extension lines from the origin points
            for the dimension.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMDLI">
            <summary>
            Specifies the dimension line offset for continuation.
            </summary>
            <value>
            A double representing the distance.
            </value>
            <remarks>
            Each dimension line is offset from the previous one by this distance.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMEXE">
            <summary>
            Specifies the distance the extension line extends beyond the dimension line.
            </summary>
            <value>
            A double representing the distance.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMRND">
            <summary>
            Specifies the rounding of primary units.
            </summary>
            <value>
            A double representing the value to round to.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMDLE">
            <summary>
            Specifies the distance the dimension line extends past the extension lines
            when oblique strokes are drawn instead of arrowheads.
            </summary>
            <value>
            A double representing the distance.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMTP">
            <summary>
            Specifies the upper tolerance limit for the dimension text.
            </summary>
            <value>
            A double representing the limit.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMTM">
            <summary>
            Specifies the lower tolerance limit for the dimension text.
            </summary>
            <value>
            A double representing the limit.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMTOL">
            <summary>
            Specifies if tolerances are diplayed with dimension text.
            </summary>
            <value>
            An int with 0 for <b>off</b> 1 for <b>on</b>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMLIM">
            <summary>
            Specifies whether dimension limits are displayed.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - off
            <br/>
            1 - on
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMTIH">
            <summary>
            Specifies the position of the dimension text inside the extension lines.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - <b>false</b>, text is aligned with dimension line
            <br/>
            1 - <b>true</b>, text is drawn horizontally
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMTOH">
            <summary>
            Specifies the position of the dimension text outside the extension lines.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - <b>false</b>, text is aligned with dimension line
            <br/>
            1 - <b>true</b>, text is drawn horizontally
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMSE1">
            <summary>
            Specifies if the first extension line is suppressed.
            </summary>
            <value>
            An int value with 0 for <b>off</b>, 1 for <b>on</b>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMSE2">
            <summary>
            Specifies if the second extension line is suppressed.
            </summary>
            <value>
            An int value with 0 for <b>off</b>, 1 for <b>on</b>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMTAD">
            <summary>
            Specifies the vertical postion of the dimension text relative to the
            dimension line.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - centers the text between the extension lines
            <br/>
            1 - places the dimension text above the dimension line except when the
            dimension line is not horizontal and text inside the extension lines
            is forced horizontal, when <see cref="P:ComponentIngenuity.Ivan.SystemVariables.DIMTIH"/> = 1. The
            distance from the dimension line to the baseline of the lowest line of
            text is the <see cref="P:ComponentIngenuity.Ivan.SystemVariables.DIMGAP"/> value
            <br/>
            2 - places the text on the side of the dimension line farthest
            away from the defining points
            <br/>
            3 - places the text to conform to Japanese Industrial Standards 
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMZIN">
            <summary>
            Specifies the suppression of zeroes in the display of primary unit values.
            </summary>
            <value>
            An int mask with the bit values defined below:
            <br/>
            <br/>
            0 - suppress zero feet and suppress zero inches
            <br/>
            1 - include zero feet and include zero inches
            <br/>
            2 - include zero feet and suppress zero inches
            <br/>
            3 - suppress zero feet and include zero inches
            <br/>
            4 - suppress leading zeroes
            <br/>
            8 - suppress trailing zeroes
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMAZIN">
            <summary>
            Controls zero suppression for angular dimensions.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            0 - display all zeroes
            <br/>
            1 - suppress leading zeroes
            <br/>
            2 - suppress trailing zeroes
            <br/>
            3 - suppress all zeroes
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMTXT">
            <summary>
            The height of the dimension or tolerance text.
            </summary>
            <value>
            A double representing the height in drawing units.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMCEN">
            <summary>
            Specifies the size of the center mark of the dimension.
            </summary>
            <value>
            A double value where:
            <br/>
            <br/>
            if = 0 - no center lines or marks are drawn
            if &lt; 0 - center lines are drawn
            if &gt; 0 - center marks are drawn
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMTSZ">
            <summary>
            Specifies the size of oblique strokes when drawn instead of arrowheads.
            </summary>
            <value>
            A double value:
            <br/>
            <br/>
            0 - draw arrowheads
            <br/>
            &gt;0 - draw oblique strokes with size equal to this value times <see cref="P:ComponentIngenuity.Ivan.DimStyle.DIMSCALE"/>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMALTF">
            <summary>
            Specifies the scale factor for alternate dimensions.
            </summary>
            <value>
            A double.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMLFAC">
            <summary>
            Specifies linear scale factor for dimension measurements.
            </summary>
            <value>
            A double representing the scale factor.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMTVP">
            <summary>
            Controls text's vertical position based on numeric value.
            </summary>
            <value>
            A double.  The magnitude of the vertical offset of text is the product of
            the text height and DIMTVP.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMTFAC">
            <summary>
            Specifies the tolerance text height relative to the dimension text.
            </summary>
            <value>
            A double representing the scale factor.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMGAP">
            <summary>
            The gap between the text and the dimension line.
            </summary>
            <value>
            A double representing the distance in drawing units.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMALTRND">
            <summary>
            Specifies the rounding of alternate units.
            </summary>
            <value>
            A double representing the value to round to.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMALT">
            <summary>
            Specifies if alternate units are enabled.
            </summary>
            <value>
            An int value with 0 for <b>off</b>, 1 for <b>on</b>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMALTD">
            <summary>
            Specifies the number of decimal places for alternate dimensions and tolerances.
            </summary>
            <value>
            An int specifying the number of decimal places.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMTOFL">
            <summary>
            Specifies if dimensions lines always displayed inside of extension lines, even
            if the text is placed on the outside.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - <b>off</b>, do not draw dimension lines between extension lines
            <br/>
            1 - <b>on</b>, draw dimension lines between extension lines
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMSAH">
            <summary>
            Specifies if a single block or two different blocks are used to display
            both arrowheads of a dimension.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - <b>off</b>, use <see cref="P:ComponentIngenuity.Ivan.DimStyle.DIMBLK"/> for both
            <br/>
            1 - <b>on</b>, use <see cref="P:ComponentIngenuity.Ivan.DimStyle.DIMBLK1"/> and <see cref="P:ComponentIngenuity.Ivan.DimStyle.DIMBLK2"/>, one for
            each arrowhead.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMTIX">
            <summary>
            Specifies if dimensions text is diplayed inside the extension lines.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - <b>off</b>, for linear and angular dimensions, text is inside the
            extension lines if there is space, for radius and diameter dimensions
            that don't fit inside the circle or arc, DIMTIX has no effect and always
            forces the text to the outside
            <br/>
            1 - <b>on</b>, text is between the extension lines
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMSOXD">
            <summary>
            Specifies if dimension lines are suppressed outside of extension lines.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - <b>off</b>, lines are not suppressed
            <br/>
            1 - <b>on</b>, lines are suppressed
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMCLRD">
            <summary>
            The color of the lines for the dimension, tolerances and leaders.
            </summary>
            <value>
            An <see cref="T:ComponentIngenuity.Ivan.Color"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMCLRE">
            <summary>
            The color of the extension lines.
            </summary>
            <value>
            An <see cref="T:ComponentIngenuity.Ivan.Color"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMCLRT">
            <summary>
            The color of the text for the dimension and tolerances.
            </summary>
            <value>
            An <see cref="T:ComponentIngenuity.Ivan.Color"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMADEC">
            <summary>
            Specifies precision for angular dimension text.
            </summary>
            <value>
            An int specifying the number of decimal places.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMDEC">
            <summary>
            Specifies the number of decimal places for primary dimensions and tolerances.
            </summary>
            <value>
            An int specifying the number of decimal places.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMTDEC">
            <summary>
            Specifies tolerance precision for the dimension primary units.
            </summary>
            <value>
            An int specifying the number of decimal places.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMALTU">
            <summary>
            Specifies the units format for all dimensions except angular.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            1 - scientific
            <br/>
            2 - decimal
            <br/>
            3 - engineering
            <br/>
            4 - architectural (stacked)
            <br/>
            5 - fractional (stacked)
            <br/>
            6 - architectural
            <br/>
            7 - fractional
            <br/>
            8 - windows desktop
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMALTTD">
            <summary>
            Specifies tolerance precision for the dimension alternate units.
            </summary>
            <value>
            An int specifying the number of decimal places.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMAUNIT">
            <summary>
            Specifies the units format for angular dimensions.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - decimal degrees
            <br/>
            1 - degrees-minutes-seconds
            <br/>
            2 - gradians
            <br/>
            3 - radians
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMFRAC">
            <summary>
            Specifies the format for fractional values in dimensions and tolerances.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - horizontal
            <br/>
            1 - diagonal
            <br/>
            2 - not stacked
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMLUNIT">
            <summary>
            Specifies the units format for all linear dimensions.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            1 - scientific
            <br/>
            2 - decimal
            <br/>
            3 - engineering
            <br/>
            4 - architectural
            <br/>
            5 - fractional
            <br/>
            6 - windows desktop
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMDSEP">
            <summary>
            User-defined separator for decimals when dimension units are set to decimal.
            </summary>
            <value>
            An int representing the character code.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMTMOVE">
            <summary>
            Specifies how text is drawn when dimension text is moved.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - moves the dimension line with the text
            <br/>
            1 - adds a leader when the text is moved
            <br/>
            2 - moves text without a leader
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMJUST">
            <summary>
            Specifies the horizontal justification for dimension text.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - centered on dimension line between extension lines
            <br/>
            1 - next to the first extension line
            <br/>
            2 - next to the second extension line
            <br/>
            3 - above and aligned with the first extension line
            <br/>
            4 - above and aligned with the second extension line
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMSD1">
            <summary>
            Specifies if the first dimension line is suppressed.
            </summary>
            <value>
            An int value with 0 for <b>off</b>, 1 for <b>on</b>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMSD2">
            <summary>
            Specifies if the second dimension line is suppressed.
            </summary>
            <value>
            An int value with 0 for <b>off</b>, 1 for <b>on</b>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMTOLJ">
            <summary>
            Specifies the vertical justification of the tolerance text relative to
            the dimension text.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - bottom
            <br/>
            1 - middle
            <br/>
            2 - top
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMTZIN">
            <summary>
            Specifies the suppression of zeroes in the display of tolerance primary units.
            </summary>
            <value>
            An int mask with the bit values defined below:
            <br/>
            <br/>
            0 - suppress zero feet and suppress zero inches
            <br/>
            1 - include zero feet and include zero inches
            <br/>
            2 - include zero feet and suppress zero inches
            <br/>
            3 - suppress zero feet and include zero inches
            <br/>
            4 - suppress leading zeroes
            <br/>
            8 - suppress trailing zeroes
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMALTZ">
            <summary>
            Specifies the suppression of zeroes in the display of tolerance alternate units.
            </summary>
            <value>
            An int mask with the bit values defined below:
            <br/>
            <br/>
            0 - suppress zero feet and suppress zero inches
            <br/>
            1 - include zero feet and include zero inches
            <br/>
            2 - include zero feet and suppress zero inches
            <br/>
            3 - suppress zero feet and include zero inches
            <br/>
            4 - suppress leading zeroes
            <br/>
            8 - suppress trailing zeroes
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMALTTZ">
            <summary>
            Specifies the suppression of zeroes in the display of tolerance alternate units.
            </summary>
            <value>
            An int mask with the bit values defined below:
            <br/>
            <br/>
            0 - suppress zero feet and suppress zero inches
            <br/>
            1 - include zero feet and include zero inches
            <br/>
            2 - include zero feet and suppress zero inches
            <br/>
            3 - suppress zero feet and include zero inches
            <br/>
            4 - suppress leading zeroes
            <br/>
            8 - suppress trailing zeroes
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMUPT">
            <summary>
            Controls user positioning of text during dimension input.
            </summary>
            <value>
            An int value with 0 for <b>off</b>, 1 for <b>on</b>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMATFIT">
            <summary>
            Specifies how dimension text and arrows are arranged when there is not
            enough space between the extension lines.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - both text and arrows go outside the extension lines
            <br/>
            1 - move arrows outside first, then text
            <br/>
            2 - move text outside first, then arrows
            <br/>
            3 - move text or arrows first, whichever fits best
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMFIT">
            <summary>
            Specifies how dimension text and arrows are arranged when there is not
            enough space between the extension lines.
            </summary>
            <value>
            An int corresponding to the following:
            <br/>
            <br/>
            0 - both text and arrows go outside the extension lines
            <br/>
            1 - move arrows outside first, then text
            <br/>
            2 - move text outside first, then arrows
            <br/>
            3 - move text or arrows first, whichever fits best
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMLWD">
            <summary>
            Specifies the line weight of dimension lines.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            -3 - default lineweight
            <br/>
            -2 - ByBlock
            <br/>
            -1 - ByLayer
            <br/>
            or an integer representing 100th millimeter.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMLWE">
            <summary>
            Specifies the line weight of the extension lines.
            </summary>
            <value>
            A double representing the weight.  ByLayer, ByBlock or 1/100 mm increments.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMUNIT">
            <summary>
            Sets the units format for all dimension style family members except angular.
            </summary>
            <value>
            An int value:
            <br/>
            <br/>
            1 - Scientific
            <br/>
            2 - Decimal
            <br/>
            3 - Engineering
            <br/>
            4 - Architectural (stacked)
            <br/>
            5 - Fractional (stacked)
            <br/>
            6 - Architectural
            <br/>
            7 - Fractional
            <br/>
            8 - Windows Desktop (decimal format using Control Panel settings for decimal 
                separator and number grouping symbols)
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMBLK">
            <summary>
            The block to use for dimension arrowheads when a single block is specified.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Block"/> object.
            </value>
            <remarks>
            When <see cref="P:ComponentIngenuity.Ivan.DimStyle.DIMSAH"/> is off DIMBLK is used for both arrowheads.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMBLK1">
            <summary>
            The block to use for the first dimension arrowhead when a two blocks
            are specified.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Block"/> object.
            </value>
            <remarks>
            When <see cref="P:ComponentIngenuity.Ivan.DimStyle.DIMSAH"/> is on DIMBLK1 is used for the first arrowhead.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMBLK2">
            <summary>
            The block to use for the second dimension arrowhead when a two blocks
            are specified.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Block"/> object.
            </value>
            <remarks>
            When <see cref="P:ComponentIngenuity.Ivan.DimStyle.DIMSAH"/> is on DIMBLK2 is used for the second arrowhead.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMTXSTY">
            <summary>
            Specifies the text style used for the dimension text and tolerance text.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.TextStyle"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyle.DIMLDRBLK">
            <summary>
            The block to use for dimension arrowheads on leaders.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Block"/> object.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.DictionaryWithDefault">
            <summary>
            A special form of the Dictionary object.
            </summary>
            <remarks>
            The <see cref="T:ComponentIngenuity.Ivan.Dictionary"/> is a container that holds a collection of name/value
            pairs.  As it is implemented in Ivan the name is a string key and the value
            is a DrawingObject.  The DictionaryWithDefault is just like a normal
            <see cref="T:ComponentIngenuity.Ivan.Dictionary"/> except if a key value is not found a default value is returned
            instead of throwing a <see cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException"/>.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Dictionary">
            <summary>
            A Dictionary object.
            </summary>
            <remarks>
            The dictionary is a container that holds a collection of name/value
            pairs.  As it is implemented in Ivan the name is a string key and the value
            is a DrawingObject.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dictionary.Keys">
            <summary>
            A collection of all the keys associated with all the DrawingObjects
            contained in the Dictionary.
            </summary>
            <value>
            An <see cref="T:ComponentIngenuity.Ivan.StringList"/> object.
            </value>
            <remarks>
            The keys can be used in conjunction with the <see cref="P:ComponentIngenuity.Ivan.Dictionary.Item(System.String)"/> property
            to retrieve any named object.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Dictionary.Item(System.String)">
            <summary>
            The <see cref="T:ComponentIngenuity.Ivan.DrawingObject"/> item in the dictionary corresponding to
            the specified key.
            </summary>
            <param name="key">
            A string specifying the name to use to look up the DrawingObject.
            </param>
            <returns>
            A <see cref="T:ComponentIngenuity.Ivan.DrawingObject"/>
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The key is not in the dictionary.</exception>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Block">
            <summary>
            A block object.
            </summary>
            <remarks>
            Blocks are named collections of entities that are used to build symbols.  The
            Block is the symbol definition.  When an instance of a Block is inserted
            into the drawing a <see cref="T:ComponentIngenuity.Ivan.BlockReference"/> is created as the representative
            for the symbol.  There is a one-to-many relationship between a Block and
            its associated BlockReferences.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Block.Entities">
            <summary>
            The database of entities that comprises the block.
            </summary>
            <value>
            An <see cref="T:ComponentIngenuity.Ivan.EntityDatabase"/> object providing access to the block entities.
            </value>
            <remarks>
            All objects that make up a block are derived from DrawingEntity.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Block.Name">
            <summary>
            The name of the block.
            </summary>
            <value>
            A string.
            </value>
            <remarks>
            Each block has a unique name allowing it to be chosen from a pick list.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Block.Description">
            <summary>
            The description of the Block symbol.
            </summary>
            <value>
            A string describing the symbol.
            </value>
            <remarks>
            The description makes it easy to distingusih one symbol from another in
            a symbol library.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Block.IsAnonymous">
            <summary>
            Specifies if the block is anonymous.
            </summary>
            <value>
            A boolean value, <b>true</b> if the block is anonymous, <b>false</b> if it is not.
            </value>
            <remarks>
            When a dimension or a hatch is placed in the drawing AutoCADÂ® automatically,
            behind the scenes, creates a block to represent it.  These "anonymous"
            blocks are named as *D or *X, respectively, followed by a numeral. For
            example, *D1, *D2, *X1, etc.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Block.HasNonConstantAttributes">
            <summary>
            Specifies if the block has non-constant attributes.
            </summary>
            <value>
            A boolean value, <b>true</b> if the block has non-constant attributes, <b>false</b> if it is not.
            </value>
            <remarks>
            A constant attribute maintains its value at every insertion.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Block.IsXRefOverlay">
            <summary>
            Specifies if the block is a xref overlay.
            </summary>
            <value>
            A boolean value, <b>true</b> if the block is a xref overlay, <b>false</b> if it is not.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Block.IsLayout">
            <summary>
            Specifies if the block is a layout.
            </summary>
            <value>
            A boolean value, <b>true</b> if the block is a layout, <b>false</b> if it is not.
            </value>
            <remarks>
            Layouts like ModelSpace and PaperSpace have a block data member to hold
            all of its entities.  
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Block.Layout">
            <summary>
            The layout object associated with the block.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Block.Layout"/> object.
            </value>
            <remarks>
            If the <see cref="P:ComponentIngenuity.Ivan.Block.IsLayout"/> property is true this property will contain
            the Layout object associated with the block.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Block.IsXRef">
            <summary>
            Specifies if the block is an external reference.
            </summary>
            <value>
            A boolean value, <b>true</b> if the block is an external reference, <b>false</b> if it is not.
            </value>
            <remarks>
            Complete drawings can be saved as blocks and inserted into other drawings.
            These types of blocks are called external references.  If this property
            is true then the name of the external file is kept in the
            <see cref="P:ComponentIngenuity.Ivan.Block.XRefDatabase"/> property.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Block.XRefDatabase">
            <summary>
            The name of the external reference file.
            </summary>
            <value>
            A string containing the name of the file.
            </value>
            <remarks>
            If the <see cref="P:ComponentIngenuity.Ivan.Block.IsXRef"/> property is true this property will contain
            the name of the external file.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Block.Origin">
            <summary>
            The origin of the block.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
            <remarks>
            The coordinates of all member objects of the block are relative to its
            origin.  When a block is inserted into the drawing the origin coincides
            with the insertion point.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Ray">
            <summary>
            A ray entity.
            </summary>
            <remarks>
            The ray is a line segment which reaches infinitely in one direction.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Ray.BasePoint">
            <summary>
            Specifies the starting point of the ray.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Ray.DirectionVector">
            <summary>
            Specifies the direction vector of the ray.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object representing the vector.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.PolyfaceMeshVertex">
            <summary>
            A polyface mesh vertex entity.
            </summary>
            <remarks>
            These vertices are joined together to form the faces of the polyface
            mesh.  They are housed in the <see cref="P:ComponentIngenuity.Ivan.PolyfaceMesh.Vertices"/>
            property of the mesh.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PolyfaceMeshVertex.Point">
            <summary>
            Specifies the coordinates of the vertex.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.HatchEllipticalArcSegment">
            <summary>
            A elliptical arc hatch path segment.
            </summary>
            <remarks>
            This segment of the path is part of an elliptical arc.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchEllipticalArcSegment.Center">
            <summary>
            The center of the ellipse.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchEllipticalArcSegment.EndPoint">
            <summary>
            The end point of the ellipse.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> representing the end point of the ellipse.
            </value>
            <remarks>
            The ellipse is drawn counter-clockwise from the start angle to
            the end angle.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchEllipticalArcSegment.RadiusRatio">
            <summary>
            Ratio of the minor radius to the major radius.
            </summary>
            <value>
            A double representing the ratio.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchEllipticalArcSegment.StartAngle">
            <summary>
            The start angle of the ellipse.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            A horizontal ray stemming from the <see cref="P:ComponentIngenuity.Ivan.HatchEllipticalArcSegment.Center"/> to the right would 
            represent an angle of 0 radians.  Moving counter-clockwise along the ellipse, 
            starting at 0 radians and stopping at the start point defines
            the start angle.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchEllipticalArcSegment.EndAngle">
            <summary>
            The end angle of the ellipse.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            A horizontal ray stemming from the <see cref="P:ComponentIngenuity.Ivan.HatchEllipticalArcSegment.Center"/> to the right would 
            represent an angle of 0 radians.  Moving counter-clockwise along the ellipse, 
            starting at 0 radians and stopping at the <see cref="P:ComponentIngenuity.Ivan.HatchEllipticalArcSegment.EndPoint"/> defines
            the end angle.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchEllipticalArcSegment.IsCounterClockwise">
            <summary>
            Specifies if the ellipse is drawn counter-clockwise.
            </summary>
            <value>
            A boolean value, <b>true</b> if yes, <b>false</b> if no.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Shapefile">
            <summary>
            A Shapefile object.
            </summary>
            <remarks>
            Shapefiles are used to hold shapes that can be used in Linetype definitions
            or as an alternative to block definitions.  They are also used to define
            AutoCADÂ® supplied fonts.  This collection is only for information purposes
            only and Ivan does not allow the adding or editting of Shapefiles.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Shapefile.Name">
            <summary>
            The name of the shape file.
            </summary>
            <value>
            A string representing the name.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.HatchDefinitionLineList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.HatchDefinitionLine"/> objects accessible by index.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.HatchDefinitionLineList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchDefinitionLineList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchDefinitionLineList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.HatchDefinitionLine"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.HatchDefinitionLine"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.TwoLineAngularDimension">
            <summary>
            An angular dimension.
            </summary>
            <remarks>
            A dimension measuring the angular distance between two lines or between
            the angle of a circular arc.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.TwoLineAngularDimension.DimensionLineLocation">
            <summary>
            Specifies the location of the dimension line (or arc).
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/>
            </value>
            <remarks>
            Generally, this property describes where the dimension line (or arc) meets
            the extension line.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.TwoLineAngularDimension.ExtensionLine1StartPoint">
            <summary>
            Specifies the start point for the first extension line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>
            </value>
            <remarks>
            The start point is the part of the extension line closest to the object
            being measured.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.TwoLineAngularDimension.ExtensionLine2StartPoint">
            <summary>
            Specifies the start point for the second extension line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>
            </value>
            <remarks>
            The start point is the part of the extension line closest to the object
            being measured.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.TwoLineAngularDimension.ExtensionLine1EndPoint">
            <summary>
            Specifies the end point for the first extension line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>
            </value>
            <remarks>
            This property describes where the end point of the extension line away
            from the object being measured.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.TwoLineAngularDimension.ExtensionLine2EndPoint">
            <summary>
            Specifies the end point for the second extension line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>
            </value>
            <remarks>
            This property describes where the end point of the extension line away
            from the object being measured.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.ThreePointAngularDimension">
            <summary>
            A 3 point angular dimension.
            </summary>
            <remarks>
            A dimension measuring the angular distance between three points.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ThreePointAngularDimension.DimensionLineLocation">
            <summary>
            Specifies the location of the dimension line (or arc).
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>
            </value>
            <remarks>
            Generally, this property describes where the dimension line (or arc) meets
            the extension line.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ThreePointAngularDimension.ExtensionLine1EndPoint">
            <summary>
            Specifies the end point for the first extension line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>
            </value>
            <remarks>
            This property describes where the end point of the extension line away
            from the object being measured.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ThreePointAngularDimension.ExtensionLine2EndPoint">
            <summary>
            Specifies the end point for the second extension line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>
            </value>
            <remarks>
            This property describes where the end point of the extension line away
            from the object being measured.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ThreePointAngularDimension.AngleVertex">
            <summary>
            The vertex of the angle of the dimension.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.RotatedDimension">
            <summary>
            A rotated dimension.
            </summary>
            <remarks>
            A dimension that measures the distance between two points and is displayed
            at a given rotation.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RotatedDimension.ExtensionLine1Origin">
            <summary>
            Specifies the origin of the first extension line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RotatedDimension.ExtensionLine2Origin">
            <summary>
            Specifies the origin of the second extension line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RotatedDimension.DimensionLineLocation">
            <summary>
            Specifies the location of the dimension line (or arc).
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>
            </value>
            <remarks>
            Generally, this property describes where the dimension line (or arc) meets
            the extension line.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RotatedDimension.ExtensionLineRotation">
            <summary>
            Specifies the extension line rotation.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            When added to the rotation of the dimension gives the rotation of the
            extension lines.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RotatedDimension.DimensionLineRotation">
            <summary>
            Specifies the angle of rotated dimensions.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.MLineVertex">
            <summary>
            A mline vertex object.
            </summary>
            <remarks>
            This object represents a single vertex in the collection of vertices
            that define the geometry of a mline.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineVertex.Point">
            <summary>
            Specifies the coordinate of the vertex.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineVertex.SegmentDirection">
            <summary>
            Specifies the direction vector for the segment starting at this vertex.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineVertex.MiterDirection">
            <summary>
            Specifies the direction vector for the miter at this vertex.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineVertex.ParameterSets">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.MLineParmSet"/> objects.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.MLineParmSetList"/> object.
            </value>
            <remarks>
            The parameter sets are used to determine how to draw the miters and fills
            about the vertex points of the mline.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.MLine">
            <summary>
            A multi-line entity.
            </summary>
            <remarks>
            This entity represents a set of multiple parallel lines.  A maximum of
            16 lines can be in the set.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLine.Vertices">
            <summary>
            The collection of <see cref="T:ComponentIngenuity.Ivan.MLineVertex"/> objects that define the
            geometry of the mline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.MLineVertexList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLine.ScaleFactor">
            <summary>
            Scale factor for the mline.
            </summary>
            <value>
            A double.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLine.Justification">
            <summary>
            Specifies the justification of the mline about the base point.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.MLineJustification"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLine.BasePoint">
            <summary>
            Specifies the start point for the mline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLine.Normal">
            <summary>
            Unit normal vector to the plane the mline is on.
            </summary>
            <value>
            A Point3d whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the mline's plane.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLine.IsClosed">
            <summary>
            Specifies if the mline is closed.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the mline is closed
            <br/>
            <b>false</b> - the mline is not closed
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLine.Style">
            <summary>
            Specifies the style of the mline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.MLineStyle"/> object.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.LightweightPolyline">
            <summary>
            A lightweight polyline entity.
            </summary>
            <remarks>
            A two dimensional line that can have varying width, it is drawn thru
            a set of vertex points and can consist of arcs and line segments.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LightweightPolyline.Vertices">
            <summary>
            The collection of <see cref="T:ComponentIngenuity.Ivan.LightweightVertex"/> objects defining the
            vertices for the polyline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.LightweightVertexList"/> object.
            </value>
            <remarks>
            The polyline is drawn thru each vertex.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LightweightPolyline.Area">
            <summary>
            The area of the polyline.
            </summary>
            <value>
            A double representing the area.
            </value>
            <remarks>
            This is the area of the space enclosed by the polyline. If the polyline
            is not closed the area is calculated as if it were.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LightweightPolyline.IsClosed">
            <summary>
            Specifies if the polyline is closed.
            </summary>
            <value>
            A boolean value, <b>true</b> if the polyline is closed, <b>false</b> if it is not.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LightweightPolyline.Elevation">
            <summary>
            The elevation of the polyline.
            </summary>
            <value>
            A double representing the elevation.
            </value>
            <remarks>
            The elevation is the z coordinate for the plane of the object.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LightweightPolyline.LineTypeGeneration">
            <summary>
            Specifies the linetype generation for the polyline.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            true - generate the linetype of the polyline continuously thru the vertices
            <br/>
            false - generate the linetype of the polyline starting and ending with a dash
            at each vertex
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LightweightPolyline.Thickness">
            <summary>
            The thickness of the polyline.
            </summary>
            <value>
            A double. 
            </value>
            <remarks>
            The thickness it the extrusion of the polyline in the z direction.  This
            direction is defined by the <see cref="P:ComponentIngenuity.Ivan.LightweightPolyline.Normal"/> property.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LightweightPolyline.Normal">
            <summary>
            Unit normal vector to the surface formed by the polyline.
            </summary>
            <value>
            A Point3d whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the polyline.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LightweightPolyline.HasConstantWidth">
            <summary>
            Specifies if the width of all the segments of the polyline are the same.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            true - all segments are the same width
            <br/>
            false - segments can have variable width
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LightweightPolyline.ConstantWidth">
            <summary>
            Specifies if the constant width for the polyline segments.
            </summary>
            <value>
            A double representing the width.
            </value>
            <remarks>
            This property is only valid if the <see cref="P:ComponentIngenuity.Ivan.LightweightPolyline.HasConstantWidth"/> property
            is true.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Rwc.GaloisPolynomial">
            <summary>
            A Galois Polynomial.
            </summary>
            <remarks>
            Remarks for GaloisPolynomial.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Argb">
            <summary>
            Represents the Alpha, Red, Green, and Blue (Argb) values of a color
            </summary>
            <remarks>
            This class encapsulates the individual Alpha, Red, Green, and Blue values 
            of an Argb color.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Argb.Alpha">
            <summary>
            The value of the alpha component of the Argb color.
            </summary>
            <value>
            An int representing the alpha percentage in the range 0 to 255. 
            </value>
            <remarks>
            The alpha is the level of transparency, 255 being fully opaque and 0 
            being fully transparent.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Argb.Red">
            <summary>
            The value of the red component of the Argb color.
            </summary>
            <value>
            An int between 0 and 255 representing the percentage of red in the color.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Argb.Green">
            <summary>
            The value of the green component of the Argb color.
            </summary>
            <value>
            An int between 0 and 255 representing the percentage of green in the color.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Argb.Blue">
            <summary>
            The value of the blue component of the Argb color.
            </summary>
            <value>
            An int between 0 and 255 representing the percentage of blue in the color.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Argb.Value">
            <summary>
            The Argb color value expressed as an integer.
            </summary>
            <value>
            An int value.
            </value>
            <remarks>
            Each component of the Argb color is 8 bits.  The Value is formed by 
            placing all four components together to form a single 32 bit integer.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.LinetypePatternElement">
            <summary>
            A line pattern element object.
            </summary>
            <remarks>
            This object represents an individual element in the pattern of a
            linetype. 
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LinetypePatternElement.IsComplex">
            <summary>
            Specifies if the pattern element is of the complex type.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - is complex
            <br/>
            <b>false</b> - is not complex
            </value>
            <remarks>
            Linetypes can be made up of complex or simple pattern elements.  A simple
            linetype has only dashes, dots and spaces defining it.  A complex linetype
            has embedded text or shapes included in the definition.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LinetypePatternElement.IsShape">
            <summary>
            Specifies if the pattern element is of the complex shape type.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - has embedded shape
            <br/>
            <b>false</b> - does not have embedded shape
            </value>
            <remarks>
            Linetypes can be made up of complex or simple pattern elements.  A simple
            linetype has only dashes, dots and spaces defining it.  A complex linetype
            has embedded text or shapes included in the definition.  This property
            implies that the pattern element is of the shape type.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LinetypePatternElement.IsText">
            <summary>
            Specifies if the pattern element is of the complex text type.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - has embedded text
            <br/>
            <b>false</b> - does not have embedded text
            </value>
            <remarks>
            Linetypes can be made up of complex or simple pattern elements.  A simple
            linetype has only dashes, dots and spaces defining it.  A complex linetype
            has embedded text or shapes included in the definition.  This property
            implies that the pattern element is of the text type.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LinetypePatternElement.IsRotationRelative">
            <summary>
            Specifies if the rotation value is relative.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - rotation is relative
            <br/>
            <b>false</b> - rotation is absolute
            </value>
            <remarks>
            If the rotation angle is relative it is relative to the tangent of curve
            of the object that the linetype is attached to.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LinetypePatternElement.Length">
            <summary>
            Specifies the length of the pattern element.
            </summary>
            <value>
            A double representing the length in drawing units.
            </value>
            <remarks>
            A positive length represents a dash.  A negative value represents a space.  A
            zero represents a dot.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LinetypePatternElement.ShapeIndex">
            <summary>
            Specifies the index of the shape in the shape file.
            </summary>
            <value>
            A int representing the index.
            </value>
            <remarks>
            If the <see cref="P:ComponentIngenuity.Ivan.LinetypePatternElement.IsShape"/> property is <b>true</b> this value represents the
            position of the embedded shape in the shapefile defined by the FontFile property
            of the <see cref="P:ComponentIngenuity.Ivan.LinetypePatternElement.Shapefile"/> object.  If <see cref="P:ComponentIngenuity.Ivan.LinetypePatternElement.IsShape"/> is <b>false</b>
            then the value is not used.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LinetypePatternElement.XOffset">
            <summary>
            Specifies the x-offset of the embedded object.
            </summary>
            <value>
            A double representing the offset in drawing units.
            </value>
            <remarks>
            If <see cref="P:ComponentIngenuity.Ivan.LinetypePatternElement.IsText"/> is <b>true</b>:
            <br/>
            The distance of the lower left corner of the text string from the end
            point of the line segment measured along the line.
            <br/>
            <br/>
            If <see cref="P:ComponentIngenuity.Ivan.LinetypePatternElement.IsShape"/> is <b>true</b>:
            <br/>
            The distance of the shape insertion point from the end point of the line
            segment measured along the line.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LinetypePatternElement.YOffset">
            <summary>
            Specifies the y-offset of the embedded object.
            </summary>
            <value>
            A double representing the offset in drawing units.
            </value>
            <remarks>
            If <see cref="P:ComponentIngenuity.Ivan.LinetypePatternElement.IsText"/> is <b>true</b>:
            <br/>
            The distance of the lower left corner of the text string from the end point
            of the line segment measured perpendicular to the line.
            <br/>
            <br/>
            If <see cref="P:ComponentIngenuity.Ivan.LinetypePatternElement.IsShape"/> is <b>true</b>:
            <br/>
            The distance of the shape insertion point from the end point of the line
            segment measured perpendicular the line.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LinetypePatternElement.Scale">
            <summary>
            Specifies the scale factor for the embedded object.
            </summary>
            <value>
            A double representing the scale factor.
            </value>
            <remarks>
            If the <see cref="P:ComponentIngenuity.Ivan.LinetypePatternElement.IsText"/> property is <b>true</b> this factor is applied to
            the style's height.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LinetypePatternElement.Rotation">
            <summary>
            Specifies the rotation of the embedded object.
            </summary>
            <value>
            A double representing the rotation angle in radians.
            </value>
            <remarks>
            If the <see cref="P:ComponentIngenuity.Ivan.LinetypePatternElement.IsRotationRelative"/> property is <b>true</b> then this is a
            relative value, relative to the tangent of the curve of the object having
            the linetype, otherwise, the angle is absolute.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LinetypePatternElement.Text">
            <summary>
            Specifies the text string of the embedded text object.
            </summary>
            <value>
            A string containing the text.
            </value>
            <remarks>
            If the <see cref="P:ComponentIngenuity.Ivan.LinetypePatternElement.IsText"/> property is <b>true</b> then this property
            holds the text, otherwise, the property is not used.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LinetypePatternElement.TextStyle">
            <summary>
            Specifies the TextStyle of the element's text.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.LinetypePatternElement.TextStyle"/> object.
            </value>
            <remarks>
            If the <see cref="P:ComponentIngenuity.Ivan.LinetypePatternElement.IsText"/> property is <b>true</b> then this object
            represents the TextStyle of the element's text.  Otherwise its null.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LinetypePatternElement.Shapefile">
            <summary>
            Specifies the Shapefile of the element's shape.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.LinetypePatternElement.Shapefile"/> object.
            </value>
            <remarks>
            If the <see cref="P:ComponentIngenuity.Ivan.LinetypePatternElement.IsShape"/> property is <b>true</b> then this object
            represents the Shapefile of the element's shape.  Otherwise its null.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.HatchPathSegmentList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.HatchPathSegment"/> objects accessible by index.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.HatchPathSegmentList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchPathSegmentList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchPathSegmentList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.HatchPathSegment"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.HatchPathSegment"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.HatchPathList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.HatchPath"/> objects accessible by index.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.HatchPathList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchPathList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchPathList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.HatchPath"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.HatchPath"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Viewport">
            <summary>
            A viewport object.
            </summary>
            <remarks>
            Viewport allow for the ability to have multiple views of the same model
            space on the screen at the same time.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.HasAssociatedUCS">
            <summary>
            Specifies if the viewport has an associated UCS.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - has a UCS
            <br/>
            <b>false</b> - does not have a UCS
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.Name">
            <summary>
            The name of the viewport.
            </summary>
            <value>
            A string containing the name.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.ViewHeight">
            <summary>
            Specifies how many model space units span the height of the viewport.
            </summary>
            <value>
            A double representing the distance.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.ViewWidth">
            <summary>
            Specifies how many model space units span the width of the viewport.
            </summary>
            <value>
            A double representing the distance.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.ViewCenter">
            <summary>
            Specifies the center of the view.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object representing the center in model units.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.ViewTarget">
            <summary>
            Specifies the target point for the viewport.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object representing the point.
            </value>
            <remarks>
            This is the ending point for the view line of sight.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.ViewDirection">
            <summary>
            Specifies the direction of the line of sight.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object representing the vector.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.ArcSmoothness">
            <summary>
            Specifies the smoothness of arc and circles in the viewport.
            </summary>
            <value>
            An int representing the smoothness factor.  The higher, the smoother.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.IsGridOn">
            <summary>
            Specifies if the grid is on.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the grid is on
            <br/>
            <b>false</b> - the grid is off
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.IsUCSIconOn">
            <summary>
            Specifies if the UCS icon is displayed.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the icon is displayed
            <br/>
            <b>false</b> - the icon is not displayed
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.IsUCSIconAtOrigin">
            <summary>
            Specifies if the UCS icon is displayed at the origin.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the icon is displayed at the origin
            <br/>
            <b>false</b> - the icon is not displayed at the origin
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.IsSnapOn">
            <summary>
            Specifies if the snap is on.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - snap is on
            <br/>
            <b>false</b> - snap is off
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.SnapAngle">
            <summary>
            Specifies the snap angle of the viewport.
            </summary>
            <value>
            A double representing the angle.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.LowerLeftCorner">
            <summary>
            Specifies the lower-left corner of the viewport.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object.
            </value>
            <remarks>
            The viewports are placed as fractional portion of the screen.  The whole
            screen represented as lower-left (0,0) to upper-right (1,1).
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.UpperRightCorner">
            <summary>
            Specifies the upper-right corner of the viewport.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object.
            </value>
            <remarks>
            The viewports are placed as fractional portion of the screen.  The whole
            screen represented as lower-left (0,0) to upper-right (1,1).
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.SnapBasePoint">
            <summary>
            Specifies the snap base point of the viewport.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.SnapSpacing">
            <summary>
            Specifies the snap spacing of the viewport.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.GridSpacing">
            <summary>
            Specifies the grid spacing of the viewport.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.ViewTwistAngle">
            <summary>
            Specifies the angle the view is twisted around the line of sight.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.ViewLensLength">
            <summary>
            Specifies the lens length for the view in the viewport.
            </summary>
            <value>
            A double representing the length.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.ViewFrontClip">
            <summary>
            Specifies the view front clipping plane z value.
            </summary>
            <value>
            A double representing the coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.ViewBackClip">
            <summary>
            Specifies the view back clipping plane z value.
            </summary>
            <value>
            A double representing the coordinate.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.ViewMode">
            <summary>
            Specifies the view mode for the viewport.
            </summary>
            <value>
            An int bit mask containing the mode:
            <br/>
            <br/>
            <b>0</b> - turned off
            <br/>
            <b>1</b> - perspecitve view active
            <br/>
            <b>2</b> - front clipping on
            <br/>
            <b>4</b> - back clipping on
            <br/>
            <b>8</b> - ucs follow mode on
            <br/>
            <b>16</b> - front clip variation
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.RenderMode">
            <summary>
            Specifies the render mode of the viewport.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Viewport.RenderMode"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.IsUCSPerViewport">
            <summary>
            Specifies if the UCS is saved with the viewport.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the UCS is saved with the viewport
            <br/>
            <b>false</b> - the UCS is not saved with the viewport
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.UCSOrigin">
            <summary>
            Specifies if the origin of the UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.UCSXAxisVector">
            <summary>
            Specifies if the x direction of the UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object containing the vector.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.UCSYAxisVector">
            <summary>
            Specifies if the y direction of the UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object containing the vector.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.UCSElevation">
            <summary>
            Specifies if the elevation of the UCS.
            </summary>
            <value>
            A double representing the elevation.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.OrthographicViewType">
            <summary>
            Specifies if the orthographic view type of the UCS.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Viewport.OrthographicViewType"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.IsOrthographic">
            <summary>
            Specifies if the UCS is orthographic.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the UCS is orthographic
            <br/>
            <b>false</b> - the UCS is not orthographic
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.UCSType">
            <summary>
            Specifies the type of the UCS.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Viewport.UCSType"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.NamedUCS">
            <summary>
            Specifies the named UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.UCS"/> enum.
            </value>
            <remarks>
            The <see cref="P:ComponentIngenuity.Ivan.Viewport.UCSType"/> property must be <b>Named</b> for this property
            to be meaningful, else it is <b>null</b>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.BaseUCSType">
            <summary>
            Specifies the type of the base UCS of the UCS.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Viewport.BaseUCSType"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Viewport.BaseUCS">
            <summary>
            Specifies the base UCS of the UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.UCS"/> object.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.UCS">
            <summary>
            A UCS object.
            </summary>
            <remarks>
            This object represents a named user-defined coordinate system.  The coordinate
            system is what defines the location of the origin and the direction of
            the x, y and z axis for space.  
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.UCS.Name">
            <summary>
            The name of the UCS.
            </summary>
            <value>
            A string containing the name.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.UCS.Origin">
            <summary>
            Specifies if the origin of the UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.UCS.XAxisVector">
            <summary>
            Specifies if the x direction of the UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object containing the vector.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.UCS.YAxisVector">
            <summary>
            Specifies if the y direction of the UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object containing the vector.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.UCS.Elevation">
            <summary>
            Specifies if the elevation of the UCS.
            </summary>
            <value>
            A double representing the elevation.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.UCS.OrthographicViewType">
            <summary>
            Specifies if the orthographic view type of the UCS.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.UCS.OrthographicViewType"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.UCS.IsOrthographic">
            <summary>
            Specifies if the UCS is orthographic.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the UCS is orthographic
            <br/>
            <b>false</b> - the UCS is not orthographic
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.UCS.BaseUCSType">
            <summary>
            Specifies the type of the base UCS of the UCS.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.UCS.BaseUCSType"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.UCS.BaseUCS">
            <summary>
            Specifies the base UCS of the UCS.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.UCS"/> object.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.ExtendedDataItem">
            <summary>
            An extended data item.
            </summary>
            <remarks>
            This is an individual data item in the <see cref="T:ComponentIngenuity.Ivan.ExtendedDataItemList"/> 
            collection.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ExtendedDataItem.DataType">
            <summary>
            The data type of the item.
            </summary>
            <value>
            An int whose value corresponds to an AutoCADÂ® encoding representing
            the data type.
            <br/>
            <br/>
            1000 - a string
            <br/>
            1002 - a control string
            <br/>
            1003 - layer handle (long)
            <br/>
            1004 - byte data (byte array)
            <br/>
            1005 - handle (ulong)
            <br/>
            1010 - 3 reals (Point3D)
            <br/>
            1011 - 3D world space position (Point3D)
            <br/>
            1012 - 3D world space displacement (Point3D)
            <br/>
            1013 - 3D world space direction (Point3D)
            <br/>
            1040 - real number (double)
            <br/>
            1041 - distance (double)
            <br/>
            1042 - scale factor (double)
            <br/>
            1070 - short integer (int)
            <br/>
            1071 - long integer (int)
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ExtendedDataItem.Value">
            <summary>
            The actual value of the data item.
            </summary>
            <value>
            An object containing the value having a type of <see cref="P:ComponentIngenuity.Ivan.ExtendedDataItem.DataType"/>.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.RegAppExtendedData">
            <summary>
            A named collection of <see cref="T:ComponentIngenuity.Ivan.ExtendedDataItem"/> objects.
            </summary>
            <remarks>
            An object can have extended data attached to it by many sources.  Third party
            applications must register themselves with AutoCADÂ® before adding extended
            data to an object.  The extended data will be grouped under the name of the
            registered application (<see cref="T:ComponentIngenuity.Ivan.RegisteredApp"/>).  An ExtendedDataApp object
            represents that group having the <see cref="P:ComponentIngenuity.Ivan.RegAppExtendedData.Name"/> of the  registered
            application.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RegAppExtendedData.DataItems">
            <summary>
            The collection of <see cref="T:ComponentIngenuity.Ivan.ExtendedDataItem"/> objects comprising the
            extended data.
            </summary>
            <value>
            An <see cref="T:ComponentIngenuity.Ivan.ExtendedDataItemList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RegAppExtendedData.Name">
            <summary>
            The name of the <see cref="T:ComponentIngenuity.Ivan.RegisteredApp"/> responsible for the extended data.
            </summary>
            <value>
            A string containing the app name.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.PolygonMesh">
            <summary>
            A polygon mesh entity.
            </summary>
            <remarks>
            The polygon mesh is a 3D free form mesh composed of a matrix of M x N
            vertices.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PolygonMesh.Vertices">
            <summary>
            The collection of <see cref="T:ComponentIngenuity.Ivan.PolygonMeshVertex"/> entities that define the mesh.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.PolygonMeshVertexList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PolygonMesh.Type">
            <summary>
            Specifies the type of the mesh.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.PolygonMeshType"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PolygonMesh.MVertexCount">
            <summary>
            Specifies the number of vertices in the M direction.
            </summary>
            <value>
            An int value representing the count.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PolygonMesh.NVertexCount">
            <summary>
            Specifies the number of vertices in the N direction.
            </summary>
            <value>
            An int value representing the count.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PolygonMesh.MIsClosed">
            <summary>
            Specifies if the mesh is closed in the M direction.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the mesh is closed
            <br/>
            <b>false</b> - the mesh is not closed
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PolygonMesh.NIsClosed">
            <summary>
            Specifies if the mesh is closed in the N direction.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the mesh is closed
            <br/>
            <b>false</b> - the mesh is not closed
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PolygonMesh.MDensity">
            <summary>
            Specifies the vertex density of the mesh in the M direction.
            </summary>
            <value>
            An int value representing the density.
            </value>
            <remarks>
            This is the number of vertices in the M direction for meshes whose
            <see cref="P:ComponentIngenuity.Ivan.PolygonMesh.Type"/> property is not <b>SimpleMesh</b>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PolygonMesh.NDensity">
            <summary>
            Specifies the vertex density of the mesh in the N direction.
            </summary>
            <value>
            An int value representing the density.
            </value>
            <remarks>
            This is the number of vertices in the N direction for meshes whose
            <see cref="P:ComponentIngenuity.Ivan.PolygonMesh.Type"/> property is not <b>SimpleMesh</b>.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.HatchCircularArcSegment">
            <summary>
            A circular arc hatch path segment.
            </summary>
            <remarks>
            This segment of the path is part of a circular arc.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchCircularArcSegment.Center">
            <summary>
            The center of the arc.
            </summary>
            <value>
            A Point3d.
            </value>
            <remarks>
            This is the point that defines the center of the circle that the arc is on.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchCircularArcSegment.Radius">
            <summary>
            The radius of the arc.
            </summary>
            <value>
            A double representing the distance from the center to a point on the arc.
            </value>
            <remarks>
            The arc is circular so the radius is the radius of the circle containing
            the arc.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchCircularArcSegment.StartAngle">
            <summary>
            The start angle of the arc.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            A horizontal ray stemming from the <see cref="P:ComponentIngenuity.Ivan.HatchCircularArcSegment.Center"/> to the right would 
            represent an angle of 0 radians.  Moving counter-clockwise along the arc, 
            starting at 0 radians and stopping at the start point defines
            the start angle.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchCircularArcSegment.EndAngle">
            <summary>
            The end angle of the arc.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            A horizontal ray stemming from the <see cref="P:ComponentIngenuity.Ivan.HatchCircularArcSegment.Center"/> to the right would 
            represent an angle of 0 radians.  Moving counter-clockwise along the arc, 
            starting at 0 radians and stopping at the end point defines
            the end angle.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchCircularArcSegment.IsCounterClockwise">
            <summary>
            Specifies if the arc is drawn counter-clockwise.
            </summary>
            <value>
            A boolean value, <b>true</b> if yes, <b>false</b> if no.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.TextStyleList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.TextStyle"/> objects accessible by index, 
            name or unique id.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.TextStyleList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.TextStyleList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.TextStyle"/> from the list corresponding to the specified 
            UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.TextStyle"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The TextStyle is not in the List.</exception>
        </member>
        <member name="M:ComponentIngenuity.Ivan.TextStyleList.GetItemsByName(System.String)">
            <summary>
            Returns all the <see cref="T:ComponentIngenuity.Ivan.TextStyle"/> objects in the list that have the 
            specified name.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns a <see cref="T:ComponentIngenuity.Ivan.TextStyleList"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.TextStyleList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.TextStyleList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.TextStyle"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the object at the specified index.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.TextStyleList.Item(System.String)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.TextStyle"/> with the specified name in the list.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.TextStyle"/> object with the specified name.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The TextStyle is not in the List.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.DuplicateKeysFound">More than one TextStyle matched the Name.  Use GetItemsByName(name).</exception>
        </member>
        <member name="T:ComponentIngenuity.Ivan.DimStyleList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.DimStyle"/> objects accessible by index, name 
            or unique id.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.DimStyleList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.DimStyleList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.DimStyle"/> from the list corresponding to the specified 
            UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.DimStyle"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The DimStyle is not in the List.</exception>
        </member>
        <member name="M:ComponentIngenuity.Ivan.DimStyleList.GetItemsByName(System.String)">
            <summary>
            Returns all the <see cref="T:ComponentIngenuity.Ivan.DimStyle"/> objects in the list that have the 
            specified name.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns a <see cref="T:ComponentIngenuity.Ivan.DimStyleList"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyleList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyleList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.DimStyle"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.DimStyle"/> object at the specified index.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyleList.Item(System.String)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.DimStyle"/> with the specified name in the list.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.DimStyle"/> with the specified name.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The DimStyle is not in the List.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.DuplicateKeysFound">More than one DimStyle matched the Name.  Use GetItemsByName(name).</exception>
        </member>
        <member name="T:ComponentIngenuity.Ivan.DimStyleOverride">
            <summary>
            A dimstyle override object.
            </summary>
            <remarks>
            All <see cref="T:ComponentIngenuity.Ivan.Dimension"/> type objects can override the properties of
            their <see cref="T:ComponentIngenuity.Ivan.DimStyle"/>. This object holds those override values. 
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyleOverride.Name">
            <summary>
            Name of the DimStyle property.
            </summary>
            <value>
            A string.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyleOverride.Code">
            <summary>
            The group code of the DimStyle property.
            </summary>
            <value>
            A int.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DimStyleOverride.Value">
            <summary>
            The value of the DimStyle property.
            </summary>
            <value>
            An object.
            </value>
            <remarks>
            Based on the name of the property cast to the proper type.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Vertex2d">
            <summary>
            A 2D vertex object.
            </summary>
            <remarks>
            This is used to represent a point in two dimensional space.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Vertex2d.Point">
            <summary>
            The coordinates of the vertex.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Vertex2d.StartWidth">
            <summary>
            Specifies the width of the segment that starts at this point.
            </summary>
            <value>
            A double representing the width.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Vertex2d.EndWidth">
            <summary>
            Specifies the width of the segment that ends at this point.
            </summary>
            <value>
            A double representing the width.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Vertex2d.Bulge">
            <summary>
            Specifies the bulge value for the vertex.
            </summary>
            <value>
            A double representing the value.
            </value>
            <remarks>
            The bulge is the tangent of one fourth
            the included angle for an arc segment, made negative if the arc goes
            clockwise from the start point to the endpoint. A bulge of 0 indicates
            a straight segment, and a bulge of 1 is a semicircle.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Vertex2d.TangentDirection">
            <summary>
            Specifies tangent direction for the vertex.
            </summary>
            <value>
            A double representing the angle.
            </value>
            <remarks>
            This is the angle of a line tangent to the curve at the point of the vertex.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Vertex2d.VertexId">
            <summary>
            Specifies the Id of the vertex.
            </summary>
            <value>
            An int.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.PolygonMeshVertex">
            <summary>
            A mesh vertex entity.
            </summary>
            <remarks>
            Collections of mesh vertex entities are used to define the geometry of the
            <see cref="T:ComponentIngenuity.Ivan.PolygonMesh"/> entity.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PolygonMeshVertex.Point">
            <summary>
            Specifies the coordinates of the vertex.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.ControlPoint2d">
            <summary>
            A 2d control point object.
            </summary>
            <remarks>
            Control points are used by <see cref="T:ComponentIngenuity.Ivan.Spline"/> objects to
            determine their geomtery.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ControlPoint2d.Point">
            <summary>
            The control point coordinates.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object.
            </value>
            <remarks>
            This is the location of the control point in the drawing.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ControlPoint2d.Weight">
            <summary>
            The weight of the control point.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            This value specifies the influence the control point has on the curve.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.AttributeDefinition">
            <summary>
            An attribute definition entity.
            </summary>
            <remarks>
            Attributes allow for the placement of text or text-based information at
            predefined locations.  Attributes must be contained in a block.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.InsertionPoint">
            <summary>
            Specifies where to place the attribute.
            </summary>
            <value>
            A Point3D defining the location.
            </value>
            <remarks>
            The <see cref="P:ComponentIngenuity.Ivan.AttributeDefinition.HorizontalAlignment"/> property setting determines if the
            InsertionPoint, the <see cref="P:ComponentIngenuity.Ivan.AttributeDefinition.TextAlignmentPoint"/> or both are used to
            position the attribute.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.Alignment">
            <summary>
            A combined specification of both the horizontal and vertical alignment of
            the attribute.
            </summary>
            <value>
            An <see cref="P:ComponentIngenuity.Ivan.AttributeDefinition.Alignment"/> enum specifying the alignment.
            </value>
            <remarks>
            The attribute has two alignment properties, <see cref="P:ComponentIngenuity.Ivan.AttributeDefinition.HorizontalAlignment"/>
            and <see cref="P:ComponentIngenuity.Ivan.AttributeDefinition.VerticalAlignment"/>.  This property is a single value that
            is used to represent both settings.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.HorizontalAlignment">
            <summary>
            The horizontal alignment of the attribute text.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.AttributeDefinition.HorizontalAlignment"/> enum.
            </value>
            <remarks>
            Attributes with this property set to HorizontalAlignment.Left use the
            <see cref="P:ComponentIngenuity.Ivan.AttributeDefinition.InsertionPoint"/> property to position the text.
            <br/><br/>
            Attributes with this property set to HorizontalAlignment.Aligned or
            HorizontalAlignment.Fit use both, the <see cref="P:ComponentIngenuity.Ivan.AttributeDefinition.InsertionPoint"/> property and
            the <see cref="P:ComponentIngenuity.Ivan.AttributeDefinition.TextAlignmentPoint"/> property to position the text.
            <br/><br/>
            Attributes with this property set to any other value use the
            <see cref="P:ComponentIngenuity.Ivan.AttributeDefinition.TextAlignmentPoint"/> property to position the text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.VerticalAlignment">
            <summary>
            The vertical alignment of the attribute.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.AttributeDefinition.VerticalAlignment"/> enum.
            </value>
            <remarks>
            This property is combined with the <see cref="P:ComponentIngenuity.Ivan.AttributeDefinition.HorizontalAlignment"/>
            property to position the attribute.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.IsInvisible">
            <summary>
            Indicates if the attribute should remain invisible when inserted.
            </summary>
            <value>
            A boolean value.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.IsConstant">
            <summary>
            Indicates that the attribute has a fixed value.
            </summary>
            <value>
            A boolean value.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.IsVerify">
            <summary>
            Indicates verification is required upon input.
            </summary>
            <value>
            A boolean value.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.IsPreset">
            <summary>
            Indicates the attribute value is preset, and no input prompt is displayed.
            </summary>
            <value>
            A boolean value.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.IsBackward">
            <summary>
            Indicates the direction of the attribute text.
            </summary>
            <value>
            A boolean value, <b>true</b> if the text backward, <b>false</b> if it is forward.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.IsUpsideDown">
            <summary>
            Indicates the direction of the attribute text.
            </summary>
            <value>
            A boolean value, <b>true</b> if the text upside down, <b>false</b> if it is not.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.Height">
            <summary>
            The height of the attribute text.
            </summary>
            <value>
            A double expressing the height of the text in current drawing units.
            </value>
            <remarks>
            This property is used as a scale factor for both the height and the width
            of the text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.Normal">
            <summary>
            Unit normal vector to the surface of the plane of the attribute.
            </summary>
            <value>
            A Point3D whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the attribute.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.ObliqueAngle">
            <summary>
            The oblique angle of the attribute.
            </summary>
            <value>
            A double value representing the angle in radians.
            </value>
            <remarks>
            This angle is the degree to which the text slants to the right or to the
            left from vertical.  Positive values are to the right, negative values
            are to the left.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.Rotation">
            <summary>
            The rotation of the attribute.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            The angle is relative to the x axis with counter-clockwise representing
            the positive direction.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.ScaleFactor">
            <summary>
            Scale factor for the attribute.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            This value is applied to the width of the attribute to adjust its
            horizontal size.  Positive values increase its size, negative values
            decrease its size.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.DefaultValue">
            <summary>
            The default value for the attribute.
            </summary>
            <value>
            A string value.
            </value>
            <remarks>
            When an <see cref="T:ComponentIngenuity.Ivan.Attribute"/> is placed in the drawing
            this value is used if no other value is specified.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.Tag">
            <summary>
            The tag for the attribute.
            </summary>
            <value>
            A string.
            </value>
            <remarks>
            When a block, with an associated attribute, is inserted into a drawing, the
            user responds to the prompt with a value.  This value is placed in the
            corresonding <see cref="T:ComponentIngenuity.Ivan.Attribute"/> object.  The value is given
            this Tag property so that it can be retrieved under this name.  Attributes
            allow for the persistence of tag/value pairs.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.Prompt">
            <summary>
            The prompt for the attribute.
            </summary>
            <value>
            A string displaying the prompt.
            </value>
            <remarks>
            When a block is inserted into a drawing, that has an attribute associated 
            with it, the user is presented with this prompt to query them to enter an
            appropriate value.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.Style">
            <summary>
            The text style object for the attribute text.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.TextStyle"/> object.
            </value>
            <remarks>
            This will be one of the text style objects in the <see cref="P:ComponentIngenuity.Ivan.Drawing.TextStyles"/>
            collection and specifies the font information used for the text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.Thickness">
            <summary>
            The thickness of the attribute.
            </summary>
            <value>
            A double. 
            </value>
            <remarks>
            The thickness it the extrusion of the attribute text in the z direction.  This
            direction is defined by the <see cref="P:ComponentIngenuity.Ivan.AttributeDefinition.Normal"/> property.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AttributeDefinition.TextAlignmentPoint">
            <summary>
            Specifies where to place the attribute.
            </summary>
            <value>
            A Point3D defining the location.
            </value>
            <remarks>
            The <see cref="P:ComponentIngenuity.Ivan.AttributeDefinition.HorizontalAlignment"/> property setting determines if the
            <see cref="P:ComponentIngenuity.Ivan.AttributeDefinition.InsertionPoint"/>, the TextAlignmentPoint or both are used to
            position the attribute.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.BackupMethod">
            <summary>
            Specifies whether a backup file should be created on save and how it should be done.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.BackupMethod.None">
            <summary>
            Do not create a backup of the original file when saving.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.BackupMethod.Replace">
            <summary>
            Create a backup of the original file by replacing the extension with BAK.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.BackupMethod.Append">
            <summary>
            Create a backup of the original file by appending .BAK to the original file name.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.IntegrityCheckLevel">
            <summary>
            Specifies how stringently the check data is used to validate the drawing.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.IntegrityCheckLevel.None">
            <summary>
            Do not use any check data to validate the drawing.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.IntegrityCheckLevel.Shallow">
            <summary>
            Use the file level check data to validate the drawing, but do not iterate over each and every object.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.IntegrityCheckLevel.Deep">
            <summary>
            Use the file level check data to validate the drawing, and also iterate over each and every object checking their Crcs.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.FileVersion">
            <summary>
            Specifies the format version of the drawing file.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.FileVersion.None">
            <summary>
            Not assigned.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.FileVersion.Unknown">
            <summary>
            Unknown version.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.FileVersion.Unsupported">
            <summary>
            Unsupported AutoCADÂ® version.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.FileVersion.R15">
            <summary>
            Version R15 released with AutoCADÂ® 2000.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.FileVersion.R18">
            <summary>
            Version R18 released with AutoCADÂ® 2004.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.FileVersion.R21">
            <summary>
            Version R21 released with AutoCADÂ® 2007.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.FileVersion.R24">
            <summary>
            Version R24 released with AutoCADÂ® 2010.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.EntityColor">
            <summary>
            Specifies the color of the entity.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.EntityColor.ByBlock">
            <summary>
            Assumes the color of block it is a member of.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.EntityColor.Red">
            <summary>
            The color red.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.EntityColor.Yellow">
            <summary>
            The color yellow.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.EntityColor.Green">
            <summary>
            The color green.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.EntityColor.Cyan">
            <summary>
            The color cyan.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.EntityColor.Blue">
            <summary>
            The color blue.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.EntityColor.Magenta">
            <summary>
            The color magenta.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.EntityColor.White">
            <summary>
            The color white.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.EntityColor.ByLayer">
            <summary>
            Assumes the color of the layer it is on.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.ObjectType">
            <summary>
            Specifies the type of the object.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.AlignedDimension">
            <summary>
            AlignedDimension
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.TwoLineAngularDimension">
            <summary>
            TwoLineAngularDimension
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.AppIDTable">
            <summary>
            AppIDTable
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Arc">
            <summary>
            Arc
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.ArcDimension">
            <summary>
            ArcDimension
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Argb">
            <summary>
            Arbg
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.AttributeDefinition">
            <summary>
            AttributeDefinition
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Attribute">
            <summary>
            Attribute
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Block">
            <summary>
            Block
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.BlockHeader">
            <summary>
            BlockHeader
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.BlockIterator">
            <summary>
            BlockIterator
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.BlockReference">
            <summary>
            BlockReference
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.BlockTable">
            <summary>
            BlockTable
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Body">
            <summary>
            Body
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Circle">
            <summary>
            Circle
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.ClassDefinition">
            <summary>
            ClassDefinition
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Color">
            <summary>
            Color
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.ControlPoint">
            <summary>
            ControlPoint
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.CustomEntity">
            <summary>
            CustomEntity
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.CustomObject">
            <summary>
            CustomObject
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.DbColor">
            <summary>
            DBColor
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.DiametricDimension">
            <summary>
            DiametricDimension
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Dictionary">
            <summary>
            Dictionary
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.DictionaryVar">
            <summary>
            DictionaryVar
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.DictionaryWithDefault">
            <summary>
            DictionaryWithDefault
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.DimStyle">
            <summary>
            DimStyle
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.DimStyleTable">
            <summary>
            DimStyleTable
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Ellipse">
            <summary>
            Ellipse
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.EntityContext">
            <summary>
            EntityContext
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.ExtendedDataApp">
            <summary>
            ExtendedDataApp
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.ExtendedDataItem">
            <summary>
            ExtendedDataItem
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Face3d">
            <summary>
            Face3d
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.FaceRecord">
            <summary>
            FaceRecord
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Font">
            <summary>
            Font
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Group">
            <summary>
            Group
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Hatch">
            <summary>
            Hatch
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.HatchDefinitionLine">
            <summary>
            HatchDefinitionLine
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.HatchPath">
            <summary>
            HatchPath
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.HatchPathSegment">
            <summary>
            HatchPathSegment
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Hyperlink">
            <summary>
            Hyperlink
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.JoggedDimension">
            <summary>
            JoggedDimension
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Layer">
            <summary>
            Layer
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.LayerTable">
            <summary>
            LayerTable
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Layout">
            <summary>
            Layout
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Leader">
            <summary>
            Leader
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.LightweightPolyline">
            <summary>
            LightweightPolyline
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.LightweightVertex">
            <summary>
            LightweightVertex
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Line">
            <summary>
            Line
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Linetype">
            <summary>
            Linetype
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.LinetypePatternElement">
            <summary>
            LinetypePatternElement
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.LinetypeTable">
            <summary>
            LinetypeTable
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.MInsertBlockReference">
            <summary>
            MInsertBlockReference
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.MLine">
            <summary>
            MLine
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.MLineParmSet">
            <summary>
            MLineParmSet
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.MLineStyle">
            <summary>
            MLineStyle
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.MLineVertex">
            <summary>
            MLineVertex
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.MLStyleElement">
            <summary>
            MLStyleElement
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.MText">
            <summary>
            MText
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.NamedSectionLocator">
            <summary>
            NamedSectionLocator
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Ole2Frame">
            <summary>
            Ole2Frame
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.OrdinateDimension">
            <summary>
            OrdinateDimension
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.PageLocator">
            <summary>
            PageLocator
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.PlaceHolder">
            <summary>
            PlaceHolder
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.PlotSettings">
            <summary>
            PlotSettings
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Point">
            <summary>
            Point
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Point2d">
            <summary>
            Point2d
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Point3d">
            <summary>
            Point3d
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.PolyfaceMesh">
            <summary>
            PolyfaceMesh
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.PolyfaceMeshVertex">
            <summary>
            PolyfaceMeshVertex
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.PolygonMesh">
            <summary>
            PolygonMesh
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.PolygonMeshVertex">
            <summary>
            PolygonMeshVertex
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Polyline2d">
            <summary>
            Polyline2d
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Polyline3d">
            <summary>
            Polyline3d
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.ProxyEntity">
            <summary>
            ProxyEntity
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.ProxyObject">
            <summary>
            ProxyObject
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.PsViewport">
            <summary>
            PsViewport
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.RadialDimension">
            <summary>
            RadialDimension
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.RasterImage">
            <summary>
            RasterImage
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.RasterImageDef">
            <summary>
            RasterImageDef
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.RasterVariables">
            <summary>
            RasterVariables
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Ray">
            <summary>
            Ray
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Region">
            <summary>
            Region
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.RegisteredApp">
            <summary>
            RegisteredApp
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.RegisteredEntity">
            <summary>
            RegisteredEntity
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.RegisteredObject">
            <summary>
            RegisteredObject
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.RotatedDimension">
            <summary>
            RotatedDimension
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.SectionBuffer">
            <summary>
            SectionBuffer
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.SectionFile">
            <summary>
            SectionFile
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.SectionMap">
            <summary>
            SectionMap
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Shape">
            <summary>
            Shape
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Shapefile">
            <summary>
            Shapefile
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.ShapefileTable">
            <summary>
            ShapefileTable
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Solid">
            <summary>
            Solid
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Solid3d">
            <summary>
            Solid3d
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Spline">
            <summary>
            Spline
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.SymbolTable">
            <summary>
            SymbolTable
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Table">
            <summary>
            Table
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Text">
            <summary>
            Text
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.TextStyle">
            <summary>
            TextStyle
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Tolerance">
            <summary>
            Tolerance
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Trace">
            <summary>
            Trace
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.ThreePointAngularDimension">
            <summary>
            ThreePointAngularDimension
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.UCS">
            <summary>
            UCS
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.UCSTable">
            <summary>
            UCSTable
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Vertex">
            <summary>
            Vertex
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Vertex2d">
            <summary>
            Vertex2d
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Vertex3d">
            <summary>
            Vertex3d
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.View">
            <summary>
            View
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.ViewTable">
            <summary>
            ViewTable
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.Viewport">
            <summary>
            Viewport
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.ViewportTable">
            <summary>
            ViewportTable
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.XLine">
            <summary>
            XLine
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.XRecord">
            <summary>
            XRecord
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ObjectType.XRecordDataItem">
            <summary>
            XRecordDataItem
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Lineweight">
            <summary>
            Specifies the line weight.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.ByLwDefault">
            <summary>
            Assumes the weight set in the <see cref="P:ComponentIngenuity.Ivan.Drawing.LwDefault"/> system variable.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.ByBlock">
            <summary>
            Assumes the weight setting of the <see cref="T:ComponentIngenuity.Ivan.BlockReference"/> the line is a member of.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.ByLayer">
            <summary>
            Assumes the weight setting of the <see cref="T:ComponentIngenuity.Ivan.Layer"/> the line is on.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm000">
            <summary>
            The line is drawn as thin as possible. (On display, one pixel)
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm005">
            <summary>
            The line weight is .05 millimeters or .002 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm009">
            <summary>
            The line weight is .09 millimeters or .003 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm013">
            <summary>
            The line weight is .13 millimeters or .005 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm015">
            <summary>
            The line weight is .15 millimeters or .006 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm018">
            <summary>
            The line weight is .18 millimeters or .007 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm020">
            <summary>
            The line weight is .20 millimeters or .008 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm025">
            <summary>
            The line weight is .25 millimeters or .010 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm030">
            <summary>
            The line weight is .30 millimeters or .012 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm035">
            <summary>
            The line weight is .35 millimeters or .014 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm040">
            <summary>
            The line weight is .40 millimeters or .016 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm050">
            <summary>
            The line weight is .50 millimeters or .020 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm053">
            <summary>
            The line weight is .53 millimeters or .021 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm060">
            <summary>
            The line weight is .60 millimeters or .024 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm070">
            <summary>
            The line weight is .70 millimeters or .028 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm080">
            <summary>
            The line weight is .80 millimeters or .031 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm090">
            <summary>
            The line weight is .90 millimeters or .035 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm100">
            <summary>
            The line weight is 1.00 millimeters or .039 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm106">
            <summary>
            The line weight is 1.06 millimeters or .042 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm120">
            <summary>
            The line weight is 1.20 millimeters or .047 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm140">
            <summary>
            The line weight is 1.40 millimeters or .056 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm158">
            <summary>
            The line weight is 1.58 millimeters or .062 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm200">
            <summary>
            The line weight is 2.00 millimeters or .078 inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Lineweight.mm211">
            <summary>
            The line weight is 2.11 millimeters or .083 inches.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.PlotType">
            <summary>
            Specifies the plot area for layouts and plot configurations.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotType.Display">
            <summary>
            The plot area is the currently displayed model view.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotType.Extents">
            <summary>
            The plot area is everything in the drawing.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotType.Limits">
            <summary>
            The plot area is the current drawing limits.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotType.View">
            <summary>
            The plot area is the currently selected view.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotType.Window">
            <summary>
            The plot area is the currently selected windowed area.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotType.Layout">
            <summary>
            The plot area is everything that falls within the area of the current paper size.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.PlotPaperUnits">
            <summary>
            Specifies the units for the display of layouts and plot configurations.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotPaperUnits.Inches">
            <summary>
            The units are inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotPaperUnits.Millimeters">
            <summary>
            The units are millimeters.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotPaperUnits.Pixels">
            <summary>
            The units are pixels.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.PlotRotation">
            <summary>
            Specifies the rotation angle for layouts and plot configurations.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotRotation.deg0">
            <summary>
            The angle is 0.0 radians or 0 degrees.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotRotation.deg90">
            <summary>
            The angle is 1.57 radians or 90 degrees.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotRotation.deg180">
            <summary>
            The angle is 3.14 radians or 180 degrees.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotRotation.deg270">
            <summary>
            The angle is 4.71 radians or 270 degrees.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.PlotScale">
            <summary>
            Specifies the standard scale for layouts and plot configurations.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ScaleToFit">
            <summary>
            The scale is "to fit".
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1_128in_1ft">
            <summary>
            The scale is 1/128 inch equals 1 foot.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1_64in_1ft">
            <summary>
            The scale is 1/64 inch equals 1 foot.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1_32in_1ft">
            <summary>
            The scale is 1/32 inch equals 1 foot.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1_16in_1ft">
            <summary>
            The scale is 1/16 inch equals 1 foot.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_3_32in_1ft">
            <summary>
            The scale is 3/32 inch equals 1 foot.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1_8in_1ft">
            <summary>
            The scale is 1/8 inch equals 1 foot.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_3_16in_1ft">
            <summary>
            The scale is 3/16 inch equals 1 foot.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1_4in_1ft">
            <summary>
            The scale is 1/4 inch equals 1 foot.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_3_8in_1ft">
            <summary>
            The scale is 3/8 inch equals 1 foot.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1_2in_1ft">
            <summary>
            The scale is 1/2 inch equals 1 foot.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_3_4in_1ft">
            <summary>
            The scale is 3/4 inch equals 1 foot.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1in_1ft">
            <summary>
            The scale is 1 inch equals 1 foot.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_3in_1ft">
            <summary>
            The scale is 3 inches equals 1 foot.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_6in_1ft">
            <summary>
            The scale is 6 inches equals 1 foot.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1ft_1ft">
            <summary>
            The scale is 1 foot equals 1 foot.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1_1">
            <summary>
            The scale is 1 to 1.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1_2">
            <summary>
            The scale is 1 to 2.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1_4">
            <summary>
            The scale is 1 to 4.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1_8">
            <summary>
            The scale is 1 to 8.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1_10">
            <summary>
            The scale is 1 to 10.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1_16">
            <summary>
            The scale is 1 to 16.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1_20">
            <summary>
            The scale is 1 to 20.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1_30">
            <summary>
            The scale is 1 to 30.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1_40">
            <summary>
            The scale is 1 to 40.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1_50">
            <summary>
            The scale is 1 to 50.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_1_100">
            <summary>
            The scale is 1 to 100.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_2_1">
            <summary>
            The scale is 2 to 1.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_4_1">
            <summary>
            The scale is 4 to 1.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_8_1">
            <summary>
            The scale is 8 to 1.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_10_1">
            <summary>
            The scale is 10 to 1.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PlotScale.ratio_100_1">
            <summary>
            The scale is 100 to 1.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.OrthographicViewType">
            <summary>
            Specifies the type of orthographic view.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.OrthographicViewType.NotOrthographic">
            <summary>
            The view is not orhtographic.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.OrthographicViewType.Top">
            <summary>
            A top orthographic view.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.OrthographicViewType.Bottom">
            <summary>
            A bottom orthographic view.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.OrthographicViewType.Front">
            <summary>
            A front orthographic view.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.OrthographicViewType.Back">
            <summary>
            A back orthographic view.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.OrthographicViewType.Left">
            <summary>
            A left orthographic view.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.OrthographicViewType.Right">
            <summary>
            A right orthographic view.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.FilterMethod">
            <summary>
            Specifies the type of search filter for the EntityDatabase Select method.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.FilterMethod.ReturnAll">
            <summary>
            Do not apply filter and return all.  If used for the layer filter method
            return entities on all layers.  If used for the type filter method
            return all entity types.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.FilterMethod.Inclusive">
            <summary>
            Include all entities whose properties match something on the list.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.FilterMethod.Exclusive">
            <summary>
            Exclude all entities whose properties match something on the list.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.PolylineType">
            <summary>
            Specifies the type of polyline object.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PolylineType.SimplePoly">
            <summary>
            A simple polyline.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PolylineType.FitCurvePoly">
            <summary>
            A fitted curve polyline.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PolylineType.QuadSplinePoly">
            <summary>
            A quadratic B-spline polyline.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PolylineType.CubicSplinePoly">
            <summary>
            A cubic B-spline polyline.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Polyline3dType">
            <summary>
            Specifies the type of 3D polyline object.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Polyline3dType.Simple3DPoly">
            <summary>
            A simple polyline.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Polyline3dType.QuadSpline3DPoly">
            <summary>
            A quadratic B-spline polyline.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Polyline3dType.CubicSpline3DPoly">
            <summary>
            A cubic B-spline polyline.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Alignment">
            <summary>
            Specifies the vertical and horizontal alignment for attributes, attribute
            references and text.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Alignment.Left">
            <summary>
            Align to the left.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Alignment.Center">
            <summary>
            Align to the center.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Alignment.Right">
            <summary>
            Align to the right.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Alignment.Aligned">
            <summary>
            Use the insertion point and text alignment point to determine position.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Alignment.Middle">
            <summary>
            Align to the middle.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Alignment.Fit">
            <summary>
            Use the insertion point and text alignment point to determine position.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Alignment.TopLeft">
            <summary>
            Align to the top-left.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Alignment.TopCenter">
            <summary>
            Align to the top-center.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Alignment.TopRight">
            <summary>
            Align to the top-right.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Alignment.MiddleLeft">
            <summary>
            Align to the middle-left.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Alignment.MiddleCenter">
            <summary>
            Align to the middle-center.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Alignment.MiddleRight">
            <summary>
            Align to the middle-right.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Alignment.BottomLeft">
            <summary>
            Align to the bottom-left.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Alignment.BottomCenter">
            <summary>
            Align to the bottom-center.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.Alignment.BottomRight">
            <summary>
            Align to the bottom-right.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.HorizontalAlignment">
            <summary>
            Specifies the horizontal alignment for attributes, attribute
            references and text.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.HorizontalAlignment.Left">
            <summary>
            Align to the left.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.HorizontalAlignment.Center">
            <summary>
            Align to the center.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.HorizontalAlignment.Right">
            <summary>
            Align to the right.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.HorizontalAlignment.Aligned">
            <summary>
            Use the insertion point and the text alignment point to determine position.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.HorizontalAlignment.Middle">
            <summary>
            Align to the middle.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.HorizontalAlignment.Fit">
            <summary>
            Use the insertion point and the text alignment point to determine position.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.VerticalAlignment">
            <summary>
            Specifies the vertical alignment for attributes, attribute
            references and text.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.VerticalAlignment.Baseline">
            <summary>
            Align to the baseline.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.VerticalAlignment.Bottom">
            <summary>
            Align to the bottom.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.VerticalAlignment.Middle">
            <summary>
            Align to the middle.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.VerticalAlignment.Top">
            <summary>
            Align to the top.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.AttachmentPoint">
            <summary>
            Specifies where the insertion point aligns with the text boundry.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.AttachmentPoint.TopLeft">
            <summary>
            Top-left justified, text runs over downward.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.AttachmentPoint.TopCenter">
            <summary>
            Top-center justified, text runs over downward.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.AttachmentPoint.TopRight">
            <summary>
            Top-right justified, text runs over downward.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.AttachmentPoint.MiddleLeft">
            <summary>
            Middle-left justified, text runs over up and down.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.AttachmentPoint.MiddleCenter">
            <summary>
            Middle-center justified, text runs over up and down.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.AttachmentPoint.MiddleRight">
            <summary>
            Middle-right justified, text runs over up and down.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.AttachmentPoint.BottomLeft">
            <summary>
            Bottom-left justified, text runs over upward.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.AttachmentPoint.BottomCenter">
            <summary>
            Bottom-center justified, text runs over upward.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.AttachmentPoint.BottomRight">
            <summary>
            Bottom-right justified, text runs over upward.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.DrawingDirection">
            <summary>
            Specifies the direction a paragraph of text is read.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.DrawingDirection.LeftToRight">
            <summary>
            Read left to right.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.DrawingDirection.RightToLeft">
            <summary>
            Read right to left.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.DrawingDirection.TopToBottom">
            <summary>
            Read top to bottom.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.DrawingDirection.BottomToTop">
            <summary>
            Read bottom to top.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.DrawingDirection.ByStyle">
            <summary>
            Direction dependent on text style.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.LineSpacingStyle">
            <summary>
            Specifies the line spacing style for MText.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.LineSpacingStyle.AtLeast">
            <summary>
            The spacing between different lines of text is adjusted automatically,
            determined by the height of the largest character in a line of text. 
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.LineSpacingStyle.Exactly">
            <summary>
            The spacing is the same size for all the lines in the MText object
            ignoring any formatting overrides.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.MLineJustification">
            <summary>
            Specifies how the MLine is justified about its base point.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.MLineJustification.Top">
            <summary>
            The top line start point is the base point.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.MLineJustification.Center">
            <summary>
            A point centered between the top and bottom start points is the base point.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.MLineJustification.Bottom">
            <summary>
            The bottom line start point is the base point.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.AnnotationType">
            <summary>
            Specifies the type of annotation attached to a leader.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.AnnotationType.MText">
            <summary>
            The annotation is a <see cref="F:ComponentIngenuity.Ivan.AnnotationType.MText"/> object.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.AnnotationType.Tolerance">
            <summary>
            The annotation is a <see cref="F:ComponentIngenuity.Ivan.AnnotationType.Tolerance"/> object.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.AnnotationType.Block">
            <summary>
            The annotation is a <see cref="F:ComponentIngenuity.Ivan.AnnotationType.Block"/> object.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.AnnotationType.None">
            <summary>
            The leader has no annotation.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.LeaderType">
            <summary>
            Specifies the type of leader.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.LeaderType.LineNoArrow">
            <summary>
            A line with no arrow.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.LeaderType.SplineNoArrow">
            <summary>
            A spline with no arrow.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.LeaderType.LineWithArrow">
            <summary>
            A line with an arrow.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.LeaderType.SplineWithArrow">
            <summary>
            A spline with an arrow.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.ImageResolutionUnits">
            <summary>
            Specifies the resolution units for an image definition.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ImageResolutionUnits.None">
            <summary>
            No units.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ImageResolutionUnits.Millimeters">
            <summary>
            The units are millimeters.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ImageResolutionUnits.Centimeters">
            <summary>
            The units are centimeters.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ImageResolutionUnits.Meters">
            <summary>
            The units are meters.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ImageResolutionUnits.Kilometers">
            <summary>
            The units are kilometers.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ImageResolutionUnits.Inches">
            <summary>
            The units are inches.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ImageResolutionUnits.Feet">
            <summary>
            The units are feet.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ImageResolutionUnits.Yards">
            <summary>
            The units are yards.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ImageResolutionUnits.Miles">
            <summary>
            The units are miles.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.ImageBoundryType">
            <summary>
            Specifies the boundry type of an image.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ImageBoundryType.Rectangular">
            <summary>
            The boundry is a rectangle.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ImageBoundryType.Polygonal">
            <summary>
            The boundry is a polygon.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.PolygonMeshType">
            <summary>
            Specifies the type of polygon mesh object.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PolygonMeshType.SimpleMesh">
            <summary>
            A simple mesh with no fitting or smoothing.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PolygonMeshType.QuadSurfaceMesh">
            <summary>
            A quadratic B-spline fitted surface.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PolygonMeshType.CubicSurfaceMesh">
            <summary>
            A cubic B-spline fitted surface.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PolygonMeshType.BezierSurfaceMesh">
            <summary>
            A bezier fitted surface.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.BaseUCSType">
            <summary>
            Specifies the type of the base ucs.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.BaseUCSType.None">
            <summary>
            None.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.BaseUCSType.World">
            <summary>
            The world coordinate system. 
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.BaseUCSType.UCS">
            <summary>
            A user coordinate system.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.RenderMode">
            <summary>
            Specifies how the graphic object is rendered.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.RenderMode.Optimized2D">
            <summary>
            Standard 2D rendering.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.RenderMode.Wireframe">
            <summary>
            Render as wireframe.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.RenderMode.Hiddenline">
            <summary>
            Render using hiddenline removal.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.RenderMode.Flatshade">
            <summary>
            Render using flat shading.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.RenderMode.Gouraudshade">
            <summary>
            Render using gouraud shading.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.RenderMode.FlatshadeWireframe">
            <summary>
            Render using flat shading with wireframes.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.RenderMode.GouraudshadeWireframe">
            <summary>
            Render using gouraud shading with wireframes.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.UCSType">
            <summary>
            Specifies the type of the ucs.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.UCSType.Unnamed">
            <summary>
            The UCS is unnamed.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.UCSType.Named">
            <summary>
            The UCS is named.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.ShadePlotMode">
            <summary>
            Specifies the shadeplot mode of the viewport.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ShadePlotMode.AsDisplayed">
            <summary>
            As Displayed.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ShadePlotMode.Wireframe">
            <summary>
            Wireframe.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ShadePlotMode.Hidden">
            <summary>
            Hidden.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.ShadePlotMode.Rendered">
            <summary>
            Rendered.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.HatchStyle">
            <summary>
            Specifies the hatch style.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.HatchStyle.Normal">
            <summary>
            Hatching occurs inward from the
            outermost area boundary, when an internal boundary is detected,
            hatching is turned off until it detects another boundary.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.HatchStyle.Outer">
            <summary>
            Only the outermost area is filled. Hatching occurs inward from
            the area boundary, if an internal boundry is found hatching is turned off
            and never turned back on.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.HatchStyle.Ignore">
            <summary>
            Hatches over entire area including internal objects.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.PatternType">
            <summary>
            Specifies the pattern type used by the hatch.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PatternType.UserDefined">
            <summary>
            The pattern was selected from the current linetype.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PatternType.PreDefined">
            <summary>
            The pattern was selected from the acad.pat file.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.PatternType.CustomDefined">
            <summary>
            The patter was selected from a file other than the acad.pat file.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.SegmentType">
            <summary>
            Specifies the HatchPathSegment type.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.SegmentType.HatchLineSegment">
            <summary>
            HatchLineSegment.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.SegmentType.HatchCircularArcSegment">
            <summary>
            HatchCircularArcSegment.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.SegmentType.HatchEllipticalArcSegment">
            <summary>
            HatchEllipticalArcSegment.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.SegmentType.HatchSplineSegment">
            <summary>
            HatchSplineSegment.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.SegmentType.HatchPolylineSegment">
            <summary>
            HatchPolylineSegment.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.SplineType">
            <summary>
            Specifies the type of the Spline.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.SplineType.FitPoints">
            <summary>
            The Spline object is define by a set of fit points.
            </summary>
        </member>
        <member name="F:ComponentIngenuity.Ivan.SplineType.ControlPoints">
            <summary>
            The Spline object is define by a set of control points and knots.
            </summary>
        </member>
        <member name="T:ComponentIngenuity.Ivan.MLineVertexList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.MLineVertex"/> objects accessible by index.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.MLineVertexList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineVertexList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineVertexList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.MLineVertex"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.MLineVertex"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.FaceRecordList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.FaceRecord"/> objects accessible by index or 
            unique id.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.FaceRecordList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.FaceRecordList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.FaceRecord"/> from the list corresponding to the specified 
            UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.FaceRecord"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The FaceRecord is not in the List.</exception>
        </member>
        <member name="P:ComponentIngenuity.Ivan.FaceRecordList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.FaceRecordList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.FaceRecord"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.FaceRecord"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.ClassDefinitionList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.ClassDefinition"/> objects accessible by index.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.ClassDefinitionList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ClassDefinitionList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ClassDefinitionList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.ClassDefinition"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.ClassDefinition"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.EntityDatabase">
            <summary>
            Manages access and retrieval of the <see cref="T:ComponentIngenuity.Ivan.DrawingEntity"/> objects
            in the drawing.
            </summary>
            <remarks>
            All <see cref="T:ComponentIngenuity.Ivan.Block"/> objects expose a EntityDatabase object as the Entities
            property allowing access to its constituent entities.
            </remarks>
        </member>
        <member name="M:ComponentIngenuity.Ivan.EntityDatabase.Select">
            <summary>
            Returns all entities of the Block.
            </summary>
            <returns>
            A <see cref="T:ComponentIngenuity.Ivan.DrawingEntityList"/>.
            </returns>
            <remarks>
            This version of the Select method is equivalent to setting the <see cref="T:ComponentIngenuity.Ivan.FilterMethod"/>
            to ReturnAll for both layerFilter and entityTypeFilter.
            </remarks>
        </member>
        <member name="M:ComponentIngenuity.Ivan.EntityDatabase.Select(System.Int32)">
            <summary>
            Returns all entities of a Block in pages.
            </summary>
            <param name="pageSize">
            Specifies the number of entities contained in each page.  A value of 0 will
            cause all entities to be returned in a single page.
            </param>
            <returns>
            A <see cref="T:ComponentIngenuity.Ivan.DrawingEntityList"/>.
            </returns>
            <remarks>
            This version of the Select method is equivalent to setting the FilterMethod
            to ReturnAll for both layerFilter and entityTypeFilter.
            </remarks>
        </member>
        <member name="M:ComponentIngenuity.Ivan.EntityDatabase.Select(ComponentIngenuity.Ivan.FilterMethod,System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Returns entities of a Block in pages, filtered by Layer.
            </summary>
            <param name="layerFilter">
            A <see cref="T:ComponentIngenuity.Ivan.FilterMethod"/> that specifies if the entities on the layers in 
            layerNames should be included or excluded from the query.  If set to ReturnAll
            the layerNames are ignored.
            </param>
            <param name="layerNames">
            A list of strings representing the <see cref="T:ComponentIngenuity.Ivan.Layer"/> names used to define
            the entities of interest in the query.
            </param>
            <param name="pageSize">
            Specifies the number of entities contained in each page.  A value of 0 will
            cause all entities to be returned in a single page.
            </param>
            <returns>
            A <see cref="T:ComponentIngenuity.Ivan.DrawingEntityList"/>.
            </returns>
            <remarks>
            This version of the Select method is equivalent to setting the FilterMethod
            to ReturnAll for entityTypeFilter.
            </remarks>
        </member>
        <member name="M:ComponentIngenuity.Ivan.EntityDatabase.Select(ComponentIngenuity.Ivan.FilterMethod,System.Collections.Generic.List{System.String},ComponentIngenuity.Ivan.FilterMethod,System.Collections.Generic.List{ComponentIngenuity.Ivan.ObjectType},System.Int32)">
            <summary>
            Returns entities of a Block in pages, filtered by Layer and Entity type.
            </summary>
            <param name="layerFilter">
            A <see cref="T:ComponentIngenuity.Ivan.FilterMethod"/> that specifies if the entities on the layers in 
            layerNames should be included or excluded from the query.  If set to ReturnAll
            the layerNames are ignored.
            </param>
            <param name="layerNames">
            A list of strings representing the <see cref="T:ComponentIngenuity.Ivan.Layer"/> names used to define
            the entities of interest in the query.
            </param>
            <param name="entityTypeFilter">
            A <see cref="T:ComponentIngenuity.Ivan.FilterMethod"/> that specifies if the entity types on the layers in 
            entityTypes should be included or excluded from the query.  If set to ReturnAll
            the entityTypes are ignored.
            </param>
            <param name="entityTypes">
            A list of <see cref="T:ComponentIngenuity.Ivan.ObjectType"/> enums representing the <see cref="T:ComponentIngenuity.Ivan.DrawingEntity"/> types
            of interest in the query.
            </param>
            <param name="pageSize">
            Specifies the number of entities contained in each page.  A value of 0 will
            cause all entities to be returned in a single page.
            </param>
            <returns>
            A <see cref="T:ComponentIngenuity.Ivan.DrawingEntityList"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.EntityDatabase.NextPage">
            <summary>
            Returns the next page of entity results for the Select.
            </summary>
            <returns>
            A <see cref="T:ComponentIngenuity.Ivan.DrawingEntityList"/>.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.EntityDatabaseEOF">End of results reached.</exception>
        </member>
        <member name="M:ComponentIngenuity.Ivan.EntityDatabase.PreviousPage">
            <summary>
            Returns the previous page of entity results for the Select.
            </summary>
            <returns>
            A <see cref="T:ComponentIngenuity.Ivan.DrawingEntityList"/>.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.EntityDatabaseBOF">Beginning of results reached.</exception>
        </member>
        <member name="P:ComponentIngenuity.Ivan.EntityDatabase.CurrentPage">
            <summary>
            Current page number of Select results.
            </summary>
            <value>
            An int representing the current page number.  CurrentPage is base 1.
            </value>
            <remarks>
            If <see cref="P:ComponentIngenuity.Ivan.EntityDatabase.PageSize"/> is less than the total result set count, then multiple pages
            of results will exist.  Each page is accessed by using the <see cref="M:ComponentIngenuity.Ivan.EntityDatabase.NextPage"/>
            and <see cref="M:ComponentIngenuity.Ivan.EntityDatabase.PreviousPage"/> methods.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.EntityDatabase.PageSize">
            <summary>
            Page size for the Select statement.
            </summary>
            <value>
            An int representing the page size.
            </value>
            <remarks>
            This is the value for page size that was specified in the call to <see cref="M:ComponentIngenuity.Ivan.EntityDatabase.Select"/>.  This
            is the maximum number of results that will be in each page.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.EntityDatabase.BOF">
            <summary>
            Indicates that the current page position in the result set is at the beginning.
            </summary>
            <value>
            A bool.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.EntityDatabase.EOF">
            <summary>
            Indicates that the current page position in the result set is at the end.
            </summary>
            <value>
            A bool.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Layer">
            <summary>
            A layer object.
            </summary>
            <remarks>
            A Layer object represents a single layer on the drawing.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Layer.Name">
            <summary>
            The name of the layer.
            </summary>
            <value>
            A string containing the name.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Layer.Color">
            <summary>
            Color of the layer.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Color"/> object that specifies the color attributes.
            </value>
            <remarks>
            Colors can originate from an AutoCADÂ® Color Index (ACI), a True Color
            or a Color Book.  The Color property exposes a <see cref="T:ComponentIngenuity.Ivan.Color"/>
            object that can be used to get the ACI value or the RGB values.  In
            addition, if the color originates from a Color Book, it will provide
            the name of the Color Book as well as the particular entry selected
            from that book.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Layer.IsFrozen">
            <summary>
            Specifies if the layer is frozen.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            true - layer is frozen, not visible, not regenerated
            <br/>
            false - layer is not frozen, visible, regenerated
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Layer.IsLayerOn">
            <summary>
            Specifies if the layer is on.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            true - layer is on, visible, regenerated
            <br/>
            false - layer is off, not visible, regenerated
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Layer.IsLocked">
            <summary>
            Specifies if the layer is locked.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            true - layer is locked, cannot edit objects
            <br/>
            false - layer is not locked
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Layer.IsPlottable">
            <summary>
            Specifies if the layer can be plotted.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            true - layer can be plotted
            <br/>
            false - layer cannot be plotted
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Layer.IsFrozenDefault">
            <summary>
            Specifies if the layer is to be frozen in newly created viewports.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            true - layer is frozen by default
            <br/>
            false - layer is not frozen
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Layer.Linetype">
            <summary>
            Specifies if the linetype of the layer.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Layer.Linetype"/> object.
            </value>
            <remarks>
            The is the default linetype for entities added to a layer.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Layer.Lineweight">
            <summary>
            Specifies if the lineweight of the layer.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Layer.Lineweight"/> enum.
            </value>
            <remarks>
            The is the default lineweight for entities added to a layer.  Where ever
            "ByLayer" is used to reference a lineweight this property is used.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Layer.PlotStyle">
            <summary>
            Specifies if the plotsyle for the layer.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Layer.PlotStyle"/> object.
            </value>
            <remarks>
            This represents the named style associated with the plotting of the layer.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Vertex3d">
            <summary>
            A 3D vertex object.
            </summary>
            <remarks>
            This is used to represent a point in three dimensional space.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Vertex3d.Point">
            <summary>
            The coordinates of the vertex.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.RegisteredEntity">
            <summary>
            A custom registered entity.
            </summary>
            <remarks>
            Third party applications that interface with AutoCADÂ® will build objects
            that are specific to their application.  These objects are represented
            in Ivan as RegisteredObjects and RegisteredEntitys.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RegisteredEntity.AppName">
            <summary>
            The name of the registered application that hosts this class.
            </summary>
            <value>
            A string.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RegisteredEntity.ClassName">
            <summary>
            The name of the class for the entity.
            </summary>
            <remarks>
            This is the name of the entity type for the custom entity.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.RadialDimension">
            <summary>
            A radial dimension.
            </summary>
            <remarks>
            A dimension measuring the radius of a circle or arc.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RadialDimension.CenterPoint">
            <summary>
            Specifies center of the circle or arc of the dimension.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RadialDimension.CurvePoint">
            <summary>
            Specifies point on the circle or arc of the dimension.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
            <remarks>
            This is the first point of the dimension line and lies on the circle or
            arc.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RadialDimension.LeaderLength">
            <summary>
            Specifies the length of the leader on the dimension.
            </summary>
            <value>
            A double representing the length in drawing units.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.PolyfaceMesh">
            <summary>
            A polyface mesh entity.
            </summary>
            <remarks>
            A polyface mesh is a mesh composed by joining a series of faces that, are
            in turn, composed by joining a set of vertices.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PolyfaceMesh.Vertices">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.PolyfaceMeshVertex"/> objects that constitute the
            vertices of the mesh.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.PolyfaceMeshVertexList"/> object.
            </value>
            <remarks>
            These vertices are connected to form the faces that make up the mesh.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.PolyfaceMesh.Faces">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.FaceRecord"/> objects that constitute the
            faces of the mesh.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.FaceRecordList"/> object.
            </value>
            <remarks>
            These faces are connected to form the mesh.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.ControlPoint3d">
            <summary>
            A 3d control point object.
            </summary>
            <remarks>
            Control points are used by <see cref="T:ComponentIngenuity.Ivan.Spline"/> objects to
            determine their geomtery.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ControlPoint3d.Point">
            <summary>
            The control point coordinates.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
            <remarks>
            This is the location of the control point in the drawing.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.ControlPoint3d.Weight">
            <summary>
            The weight of the control point.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            This value specifies the influence the control point has on the curve.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.MLineStyleElementList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.MLineStyleElement"/> objects accessible by index.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.MLineStyleElementList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyleElementList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyleElementList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.MLineStyleElement"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.MLineStyleElement"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.MText">
            <summary>
            A multi-line text entity.
            </summary>
            <remarks>
            This object represents lines of text within a bounded area.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MText.InsertionPoint">
            <summary>
            Specifies the location of the mtext object.
            </summary>
            <value>
            A Point3D defining the location.
            </value>
            <remarks>
            The insertion point coincides with one of the corners of the bounding
            area depending on the value of the <see cref="P:ComponentIngenuity.Ivan.MText.AttachmentPoint"/> property.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MText.HasBackgroundMask">
            <summary>
            Specifies if an opaque background is placed behing the text.
            </summary>
            <value>
            A bool.
            </value>
            <remarks>
            If this property is true then <see cref="P:ComponentIngenuity.Ivan.MText.BackgroundColor"/> and <see cref="P:ComponentIngenuity.Ivan.MText.BorderOffsetFactor"/>
            have meaningful values.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MText.BorderOffsetFactor">
            <summary>
            Specifies the margin around the text for the opaque background.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            The value is based on the text height. A factor of 1.0 exactly fits the 
            MText entity. A factor of 1.75 extends the background by 0.75 times 
            the text height.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MText.BackgroundColor">
            <summary>
            Specifies the color for the background.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Color"/> object.
            </value>
            <remarks>
            This property will be null if <see cref="P:ComponentIngenuity.Ivan.MText.HasBackgroundMask"/> is <b>false</b>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MText.Normal">
            <summary>
            Unit normal vector to the surface of the plane of the text.
            </summary>
            <value>
            A Point3D whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MText.Rotation">
            <summary>
            The rotation of the text.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            The angle is relative to the x axis with counter-clockwise representing
            the positive direction.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MText.RectWidth">
            <summary>
            Specifies the reference rectangle width of the text boundry.
            </summary>
            <value>
            A double representing the distance.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MText.RectHeight">
            <summary>
            Specifies the reference rectangle height of the text boundry.
            </summary>
            <value>
            A double representing the distance.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MText.TextHeight">
            <summary>
            The height of the text.
            </summary>
            <value>
            A double expressing the height of the text in current drawing units.
            </value>
            <remarks>
            This property is used as a scale factor for both the height and the width
            of the text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MText.AttachmentPoint">
            <summary>
            Specifies the attachment point of the mtext.
            </summary>
            <value>
            An <see cref="P:ComponentIngenuity.Ivan.MText.AttachmentPoint"/> enum.
            </value>
            <remarks>
            This property determines where the insertion point coincides with the
            bounding area of the mtext.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MText.DrawingDirection">
            <summary>
            Specifies the direction that the mtext is to be read.
            </summary>
            <value>
            An <see cref="P:ComponentIngenuity.Ivan.MText.DrawingDirection"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MText.ExtentsHeight">
            <summary>
            Specifies the height of the extent bounding area of the text.
            </summary>
            <value>
            A double representing the height.
            </value>
            <remarks>
            The extent bounding area is a rectangle that, when rotated, fits the
            actual image of the text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MText.ExtentsWidth">
            <summary>
            Specifies the width of the extent bounding area of the text.
            </summary>
            <value>
            A double representing the width.
            </value>
            <remarks>
            The extent bounding area is a rectangle that, when rotated, fits the
            actual image of the text.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MText.TextString">
            <summary>
            Specifies the actual text of the entity.
            </summary>
            <value>
            A string object containing the text.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MText.LineSpacingStyle">
            <summary>
            Specifies the line spacing style for the mtext.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.MText.LineSpacingStyle"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MText.LineSpacingFactor">
            <summary>
            Specifies the line spacing for the mtext.
            </summary>
            <value>
            A double representing the distance.
            </value>
            <remarks>
            The spacing factor is the distance from the baseline of one line of text
            to the next line.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MText.Style">
            <summary>
            The text style object for the text.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.TextStyle"/> object.
            </value>
            <remarks>
            This will be one of the text style objects in the <see cref="P:ComponentIngenuity.Ivan.Drawing.TextStyles"/>
            collection and specifies the font information used for the text.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.HatchPath">
            <summary>
            A hatch path object.
            </summary>
            <remarks>
            Closed paths form the boundries in which hatch patterns are
            drawn.  Paths, themselves, are composed of segments.  These segments
            can be circular arcs, elliptical arcs, lines, polylines, or splines.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchPath.BoundryObjects">
            <summary>
            The collection of boundry objects for the hatch path.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.DrawingEntityList"/> object.
            </value>
            <remarks>
            Closed paths form the boundries in which the hatch is drawn.  The entities
            that comprise those paths are the boundry objects.  This property is a
            collection of those objects.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchPath.Segments">
            <summary>
            The collection of <see cref="T:ComponentIngenuity.Ivan.HatchPathSegment"/> objects that comprise the
            path.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.HatchPathSegmentList"/> object.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Hatch">
            <summary>
            A hatch entity.
            </summary>
            <remarks>
            Hatch patterns are elaborate texture definitions that are applied over
            a defined area.  Basically, the hatch is made up of two core components,
            the boundries that define the area in which the hatch is drawn, and the
            pattern itself that is actually drawn in those boundries.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.IsGradient">
            <summary>
            Indicates if the Hatch is filled with a gradient.
            </summary>
            <value>
            A bool.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.GradientAngle">
            <summary>
            The rotation angle of the gradient.
            </summary>
            <value>
            A double representing the rotation angle in radians.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.GradientShift">
            <summary>
            The shift value of the gradient.
            </summary>
            <value>
            A double representing the shift value.
            </value>
            <remarks>
            This values represents where the gradient wiil emanate from.  Usually its 
            either top-left or centered.  
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.IsSingleColor">
            <summary>
            Specifies if the gradient is one color or two color.
            </summary>
            <value>
            A bool.
            </value>
            <remarks>
            The gradient can be one color or two color.  If this property is true, it 
            is one color.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.GradientTint">
            <summary>
            The degree of tint or shade for the gradient.
            </summary>
            <value>
            A double representing the tint/shade value.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.GradientName">
            <summary>
            The name of the gradient.
            </summary>
            <value>
            A string representing the name.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.GradientColors">
            <summary>
            The colors in the gradient.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.ColorList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.Elevation">
            <summary>
            The elevation of the hatch.
            </summary>
            <value>
            A double representing the elevation.
            </value>
            <remarks>
            The elevation is the z coordinate for the plane of the object.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.Normal">
            <summary>
            Unit normal vector to the surface formed by the hatch.
            </summary>
            <value>
            A Point3d whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the hatch.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.PatternName">
            <summary>
            The name of the hatch pattern.
            </summary>
            <value>
            A string containing the name of the pattern.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.IsSolid">
            <summary>
            Specifies if the hatch pattern is a solid fill.
            </summary>
            <value>
            A boolean value, <b>true</b> if the hatch is solid, <b>false</b> if it is not.
            </value>
            <remarks>
            Hatch patterns can be solid filled or they can be cross-hatched textures.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.IsAssociative">
            <summary>
            Specifies if the hatch is associative.
            </summary>
            <value>
            A boolean value, <b>true</b> if the hatch is associative, <b>false</b> if it is not.
            </value>
            <remarks>
            Associative hatch patterns update automatically when their borders are
            modified.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.PixelSize">
            <summary>
            Specifies the pixel size.
            </summary>
            <value>
            A double representing the size.
            </value>
            <remarks>
            This value is used by various intersection and ray casting operations
            to determine the density at which to perform it calculations.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.Paths">
            <summary>
            The collection of <see cref="T:ComponentIngenuity.Ivan.HatchPath"/> objects.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.HatchPathList"/> object.
            </value>
            <remarks>
            The hatch has a least on closed path, the one that defines its outer most boundries.
            Other closed paths can exist inside this boundry and the hatch must be layed
            out about them.  This property holds all the closed paths that are in the
            hatch area.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.Style">
            <summary>
            The island detection style for the hatch.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.HatchStyle"/> enum.
            </value>
            <remarks>
            When multiple paths are involved, decisions must be made on how the hatch
            will deal with the islands defined by the additional boundries.  They can
            be ignored or taken in to consideration.  This property specifies the method
            used.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.PatternType">
            <summary>
            The pattern type for the hatch.
            </summary>
            <value>
            A <see cref="P:ComponentIngenuity.Ivan.Hatch.PatternType"/> enum.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.DefinitionLines">
            <summary>
            The collection of <see cref="T:ComponentIngenuity.Ivan.HatchDefinitionLine"/> objects for the hatch.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.HatchDefinitionLineList"/> object.
            </value>
            <remarks>
            Hatches are produced by an iterative line drawing process.  The appearance
            of the hatch is controlled by the defintion of these lines.  This property
            is a collection of those line definitions that make up pattern.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.PatternAngle">
            <summary>
            The angle of the pattern.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            Vertical is zero.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.PatternScale">
            <summary>
            Specifies the pattern scale of the hatch.
            </summary>
            <value>
            A double representing the scale factor.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.PatternSpacing">
            <summary>
            Specifies the pattern spacing for the hatch when <see cref="P:ComponentIngenuity.Ivan.Hatch.PatternType"/>
            is <b>UserDefined</b>.
            </summary>
            <value>
            A double representing the spacing.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.IsDoubleHatched">
            <summary>
            Specifies if the pattern is cross-hatch when <see cref="P:ComponentIngenuity.Ivan.Hatch.PatternType"/>
            is <b>UserDefined</b>.
            </summary>
            <value>
            A boolean value, <b>true</b> if the pattern is double hatched, <b>false</b> if it is not.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Hatch.SeedPoints">
            <summary>
            The collection of seed points for the hatch.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2dList"/> object.
            </value>
            <remarks>
            Seed points are used by the drawing algorithm to deal with the case where
            there are multiple paths.  Their usage is governed by the <see cref="P:ComponentIngenuity.Ivan.Hatch.Style"/>
            property.  They basically indicate what is inside and what is outside the
            boundries to be interrogated.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.DiametricDimension">
            <summary>
            A diametric dimension.
            </summary>
            <remarks>
            A dimension measuring the diameter of a circle or arc.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DiametricDimension.FirstPoint">
            <summary>
            Specifies the first point of the line segment that forms the diameter.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
            <remarks>
            This point lies on the circle or arc.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DiametricDimension.SecondPoint">
            <summary>
            Specifies the second point of the line segment that forms the diameter.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
            <remarks>
            This point is opposite the <see cref="P:ComponentIngenuity.Ivan.DiametricDimension.FirstPoint"/>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.DiametricDimension.LeaderLength">
            <summary>
            Specifies the length of the leader on the dimension.
            </summary>
            <value>
            A double representing the length in drawing units.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Arc">
            <summary>
            A circular arc entity.
            </summary>
            <remarks>
            The arc is drawn counter-clockwise from the <see cref="P:ComponentIngenuity.Ivan.Arc.StartPoint"/> to the 
            <see cref="P:ComponentIngenuity.Ivan.Arc.EndPoint"/>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Arc.Center">
            <summary>
            The center of the arc.
            </summary>
            <value>
            A Point3d.
            </value>
            <remarks>
            This is the point that defines the center of the circle that the arc is on.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Arc.Radius">
            <summary>
            The radius of the arc.
            </summary>
            <value>
            A double representing the distance from the center to a point on the arc.
            </value>
            <remarks>
            The arc is circular so the radius is the radius of the circle containing
            the arc.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Arc.Thickness">
            <summary>
            The thickness of the arc.
            </summary>
            <value>
            A double. 
            </value>
            <remarks>
            The thickness it the extrusion of the arc in the z direction.  This
            direction is defined by the <see cref="P:ComponentIngenuity.Ivan.Arc.Normal"/> property.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Arc.Normal">
            <summary>
            Unit normal vector to the surface formed by the arc.
            </summary>
            <value>
            A Point3d whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the arc.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Arc.StartAngle">
            <summary>
            The start angle of the arc.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            A horizontal ray stemming from the <see cref="P:ComponentIngenuity.Ivan.Arc.Center"/> to the right would 
            represent an angle of 0 radians.  Moving counter-clockwise along the arc, 
            starting at 0 radians and stopping at the <see cref="P:ComponentIngenuity.Ivan.Arc.StartPoint"/> defines
            the start angle.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Arc.EndAngle">
            <summary>
            The end angle of the arc.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            A horizontal ray stemming from the <see cref="P:ComponentIngenuity.Ivan.Arc.Center"/> to the right would 
            represent an angle of 0 radians.  Moving counter-clockwise along the arc, 
            starting at 0 radians and stopping at the <see cref="P:ComponentIngenuity.Ivan.Arc.EndPoint"/> defines
            the end angle.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Arc.TotalAngle">
            <summary>
            The total angle of the arc.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            This is the angle as measured from the <see cref="P:ComponentIngenuity.Ivan.Arc.StartAngle"/> to the
            <see cref="P:ComponentIngenuity.Ivan.Arc.EndAngle"/>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Arc.ArcLength">
            <summary>
            The length of the arc.
            </summary>
            <value>
            A double representing the length.
            </value>
            <remarks>
            The portion of the circular circumference that constitutes the arc.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Arc.Area">
            <summary>
            Area of the arc.
            </summary>
            <value>
            A double.
            </value>
            <remarks>
            If the angle of the arc is less then 180 degress this property is the 
            area of the segment formed by connecting the <see cref="P:ComponentIngenuity.Ivan.Arc.StartPoint"/>
            and the <see cref="P:ComponentIngenuity.Ivan.Arc.EndPoint"/>.  If the angle of the arc is 180 degrees
            or greater this property is the portion of the circular area that remains 
            by removing the segment of the circle defined by connecting the
            <see cref="P:ComponentIngenuity.Ivan.Arc.StartPoint"/> and the <see cref="P:ComponentIngenuity.Ivan.Arc.EndPoint"/>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Arc.StartPoint">
            <summary>
            The start point of the arc.
            </summary>
            <value>
            A Point3d representing the start point of the arc.
            </value>
            <remarks>
            The arc is drawn counter-clockwise from the StartPoint to
            the <see cref="P:ComponentIngenuity.Ivan.Arc.EndPoint"/>.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Arc.EndPoint">
            <summary>
            The end point of the arc.
            </summary>
            <value>
            A Point3d representing the end point of the arc.
            </value>
            <remarks>
            The arc is drawn counter-clockwise from the <see cref="P:ComponentIngenuity.Ivan.Arc.StartPoint"/> to
            the EndPoint.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.AlignedDimension">
            <summary>
            An aligned dimension.
            </summary>
            <remarks>
            A linear dimension, measuring the distance between two points, that is
            displayed parallel to the points being measured
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AlignedDimension.ExtensionLine1Origin">
            <summary>
            Specifies the origin of the first extension line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AlignedDimension.ExtensionLine2Origin">
            <summary>
            Specifies the origin of the second extension line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AlignedDimension.DimensionLineLocation">
            <summary>
            Specifies the location of the dimension line (or arc).
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/>
            </value>
            <remarks>
            Generally, this property describes where the dimension line (or arc) meets
            the extension line.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.AlignedDimension.ExtensionLineRotation">
            <summary>
            Specifies the extension line rotation.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
            <remarks>
            When added to the rotation of the dimension gives the rotation of the
            extension lines.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.XRecordDataItemList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.XRecordDataItem"/> objects accessible by index.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.XRecordDataItemList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.XRecordDataItemList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.XRecordDataItemList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.XRecordDataItem"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.XRecordDataItem"/> object at the specified index.
            </returns>
        </member>
        <member name="T:ComponentIngenuity.Ivan.RegisteredAppList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.RegisteredApp"/> objects accessible by index, 
            name or unique id.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.RegisteredAppList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.RegisteredAppList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.RegisteredApp"/> from the list corresponding to the specified 
            UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.RegisteredApp"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The RegisteredApp is not in the List.</exception>
        </member>
        <member name="M:ComponentIngenuity.Ivan.RegisteredAppList.GetItemsByName(System.String)">
            <summary>
            Returns all the <see cref="T:ComponentIngenuity.Ivan.RegisteredApp"/> objects in the list that have the 
            specified name.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns a <see cref="T:ComponentIngenuity.Ivan.RegisteredAppList"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RegisteredAppList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RegisteredAppList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.RegisteredApp"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.RegisteredApp"/> object at the specified index.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.RegisteredAppList.Item(System.String)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.RegisteredApp"/> with the specified name in the list.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.RegisteredApp"/> object with the specified name.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The RegisteredApp is not in the List.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.DuplicateKeysFound">More than one RegisteredApp matched the Name.  Use GetItemsByName(name).</exception>
        </member>
        <member name="T:ComponentIngenuity.Ivan.BlockList">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.Block"/> objects accessible by index, name or 
            unique id.
            </summary>
        </member>
        <member name="M:ComponentIngenuity.Ivan.BlockList.GetEnumerator">
            <summary>
            Returns an enumerator that can iterate through the collection.
            </summary>
            <returns>
            Returns an <see cref="T:System.Collections.Generic.IEnumerator`1"/>.
            </returns>
        </member>
        <member name="M:ComponentIngenuity.Ivan.BlockList.GetItemByUniqueId(System.UInt64)">
            <summary>
            Gets an <see cref="T:ComponentIngenuity.Ivan.Block"/> from the list corresponding to the specified 
            UniqueId.
            </summary>
            <param name="uniqueId">
            A ulong representing the UniqueId of the object.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Block"/> object with the specified UniqueId.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The Block is not in the List.</exception>
        </member>
        <member name="M:ComponentIngenuity.Ivan.BlockList.GetItemsByName(System.String)">
            <summary>
            Returns all the <see cref="T:ComponentIngenuity.Ivan.Block"/> objects in the list that have the 
            specified name.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns a <see cref="T:ComponentIngenuity.Ivan.BlockList"/>.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.BlockList.Count">
            <summary>
            Returns the number of objects contained in the list.
            </summary>
            <returns>
            Returns an int representing the number of objects in the list.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.BlockList.Item(System.Int32)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Block"/> at the specified index in the list.
            </summary>
            <param name="index">
            An int specifying the index of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Block"/> object at the specified index.
            </returns>
        </member>
        <member name="P:ComponentIngenuity.Ivan.BlockList.Item(System.String)">
            <summary>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Block"/> with the specified name in the list.
            </summary>
            <param name="name">
            A string specifying the name of the object in the list.
            </param>
            <returns>
            Returns the <see cref="T:ComponentIngenuity.Ivan.Block"/> with the specified name.
            </returns>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.KeyNotFoundException">The Block is not in the List.</exception>
            <exception cref="T:ComponentIngenuity.Ivan.Exceptions.DuplicateKeysFound">More than one Block matched the Name.  Use GetItemsByName(name).</exception>
        </member>
        <member name="T:ComponentIngenuity.Ivan.XRecordDataItem">
            <summary>
            An xrecord data item object.
            </summary>
            <remarks>
            The <see cref="T:ComponentIngenuity.Ivan.XRecord"/> object is a named collection of these data
            items.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.XRecordDataItem.DataType">
            <summary>
            Specifies the data type of the data item.
            </summary>
            <value>
            A int value where:
            <br/>
            <br/>
            0-9 			String 
            <br/>
            10-39 		Double precision 3D point value
            <br/>
            40-59 		Double-precision floating-point value
            <br/>
            60-79 		16-bit integer value
            <br/>
            90-99 		32-bit integer value
            <br/>
            100 			String (255-character maximum; less for Unicode strings)
            <br/>
            102 			String (255-character maximum; less for Unicode strings)
            <br/>
            105 			String representing hexadecimal (hex) handle value
            <br/>
            110-119 	Double precision floating-point value
            <br/>
            120-129 	Double precision floating-point value
            <br/>
            130-139 	Double precision floating-point value
            <br/>
            140-149 	Double precision scalar floating-point value
            <br/>
            170-179 	16-bit integer value
            <br/>
            210-239 	Double-precision floating-point value
            <br/>
            270-279 	16-bit integer value
            <br/>
            280-289 	8-bit integer value
            <br/>
            290-299 	Boolean flag value
            <br/>
            300-309 	Arbitrary text string
            <br/>
            310-319 	String representing hex value of binary chunk
            <br/>
            320-329 	String representing hex handle value
            <br/>
            330-369 	String representing hex object IDs
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.XRecordDataItem.Value">
            <summary>
            The actual value of the data item.
            </summary>
            <value>
            An object castable to the proper data type given by <see cref="P:ComponentIngenuity.Ivan.XRecordDataItem.DataType"/>.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.MLineStyle">
            <summary>
            A mline style object.
            </summary>
            <remarks>
            The mline style object specifies the properties of the mline as well as
            the number of elements and the properties of those elements for the
            mline.  An element represents a single line in the mline set.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyle.Name">
            <summary>
            The name of the style.
            </summary>
            <value>
            A string representing the name.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyle.Description">
            <summary>
            Specifies the description of the style.
            </summary>
            <value>
            A string containing the description.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyle.StartLineCap">
            <summary>
            Specifies if the start of the mline is capped.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the start point is capped
            <br/>
            <b>false</b> - the start point is not capped
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyle.EndLineCap">
            <summary>
            Specifies if the end of the mline is capped.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the end point is capped
            <br/>
            <b>false</b> - the end point is not capped
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyle.StartOuterArcCap">
            <summary>
            Specifies if the start of the mline has an arc joining its outer lines.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the start point has an outer arc
            <br/>
            <b>false</b> - the start point does not have an outer arc
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyle.EndOuterArcCap">
            <summary>
            Specifies if the end of the mline has an arc joining its outer lines.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the end point has an outer arc
            <br/>
            <b>false</b> - the end point does not have an outer arc
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyle.StartInnerArcCap">
            <summary>
            Specifies if the start of the mline has an arc joining its inner lines.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the start point has an inner arc
            <br/>
            <b>false</b> - the start point does not have an inner arc
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyle.EndInnerArcCap">
            <summary>
            Specifies if the end of the mline has an arc joining its inner lines.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the end point has an inner arc
            <br/>
            <b>false</b> - the end point does not have an inner arc
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyle.Fill">
            <summary>
            Specifies if the mline is filled.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - the mline is filled
            <br/>
            <b>false</b> - the mline is not filled
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyle.DisplayMiters">
            <summary>
            Specifies if miters should be drawn at each vertex of the mline.
            </summary>
            <value>
            A boolean value:
            <br/>
            <br/>
            <b>true</b> - draw miters
            <br/>
            <b>false</b> - do not draw miters
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyle.StartAngleCap">
            <summary>
            Specifies the angle of the end cap at the start of the mline.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyle.EndAngleCap">
            <summary>
            Specifies the angle of the end cap at the end of the mline.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyle.FillColor">
            <summary>
            Color of the MLine fill.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Color"/> object that specifies the color attributes.
            </value>
            <remarks>
            Colors can originate from an AutoCADÂ® Color Index (ACI), a True Color
            or a Color Book.  The TrueColor property exposes a <see cref="T:ComponentIngenuity.Ivan.Color"/>
            object that can be used to get the ACI value or the RGB values.  In
            addition, if the color originates from a Color Book, it will provide
            the name of the Color Book as well as the particular entry selected
            from that book.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.MLineStyle.Elements">
            <summary>
            A collection of <see cref="T:ComponentIngenuity.Ivan.MLineStyleElement"/> objects that define the
            individual lines of the mline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.MLineStyleElementList"/> object.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.FaceRecord">
            <summary>
            A polyface mesh face entity.
            </summary>
            <remarks>
            These faces are joined together to form the polyface mesh.  They are
            defined as a set of indexes into the <see cref="P:ComponentIngenuity.Ivan.PolyfaceMesh.Vertices"/>
            property of the mesh.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.FaceRecord.VertexIndex1">
            <summary>
            Specifies the first vertex of the mesh.
            </summary>
            <value>
            A int value representing the index of the vertex in the
            <see cref="P:ComponentIngenuity.Ivan.PolyfaceMesh.Vertices"/> collection.
            </value>
            <remarks>
            The index is base 1.  A negative value indicates that the edge that 
            begins at this vertex is invisible.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.FaceRecord.VertexIndex2">
            <summary>
            Specifies the second vertex of the mesh.
            </summary>
            <value>
            A int value representing the index of the vertex in the
            <see cref="P:ComponentIngenuity.Ivan.PolyfaceMesh.Vertices"/> collection.
            </value>
            <remarks>
            The index is base 1.  A negative value indicates that the edge that 
            begins at this vertex is invisible.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.FaceRecord.VertexIndex3">
            <summary>
            Specifies the third vertex of the mesh.
            </summary>
            <value>
            A int value representing the index of the vertex in the
            <see cref="P:ComponentIngenuity.Ivan.PolyfaceMesh.Vertices"/> collection.
            </value>
            <remarks>
            The index is base 1.  A negative value indicates that the edge that 
            begins at this vertex is invisible.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.FaceRecord.VertexIndex4">
            <summary>
            Specifies the fourth vertex of the mesh.
            </summary>
            <value>
            A int value representing the index of the vertex in the
            <see cref="P:ComponentIngenuity.Ivan.PolyfaceMesh.Vertices"/> collection.
            </value>
            <remarks>
            The index is base 1.  If there are only three vertices then this
            property will be zero. A negative value indicates that the edge that 
            begins at this vertex is invisible.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Point">
            <summary>
            A point entity.
            </summary>
            <remarks>
            The point entity is a marker that can appear as a dot, circle, square, an x,
            tick, or plus sign or as a combination of these. The type and size of the
            point entity is determined by the <see cref="P:ComponentIngenuity.Ivan.SystemVariables.PDMODE"/> and
            <see cref="P:ComponentIngenuity.Ivan.SystemVariables.PDSIZE"/>, respectively.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Point.Coordinate">
            <summary>
            Specifies the coordinate of the point entity.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Point.Thickness">
            <summary>
            The thickness of the point.
            </summary>
            <value>
            A double. 
            </value>
            <remarks>
            The thickness it the extrusion of the point in the z direction.  This
            direction is defined by the <see cref="P:ComponentIngenuity.Ivan.Point.Normal"/> property.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Point.Normal">
            <summary>
            Unit normal vector to the surface formed by the point.
            </summary>
            <value>
            A Point3d whose properties represent the magnitudes of the 3D normal vector.
            </value>
            <remarks>
            The normal vector defines the z axis for the point.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Point.XAxisAngle">
            <summary>
            Specifies the angle of the x axis of current UCS at the time the point
            was drawn.
            </summary>
            <value>
            A double representing the angle in radians.
            </value>
        </member>
        <member name="T:ComponentIngenuity.Ivan.LightweightVertex">
            <summary>
            A ligtweightvertex object.
            </summary>
            <remarks>
            This object is used to represent the vertex of a lightweight polyline.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LightweightVertex.Point">
            <summary>
            The coordinates of the vertex.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LightweightVertex.StartWidth">
            <summary>
            Specifies the width of the segment that starts at this point.
            </summary>
            <value>
            A double representing the width.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LightweightVertex.EndWidth">
            <summary>
            Specifies the width of the segment that ends at this point.
            </summary>
            <value>
            A double representing the width.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.LightweightVertex.Bulge">
            <summary>
            Specifies the bulge value for the vertex.
            </summary>
            <value>
            A double representing the value.
            </value>
            <remarks>
            The bulge is the tangent of one fourth
            the included angle for an arc segment, made negative if the arc goes
            clockwise from the start point to the endpoint. A bulge of 0 indicates
            a straight segment, and a bulge of 1 is a semicircle.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.HatchSplineSegment">
            <summary>
            A spline hatch path segment.
            </summary>
            <remarks>
            This segment of the path is part of a spline.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchSplineSegment.FitPoints">
            <summary>
            The fit points for the spline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2dList"/> collection object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchSplineSegment.StartTangent">
            <summary>
            The start tangent of the spline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> representing a vector.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchSplineSegment.EndTangent">
            <summary>
            The end tangent of the spline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> representing a vector.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchSplineSegment.Degree">
            <summary>
            The degree of the spline.
            </summary>
            <value>
            An integer between 1 and 25.
            </value>
            <remarks>
            This is the degree of the polynomial equation used to generate the curve.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchSplineSegment.IsRational">
            <summary>
            Specifies if the control points are weighted.
            </summary>
            <value>
            A boolean value, <b>true</b> if the points are weighted, <b>false</b> if not.
            </value>
            <remarks>
            Weights determine the degree of influence that the control points have
            on the curve.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchSplineSegment.IsPeriodic">
            <summary>
            Specifies if the curve is periodic.
            </summary>
            <value>
            A boolean value, <b>true</b> if the curve is periodic, <b>false</b> if it is not.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchSplineSegment.Knots">
            <summary>
            Collection of knots for the spline.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.DoubleList"/> collection object.
            </value>
            <remarks>
            This collection actually holds, in mathematical terms, the breakpoints
            of the spline.  They are used in the formula to generate the curve.  They
            are associated with the intervals that break up the curve into its
            constituent segments.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchSplineSegment.ControlPoints">
            <summary>
            A collection of the control points.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.ControlPoint2dList"/> collection object.
            </value>
            <remarks>
            These are points that are used in the mathematical formula to generate
            the curve.  
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.HatchDefinitionLine">
            <summary>
            A hatch definition line object.
            </summary>
            <remarks>
            The pattern for a hatch is defined by a set of definition lines that
            describe to the hatch generation algorithm how to produce the hatch
            pattern.  The hatch drawing process is an iterative procedure of applying
            the line definitions and offsetting.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchDefinitionLine.Dashes">
            <summary>
            A collection of double values represent the dash lengths of the definition
            line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.DoubleList"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchDefinitionLine.Angle">
            <summary>
            The angle of the definition line.
            </summary>
            <value>
            A double representing the angle.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchDefinitionLine.OriginPoint">
            <summary>
            The origin point for the definition line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object.
            </value>
            <remarks>
            This is the start point for the first line drawn in the pattern.
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.HatchDefinitionLine.Offset">
            <summary>
            The offset for the definition line.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point2d"/> object representing the offset vector.
            </value>
            <remarks>
            This value defines the amount to offset each line that is drawn subsequent to
            the one before it. It holds the delta-x and delta-y values.
            </remarks>
        </member>
        <member name="T:ComponentIngenuity.Ivan.Face3d">
            <summary>
            A 3D face entity.
            </summary>
            <remarks>
            The 3D face object is a three or four side plane section. 
            </remarks>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Face3d.Vertex1">
            <summary>
            The first vertex of the face.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Face3d.Vertex2">
            <summary>
            The second vertex of the face.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Face3d.Vertex3">
            <summary>
            The third vertex of the face.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Face3d.Vertex4">
            <summary>
            The fourth vertex of the face.
            </summary>
            <value>
            A <see cref="T:ComponentIngenuity.Ivan.Point3d"/> object.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Face3d.IsVisibleEdge1">
            <summary>
            Specifies if edge #1 is visible.
            </summary>
            <value>
            A boolean value, <b>true</b> if the edge is visible, <b>false</b> if it is hidden.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Face3d.IsVisibleEdge2">
            <summary>
            Specifies if edge #2 is visible.
            </summary>
            <value>
            A boolean value, <b>true</b> if the edge is visible, <b>false</b> if it is hidden.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Face3d.IsVisibleEdge3">
            <summary>
            Specifies if edge #3 is visible.
            </summary>
            <value>
            A boolean value, <b>true</b> if the edge is visible, <b>false</b> if it is hidden.
            </value>
        </member>
        <member name="P:ComponentIngenuity.Ivan.Face3d.IsVisibleEdge4">
            <summary>
            Specifies if edge #4 is visible.
            </summary>
            <value>
            A boolean value, <b>true</b> if the edge is visible, <b>false</b> if it is hidden.
            </value>
        </member>
    </members>
</doc>
